<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>it❤ld</title>
  
  
  <link href="http://www.itbuild.cn/atom.xml" rel="self"/>
  
  <link href="http://www.itbuild.cn/"/>
  <updated>2020-12-18T19:00:36.096Z</updated>
  <id>http://www.itbuild.cn/</id>
  
  <author>
    <name>DuanChaojie</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>RabbitMQ/2.RabbitMQ基本介绍</title>
    <link href="http://www.itbuild.cn/2020/12/19/RabbitMQ/2.RabbitMQ%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D/"/>
    <id>http://www.itbuild.cn/2020/12/19/RabbitMQ/2.RabbitMQ%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D/</id>
    <published>2020-12-18T18:42:42.378Z</published>
    <updated>2020-12-18T19:00:36.096Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>2007年，Rabbit 技术公司基于 AMQP 标准开发的 RabbitMQ 1.0 发布。RabbitMQ 采用 Erlang 语言开发。<code>Erlang 语言由 Ericson 设计，专门为开发高并发和分布式系统的一种语言，在电信领域使用广泛。</code></p><a id="more"></a><h2 id="RabbitMQ基本介绍"><a href="#RabbitMQ基本介绍" class="headerlink" title="RabbitMQ基本介绍"></a>RabbitMQ基本介绍</h2><p><code>AMQP，即 Advanced Message Queuing Protocol（高级消息队列协议），是一个网络协议</code>，是<code>应用层协议</code>的一个开放标准，为面向消息的中间件设计。基于此协议的客户端与消息中间件可传递消息，并不受客户端/中间件不同产品，不同的开发语言等条件的限制。<code>2006年，AMQP 规范发布。类比HTTP。</code></p><p><img src="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/mq/image-20201214204900113.png" alt="image-20201214204900113"></p><p>2007年，Rabbit 技术公司基于 AMQP 标准开发的 RabbitMQ 1.0 发布。RabbitMQ 采用 Erlang 语言开发。<code>Erlang 语言由 Ericson 设计，专门为开发高并发和分布式系统的一种语言，在电信领域使用广泛。</code></p><h3 id="1-RabbitMQ-基础架构"><a href="#1-RabbitMQ-基础架构" class="headerlink" title="1. RabbitMQ 基础架构"></a>1. RabbitMQ 基础架构</h3><p><img src="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/mq/image-20201214204938331.png" alt="image-20201214204938331"></p><h3 id="2-RabbitMQ-中的相关概念"><a href="#2-RabbitMQ-中的相关概念" class="headerlink" title="2. RabbitMQ 中的相关概念"></a>2. RabbitMQ 中的相关概念</h3><p><code>Broker：</code>接收和分发消息的应用，<code>RabbitMQ Server就是 Message Broker。</code></p><p><code>Virtual host：</code>出于多租户和安全因素设计的，把 AMQP 的基本组件划分到一个虚拟的分组中，类似于网络中的 namespace 概念。当多个不同的用户使用同一个 RabbitMQ server 提供的服务时，可以划分出多个vhost，每个用户在自己的 vhost 创建 exchange／queue 等。</p><p><code>Connection：</code>publisher／consumer 和 broker 之间的 TCP 连接。</p><p><code>Channel：</code>如果每一次访问 RabbitMQ 都建立一个 Connection，在消息量大的时候建立 TCP Connection的开销将是巨大的，效率也较低。Channel 是在 connection 内部建立的逻辑连接，如果应用程序支持多线程，通常每个thread创建单独的 channel 进行通讯，AMQP method 包含了channel id 帮助客户端和message broker 识别 channel，所以 channel 之间是完全隔离的。Channel 作为轻量级的 Connection 极大减少了操作系统建立 TCP connection 的开销。</p><p><code>Exchange：</code>message 到达 broker 的第一站，根据分发规则，<code>匹配查询表中的 routing key，</code>分发消息到queue 中去。常用的类型有：</p><ul><li><code>direct (point-to-point)</code></li><li><code>topic (publish-subscribe)</code> </li><li><code>fanout (multicast)</code></li></ul><p><code>Queue：</code>消息最终被送到这里等待 consumer 取走</p><p><code>Binding：</code>exchange 和 queue 之间的虚拟连接，binding 中可以包含 routing key。Binding 信息被保存到 exchange 中的查询表中，用于 message 的分发依据</p><h3 id="3-RabbitMQ的6-种工作模式"><a href="#3-RabbitMQ的6-种工作模式" class="headerlink" title="3. RabbitMQ的6 种工作模式"></a>3. RabbitMQ的6 种工作模式</h3><p>RabbitMQ 提供了 6 种工作模式：</p><p>==简单模式、work queues、Publish/Subscribe 发布与订阅模式、Routing 路由模式、Topics 主题模式、RPC 远程调用模式（远程调用，不太算 MQ；暂不作介绍）。==</p><p>官网对应模式介绍：<a href="https://www.rabbitmq.com/getstarted.html" target="_blank" rel="noopener">https://www.rabbitmq.com/getstarted.html</a></p><p><img src="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/mq/1555988678324.png" alt="1555988678324"></p><h3 id="4-AMQP-和-JMS"><a href="#4-AMQP-和-JMS" class="headerlink" title="4. AMQP 和 JMS"></a>4. AMQP 和 JMS</h3><p>MQ是消息通信的模型；<code>实现MQ的大致有两种主流方式：AMQP、JMS。</code></p><h4 id="4-1-AMQP"><a href="#4-1-AMQP" class="headerlink" title="4.1 AMQP"></a>4.1 AMQP</h4><p>AMQP是一种协议，更准确的说是一种binary wire-level protocol（链接协议）。这是其和JMS的本质差别，AMQP不从API层进行限定，而是直接定义网络交换的数据格式。</p><h4 id="4-2-JMS"><a href="#4-2-JMS" class="headerlink" title="4.2 JMS"></a>4.2 JMS</h4><p><code>JMS即Java消息服务（JavaMessage Service）应用程序接口，</code>是一个Java平台中关于面向消息中间件（MOM）的API，用于在两个应用程序之间，或分布式系统中发送消息，进行异步通信。</p><p> JMS 是 JavaEE 规范中的一种，类比JDBC。</p><h4 id="4-3-AMQP-与-JMS-区别☆"><a href="#4-3-AMQP-与-JMS-区别☆" class="headerlink" title="4.3 AMQP 与 JMS 区别☆"></a>4.3 AMQP 与 JMS 区别☆</h4><p>JMS是定义了统一的接口，来对消息操作进行统一；AMQP是通过规定协议来统一数据交互的格式</p><p>JMS限定了必须使用Java语言；AMQP只是协议，不规定实现方式，因此是跨语言的。</p><p>JMS规定了两种消息模式；而AMQP的消息模式更加丰富</p><h4 id="4-4-再谈市场上常见的消息队列"><a href="#4-4-再谈市场上常见的消息队列" class="headerlink" title="4.4 再谈市场上常见的消息队列"></a>4.4 再谈市场上常见的消息队列</h4><p>ActiveMQ：基于JMS</p><p>ZeroMQ：基于C语言开发</p><p>RabbitMQ：基于AMQP协议，erlang语言开发，稳定性好</p><p>RocketMQ：基于JMS，阿里巴巴产品</p><p>Kafka：类似MQ的产品；分布式消息系统，高吞吐量。</p><h2 id="☆"><a href="#☆" class="headerlink" title="☆"></a>☆</h2>]]></content>
    
    
    <summary type="html">&lt;p&gt;2007年，Rabbit 技术公司基于 AMQP 标准开发的 RabbitMQ 1.0 发布。RabbitMQ 采用 Erlang 语言开发。&lt;code&gt;Erlang 语言由 Ericson 设计，专门为开发高并发和分布式系统的一种语言，在电信领域使用广泛。&lt;/code&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="RabbitMQ" scheme="http://www.itbuild.cn/categories/RabbitMQ/"/>
    
    
  </entry>
  
  <entry>
    <title>RabbitMQ/1.MQ基本概念</title>
    <link href="http://www.itbuild.cn/2020/12/19/RabbitMQ/1.MQ%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"/>
    <id>http://www.itbuild.cn/2020/12/19/RabbitMQ/1.MQ%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</id>
    <published>2020-12-18T17:02:07.283Z</published>
    <updated>2020-12-18T19:07:59.233Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><code>MQ全称 Message Queue（消息队列）</code>，是在消息的传输过程中保存消息的容器。<code>多</code>用于<code>分布式系统之间进行通信。</code></p><a id="more"></a><h2 id="1-MQ概述"><a href="#1-MQ概述" class="headerlink" title="1. MQ概述"></a>1. MQ概述</h2><blockquote><p><code>MQ全称 Message Queue（消息队列）</code>，是在消息的传输过程中保存消息的容器。<code>多</code>用于<code>分布式系统之间进行通信。</code></p></blockquote><p><img src="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/mq/image-20201214200516263.png" alt="image-20201214200516263"></p><blockquote><p>使用MQ中间件</p></blockquote><p><img src="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/mq/image-20201214200537641.png" alt="image-20201214200537641"></p><blockquote><p>小结：</p><ol><li>MQ—消息队列，存储消息的中间件。</li><li>分布式系统通信两种方式：<code>直接远程调用</code>和==借助第三方完成间接通信==。</li><li>发送方称为生产者，接收方称为消费者。</li></ol></blockquote><h2 id="2-MQ的优势和劣势"><a href="#2-MQ的优势和劣势" class="headerlink" title="2. MQ的优势和劣势"></a>2. MQ的优势和劣势</h2><h4 id="2-1-优势"><a href="#2-1-优势" class="headerlink" title="2.1 优势"></a>2.1 优势</h4><blockquote><ol><li>应用解耦：提高系统容错性和可维护性。</li><li>异步提速：提升用户体验和系统吞吐量。</li><li>削峰填谷：提高系统稳定性。</li></ol></blockquote><h6 id="应用解耦"><a href="#应用解耦" class="headerlink" title="应用解耦"></a>应用解耦</h6><p>系统的耦合性越高，容错性就越低，可维护性就越低。</p><p><img src="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/mq/image-20201214202740735.png" alt="image-20201214202740735"></p><p>使用 MQ 使得应用间解耦，提升容错性和可维护性。</p><p><img src="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/mq/image-20201214202817687.png" alt="image-20201214202817687"></p><h6 id="异步提速"><a href="#异步提速" class="headerlink" title="异步提速"></a>异步提速</h6><p><img src="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/mq/image-20201214203001503.png" alt="image-20201214203001503"></p><p>一个下单操作耗时：20 + 300 + 300 + 300 = 920ms<br>用户点击完下单按钮后，需要等待920ms才能得到下单响应，太慢！</p><p><img src="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/mq/image-20201214203119022.png" alt="image-20201214203119022"></p><p>用户点击完下单按钮后，只需等待25ms就能得到下单响应 (20 + 5 = 25ms)。<br><code>提升用户体验和系统吞吐量（单位时间内处理请求的数目）。</code></p><h6 id="削峰填谷"><a href="#削峰填谷" class="headerlink" title="削峰填谷"></a>削峰填谷</h6><p><img src="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/mq/image-20201214203243219.png" alt="image-20201214203243219"></p><p><img src="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/mq/image-20201214203331072.png" alt="image-20201214203331072"></p><p><img src="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/mq/image-20201214203352618.png" alt="image-20201214203352618"></p><p>使用了 MQ 之后，限制消费消息的速度为1000，这样一来，高峰期产生的数据势必会被积压在 MQ 中，高峰就被“削”掉了，但是因为消息积压，在高峰期过后的一段时间内，消费消息的速度还是会维持在1000，直到消费完积压的消息，这就叫做<code>“填谷”</code>。<br><code>使用MQ后，可以提高系统稳定性。</code></p><h5 id="2-2-劣势"><a href="#2-2-劣势" class="headerlink" title="2.2 劣势"></a>2.2 劣势</h5><p><img src="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/mq/image-20201214203702793.png" alt="image-20201214203702793"></p><h6 id="系统可用性降低"><a href="#系统可用性降低" class="headerlink" title="系统可用性降低"></a>系统可用性降低</h6><p>系统引入的外部依赖越多，系统稳定性越差。一旦 MQ 宕机，就会对业务造成影响。如何保证MQ的高可用？</p><h6 id="系统复杂度提高"><a href="#系统复杂度提高" class="headerlink" title="系统复杂度提高"></a>系统复杂度提高</h6><p>MQ 的加入大大增加了系统的复杂度，以前系统间是同步的远程调用，现在是通过 MQ 进行异步调用。如何保证消息没有被重复消费？怎么处理消息丢失情况？那么保证消息传递的顺序性？</p><h6 id="一致性问题"><a href="#一致性问题" class="headerlink" title="一致性问题"></a>一致性问题</h6><p>A 系统处理完业务，通过 MQ 给B、C、D三个系统发消息数据，如果 B 系统、C 系统处理成功，D 系统处理失败。如何保证消息数据处理的一致性？</p><h5 id="2-3-使用条件"><a href="#2-3-使用条件" class="headerlink" title="2.3 使用条件"></a>2.3 使用条件</h5><p>既然 MQ 有优势也有劣势，那么使用 MQ 需要满足什么条件呢？</p><blockquote><ol><li>生产者不需要从消费者处获得反馈。引入消息队列之前的直接调用，其接口的返回值应该为空，这才让明明下层的动作还没做，上层却当成动作做完了继续往后走，即所谓异步成为了可能。</li><li>容许短暂的不一致性。</li><li>确实是用了有效果。即解耦、提速、削峰这些方面的收益，超过加入MQ，管理MQ这些成本。</li></ol></blockquote><h5 id="2-4-常见的MQ产品"><a href="#2-4-常见的MQ产品" class="headerlink" title="2.4 常见的MQ产品"></a>2.4 常见的MQ产品</h5><p>目前业界有很多的 MQ 产品，例如 <code>RabbitMQ</code>、RocketMQ、<code>ActiveMQ、Kafka</code>、ZeroMQ、MetaMq等，也有直接使用 Redis 充当消息队列的案例，而这些消息队列产品，各有侧重，在实际选型时，需要结合自身需求及 MQ 产品特征，综合考虑。</p><p><img src="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/mq/image-20201214204101628.png" alt="image-20201214204101628"></p><h3 id="☆"><a href="#☆" class="headerlink" title="☆"></a>☆</h3>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;code&gt;MQ全称 Message Queue（消息队列）&lt;/code&gt;，是在消息的传输过程中保存消息的容器。&lt;code&gt;多&lt;/code&gt;用于&lt;code&gt;分布式系统之间进行通信。&lt;/code&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="RabbitMQ" scheme="http://www.itbuild.cn/categories/RabbitMQ/"/>
    
    
  </entry>
  
</feed>
