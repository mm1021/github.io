<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>it❤ld</title>
  
  
  <link href="http://www.itbuild.cn/atom.xml" rel="self"/>
  
  <link href="http://www.itbuild.cn/"/>
  <updated>2020-12-14T12:00:27.618Z</updated>
  <id>http://www.itbuild.cn/</id>
  
  <author>
    <name>DuanChaojie</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>rabbitmq笔记/rabbitmq/配置文件/springboot/application</title>
    <link href="http://www.itbuild.cn/2020/12/19/rabbitmq%E7%AC%94%E8%AE%B0/rabbitmq/%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/springboot/application/"/>
    <id>http://www.itbuild.cn/2020/12/19/rabbitmq%E7%AC%94%E8%AE%B0/rabbitmq/%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/springboot/application/</id>
    <published>2020-12-18T16:05:49.154Z</published>
    <updated>2020-12-14T12:00:27.618Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>{"spring":{"rabbitmq":{"host":"172.16.98.133","username":"guest","password":"guest","virtual-host":"/","port":5672}}}]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>rabbitmq笔记/rabbitmq/rabbitmq-springboot/producer-springboot/target/classes/application</title>
    <link href="http://www.itbuild.cn/2020/12/19/rabbitmq%E7%AC%94%E8%AE%B0/rabbitmq/rabbitmq-springboot/producer-springboot/target/classes/application/"/>
    <id>http://www.itbuild.cn/2020/12/19/rabbitmq%E7%AC%94%E8%AE%B0/rabbitmq/rabbitmq-springboot/producer-springboot/target/classes/application/</id>
    <published>2020-12-18T16:05:48.318Z</published>
    <updated>2020-12-15T08:21:38.001Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>{"spring":{"rabbitmq":{"host":"106.15.72.229","port":5672,"username":"heima","password":"heima","virtual-host":"/itcast"}}}]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>rabbitmq笔记/rabbitmq/rabbitmq-springboot/producer-springboot/src/main/resources/application</title>
    <link href="http://www.itbuild.cn/2020/12/19/rabbitmq%E7%AC%94%E8%AE%B0/rabbitmq/rabbitmq-springboot/producer-springboot/src/main/resources/application/"/>
    <id>http://www.itbuild.cn/2020/12/19/rabbitmq%E7%AC%94%E8%AE%B0/rabbitmq/rabbitmq-springboot/producer-springboot/src/main/resources/application/</id>
    <published>2020-12-18T16:05:48.050Z</published>
    <updated>2020-12-15T04:29:24.555Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>{"spring":{"rabbitmq":{"host":"106.15.72.229","port":5672,"username":"heima","password":"heima","virtual-host":"/itcast"}}}]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>rabbitmq笔记/rabbitmq/rabbitmq-springboot/consumer-springboot/target/classes/application</title>
    <link href="http://www.itbuild.cn/2020/12/19/rabbitmq%E7%AC%94%E8%AE%B0/rabbitmq/rabbitmq-springboot/consumer-springboot/target/classes/application/"/>
    <id>http://www.itbuild.cn/2020/12/19/rabbitmq%E7%AC%94%E8%AE%B0/rabbitmq/rabbitmq-springboot/consumer-springboot/target/classes/application/</id>
    <published>2020-12-18T16:05:47.248Z</published>
    <updated>2020-12-15T08:22:58.465Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>{"spring":{"rabbitmq":{"host":"106.15.72.229","port":5672,"username":"heima","password":"heima","virtual-host":"/itcast"}}}]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>rabbitmq笔记/rabbitmq/rabbitmq-springboot/consumer-springboot/src/main/resources/application</title>
    <link href="http://www.itbuild.cn/2020/12/19/rabbitmq%E7%AC%94%E8%AE%B0/rabbitmq/rabbitmq-springboot/consumer-springboot/src/main/resources/application/"/>
    <id>http://www.itbuild.cn/2020/12/19/rabbitmq%E7%AC%94%E8%AE%B0/rabbitmq/rabbitmq-springboot/consumer-springboot/src/main/resources/application/</id>
    <published>2020-12-18T16:05:47.012Z</published>
    <updated>2020-12-15T08:10:09.691Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>{"spring":{"rabbitmq":{"host":"106.15.72.229","port":5672,"username":"heima","password":"heima","virtual-host":"/itcast"}}}]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>rabbitmq笔记/rabbitmq/rabbitmq-springboot/consumer-springboot/HELP</title>
    <link href="http://www.itbuild.cn/2020/12/19/rabbitmq%E7%AC%94%E8%AE%B0/rabbitmq/rabbitmq-springboot/consumer-springboot/HELP/"/>
    <id>http://www.itbuild.cn/2020/12/19/rabbitmq%E7%AC%94%E8%AE%B0/rabbitmq/rabbitmq-springboot/consumer-springboot/HELP/</id>
    <published>2020-12-18T16:05:43.684Z</published>
    <updated>2019-08-19T12:15:55.504Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Getting-Started"><a href="#Getting-Started" class="headerlink" title="Getting Started"></a>Getting Started</h1><h3 id="Reference-Documentation"><a href="#Reference-Documentation" class="headerlink" title="Reference Documentation"></a>Reference Documentation</h3><p>For further reference, please consider the following sections:</p><ul><li><a href="https://maven.apache.org/guides/index.html" target="_blank" rel="noopener">Official Apache Maven documentation</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>rabbitmq笔记/9.RabbitMQ高级特性</title>
    <link href="http://www.itbuild.cn/2020/12/19/rabbitmq%E7%AC%94%E8%AE%B0/9.RabbitMQ%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7/"/>
    <id>http://www.itbuild.cn/2020/12/19/rabbitmq%E7%AC%94%E8%AE%B0/9.RabbitMQ%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7/</id>
    <published>2020-12-18T16:05:37.001Z</published>
    <updated>2020-12-15T13:01:59.257Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>[toc]</p><h2 id="RabbitMQ高级特性"><a href="#RabbitMQ高级特性" class="headerlink" title="RabbitMQ高级特性"></a>RabbitMQ高级特性</h2><h3 id="1-消息可靠性投递"><a href="#1-消息可靠性投递" class="headerlink" title="1. 消息可靠性投递"></a>1. 消息可靠性投递</h3><p>在使用 RabbitMQ 的时候，作为消息发送方希望杜绝任何消息丢失或者投递失败场景。RabbitMQ 为我们提供了两种方式用来控制消息的投递可靠性模式。</p><ol><li><code>confirm 确认模式</code></li><li><code>return  退回模式</code></li></ol><p>rabbitmq 整个消息投递的路径为：==producer—&gt;rabbitmq broker—&gt;exchange—&gt;queue—&gt;consumer==</p><ol><li>消息从 producer 到 exchange 则会返回一个 confirmCallback 。</li><li>消息从 exchange–&gt;queue 投递失败则会返回一个 returnCallback 。</li></ol><p>我们将利用这两个 callback 控制消息的可靠性投递。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">设置ConnectionFactory的publisher-confirms=<span class="string">"true"</span> 开启 确认模式。</span><br><span class="line"></span><br><span class="line">使用rabbitTemplate.setConfirmCallback设置回调函数。当消息发送到exchange后回调confirm方法。在方法中判断ack，如果为<span class="keyword">true</span>，则发送成功，如果为<span class="keyword">false</span>，则发送失败，需要处理。</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">设置ConnectionFactory的publisher-returns=<span class="string">"true"</span> 开启 退回模式。</span><br><span class="line"></span><br><span class="line">使用rabbitTemplate.setReturnCallback设置退回函数，当消息从exchange路由到queue失败后，如果设置了rabbitTemplate.setMandatory(<span class="keyword">true</span>)参数，则会将消息退回给producer。并执行回调函数returnedMessage。</span><br><span class="line"></span><br><span class="line">在RabbitMQ中也提供了事务机制，但是性能较差，此处不做讲解。</span><br><span class="line">使用channel下列方法，完成事务控制：</span><br><span class="line">    txSelect(), 用于将当前channel设置成transaction模式</span><br><span class="line">    txCommit()，用于提交事务</span><br><span class="line">    txRollback(),用于回滚事务</span><br></pre></td></tr></table></figure><h3 id="2-Consumer-ACK"><a href="#2-Consumer-ACK" class="headerlink" title="2. Consumer ACK"></a>2. Consumer ACK</h3><p>ack指Acknowledge，确认。 表示消费端收到消息后的确认方式。有三种确认方式：</p><ol><li>自动确认：acknowledge=”none”</li><li>手动确认：acknowledge=”manual”</li><li>根据异常情况确认：acknowledge=”auto”，（这种方式使用麻烦，不作讲解）</li></ol><p>其中自动确认是指，当消息一旦被Consumer接收到，则自动确认收到，并将相应 message 从 RabbitMQ 的消息缓存中移除。但是在实际业务处理中，很可能消息接收到，业务处理出现异常，那么该消息就会丢失<code>。如果设置了手动确认方式，则需要在业务处理成功后，调用channel.basicAck()，手动签收，如果出现异常，则调用channel.basicNack()方法，让其自动重新发送消息。</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">在rabbit:listener-container标签中设置acknowledge属性，设置ack方式 </span><br><span class="line">    none：自动确认</span><br><span class="line">    manual：手动确认</span><br><span class="line">如果在消费端没有出现异常，则调用channel.basicAck(deliveryTag,<span class="keyword">false</span>);方法确认签收消息</span><br><span class="line"></span><br><span class="line">如果出现异常，则在<span class="keyword">catch</span>中调用 basicNack或 basicReject，拒绝消息，让MQ重新发送消息。</span><br></pre></td></tr></table></figure><h4 id="消息可靠性总结"><a href="#消息可靠性总结" class="headerlink" title="消息可靠性总结"></a>消息可靠性总结</h4><ol><li>持久化<ul><li>exchange要持久化</li><li>queue要持久化</li><li>message要持久化</li></ul></li><li>生产方确认Confirm</li><li>消费方确认Ack</li><li><code>Broker高可用</code></li></ol><h3 id="3-消费端限流"><a href="#3-消费端限流" class="headerlink" title="3. 消费端限流"></a>3. 消费端限流</h3><p><img src="assets/image-20201215194346929.png" alt="image-20201215194346929"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">在<span class="tag">&lt;<span class="name">rabbit:listener-container</span>&gt;</span> 中配置 prefetch属性设置消费端一次拉取多少消息</span><br><span class="line"></span><br><span class="line">消费端的确认模式一定为手动确认。acknowledge="manual"</span><br></pre></td></tr></table></figure><h3 id="4-TTL"><a href="#4-TTL" class="headerlink" title="4. TTL"></a>4. TTL</h3><ol><li>TTL 全称 Time To Live（存活时间/过期时间）。</li><li>当消息到达存活时间后，还没有被消费，会被自动清除。</li><li>RabbitMQ可以对消息设置过期时间，也可以对整个队列（Queue）设置过期时间。</li></ol><p><img src="assets/image-20201215194457685.png" alt="image-20201215194457685"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">设置队列过期时间使用参数：x-message-ttl，单位：ms(毫秒)，会对整个队列消息统一过期。</span><br><span class="line"></span><br><span class="line">设置消息过期时间使用参数：expiration。单位：ms(毫秒)，当该消息在队列头部时（消费时），会单独判断这一消息是否过期。</span><br><span class="line"></span><br><span class="line">如果两者都进行了设置，以时间短的为准。</span><br></pre></td></tr></table></figure><h3 id="5-死信队列☆"><a href="#5-死信队列☆" class="headerlink" title="5. 死信队列☆"></a>5. 死信队列☆</h3><p><code>死信队列，英文缩写：DLX  。Dead Letter Exchange（死信交换机）</code>，当消息成为Dead message后，可以被重新发送到另一个交换机，这个交换机就是DLX。</p><p><img src="assets/image-20201215200048724.png" alt="image-20201215200048724"></p><p>==消息成为死信的三种情况：==</p><ol><li>队列消息长度到达限制；</li><li>消费者拒接消费消息，<code>basicNack/basicReject,并且不把消息重新放入原目标队列,requeue=false；</code></li><li>原队列存在消息过期设置，消息到达超时时间未被消费；</li></ol><p>队列绑定死信交换机：</p><ol><li><code>给队列设置参数： x-dead-letter-exchange 和 x-dead-letter-routing-key</code></li><li><img src="assets/image-20201215200152842.png" alt="image-20201215200152842"></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>. 死信交换机和死信队列和普通的没有区别</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>. 当消息成为死信后，如果该队列绑定了死信交换机，则消息会被死信交换机重新路由到死信队列</span><br></pre></td></tr></table></figure><h3 id="6-延迟队列☆"><a href="#6-延迟队列☆" class="headerlink" title="6. 延迟队列☆"></a>6. 延迟队列☆</h3><p>延迟队列，即消息进入队列后不会立即被消费，只有到达指定时间后，才会被消费。</p><p>需求：</p><ol><li>下单后，30分钟未支付，取消订单，回滚库存。</li><li>新用户注册成功7天后，发送短信问候。</li></ol><p>实现方式：</p><ol><li>定时器</li><li><code>延迟队列</code></li></ol><p><img src="assets/image-20201215204106248.png" alt="image-20201215204106248"></p><p><code>很可惜，在RabbitMQ中并未提供延迟队列功能。</code>但是可以使用：==TTL+死信队列 组合实现延迟队列的效果。==</p><p><img src="assets/image-20201215204134505.png" alt="image-20201215204134505"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>. 延迟队列 指消息进入队列后，可以被延迟一定时间，再进行消费。</span><br><span class="line"><span class="number">2</span>. RabbitMQ没有提供延迟队列功能，但是可以使用 ： TTL + DLX 来实现延迟队列效果。</span><br></pre></td></tr></table></figure><h3 id="7-日志与监控"><a href="#7-日志与监控" class="headerlink" title="7. 日志与监控"></a>7. 日志与监控</h3><h4 id="7-1-RabbitMQ日志"><a href="#7-1-RabbitMQ日志" class="headerlink" title="7.1 RabbitMQ日志"></a>7.1 RabbitMQ日志</h4><p>RabbitMQ默认日志存放路径： <code>/var/log/rabbitmq/rabbit@xxx.log</code></p><p>日志包含了RabbitMQ的版本号、Erlang的版本号、RabbitMQ服务节点名称、cookie的hash值、RabbitMQ配置文件地址、内存限制、磁盘限制、默认账户guest的创建以及权限配置等等。</p><h4 id="7-2-web管控台监控"><a href="#7-2-web管控台监控" class="headerlink" title="7.2 web管控台监控"></a>7.2 web管控台监控</h4><h4 id="7-3-rabbitmqctl管理和监控"><a href="#7-3-rabbitmqctl管理和监控" class="headerlink" title="7.3 rabbitmqctl管理和监控"></a>7.3 rabbitmqctl管理和监控</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看队列</span></span><br><span class="line">rabbitmqctl list_queues</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看exchanges</span></span><br><span class="line">rabbitmqctl list_exchanges</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看用户</span></span><br><span class="line">rabbitmqctl list_users</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看连接</span></span><br><span class="line">rabbitmqctl list_connections</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看消费者信息</span></span><br><span class="line">rabbitmqctl list_consumers</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看环境变量</span></span><br><span class="line">rabbitmqctl environment</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看未被确认的队列</span></span><br><span class="line">rabbitmqctl list_queues  name messages_unacknowledged</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看单个队列的内存使用</span></span><br><span class="line">rabbitmqctl list_queues name memory</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看准备就绪的队列</span></span><br><span class="line">rabbitmqctl list_queues name messages_ready</span><br></pre></td></tr></table></figure><h3 id="8-消息可靠性分析与追踪"><a href="#8-消息可靠性分析与追踪" class="headerlink" title="8. 消息可靠性分析与追踪"></a>8. 消息可靠性分析与追踪</h3><p>在使用任何消息中间件的过程中，难免会出现某条消息异常丢失的情况。对于RabbitMQ而言，可能是因为生产者或消费者与RabbitMQ断开了连接，而它们与RabbitMQ又采用了不同的确认机制；也有可能是因为交换器与队列之间不同的转发策略；甚至是交换器并没有与任何队列进行绑定，生产者又不感知或者没有采取相应的措施；另外RabbitMQ本身的集群策略也可能导致消息的丢失。这个时候就需要有一个较好的机制跟踪记录消息的投递过程，以此协助开发和运维人员进行问题的定位。</p><p><code>在RabbitMQ中可以使用Firehose和rabbitmq_tracing插件功能来实现消息追踪。</code></p><p>Firehose的机制是将生产者投递给rabbitmq的消息，rabbitmq投递给消费者的消息按照指定的格式发送到默认的exchange上。<code>这个默认的exchange的名称为amq.rabbitmq.trace</code>，它是一个topic类型的exchange。发送到这个exchange上的消息的routing key为 publish.exchangename 和 deliver.queuename。其中exchangename和queuename为实际exchange和queue的名称，分别对应生产者投递到exchange的消息，和消费者从queue上获取的消息。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">注意：打开 trace 会影响消息写入功能，适当打开后请关闭。</span></span><br><span class="line"></span><br><span class="line">rabbitmqctl trace_on #开启Firehose命令</span><br><span class="line">rabbitmqctl trace_off #关闭Firehose命令</span><br></pre></td></tr></table></figure><p>消息追踪rabbitmq_tracing</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rabbitmq_tracing和Firehose在实现上如出一辙，只不过rabbitmq_tracing的方式比Firehose多了一层GUI的包装，更容易使用和管理。</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">启用插件：</span></span><br><span class="line">rabbitmq-plugins enable rabbitmq_tracing</span><br></pre></td></tr></table></figure><h2 id="☆"><a href="#☆" class="headerlink" title="☆"></a>☆</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>rabbitmq笔记/8.SpringBoot整合RabbitMQ</title>
    <link href="http://www.itbuild.cn/2020/12/19/rabbitmq%E7%AC%94%E8%AE%B0/8.SpringBoot%E6%95%B4%E5%90%88RabbitMQ/"/>
    <id>http://www.itbuild.cn/2020/12/19/rabbitmq%E7%AC%94%E8%AE%B0/8.SpringBoot%E6%95%B4%E5%90%88RabbitMQ/</id>
    <published>2020-12-18T16:05:36.992Z</published>
    <updated>2020-12-15T10:55:03.650Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Spring-Boot整合RabbitMQ"><a href="#Spring-Boot整合RabbitMQ" class="headerlink" title="Spring Boot整合RabbitMQ"></a>Spring Boot整合RabbitMQ</h1><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h2><p>在Spring项目中，可以使用Spring-Rabbit去操作RabbitMQ<br><a href="https://github.com/spring-projects/spring-amqp" target="_blank" rel="noopener">https://github.com/spring-projects/spring-amqp</a></p><p>尤其是在spring boot项目中只需要引入对应的amqp启动器依赖即可，方便的使用RabbitTemplate发送消息，使用注解接收消息。</p><p>一般在开发过程中：</p><p><code>生产者工程：</code></p><ol><li><p>application.yml文件配置$RabbitMQ$相关信息；</p></li><li><p>在生产者工程中编写配置类，用于创建交换机和队列，并进行绑定</p></li><li><p>注入RabbitTemplate对象，通过RabbitTemplate对象发送消息到交换机</p></li></ol><p><code>消费者工程：</code></p><ol><li><p>application.yml文件配置$RabbitMQ$相关信息</p></li><li><p>创建消息处理类，用于接收队列中的消息并进行处理</p></li></ol><h2 id="2-搭建生产者工程"><a href="#2-搭建生产者工程" class="headerlink" title="2. 搭建生产者工程"></a>2. 搭建生产者工程</h2><h3 id="2-1-创建工程"><a href="#2-1-创建工程" class="headerlink" title="2.1 创建工程"></a>2.1 创建工程</h3><p>创建生产者工程springboot-rabbitmq-producer</p><p><img src="assets/1558321303612.png" alt="1556072078816"></p><p><img src="assets/1558321417385.png" alt="1556072084653"></p><h3 id="2-2-添加依赖"><a href="#2-2-添加依赖" class="headerlink" title="2.2 添加依赖"></a>2.2 添加依赖</h3><p>修改pom.xml文件内容为如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itheima<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>producer-springboot<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        1. 父工程依赖</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--2. rabbitmq--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-3-启动类"><a href="#2-3-启动类" class="headerlink" title="2.3 启动类"></a>2.3 启动类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProducerApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ProducerApplication<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4-配置RabbitMQ"><a href="#2-4-配置RabbitMQ" class="headerlink" title="2.4 配置RabbitMQ"></a>2.4 配置RabbitMQ</h3><h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><p>创建application.yml，内容如下：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置RabbitMQ的基本信息  ip 端口 username  password..</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">106.15</span><span class="number">.72</span><span class="number">.229</span> <span class="comment"># ip</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">heima</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">heima</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/itcast</span></span><br></pre></td></tr></table></figure><h4 id="绑定交换机和队列"><a href="#绑定交换机和队列" class="headerlink" title="绑定交换机和队列"></a>绑定交换机和队列</h4><p>创建RabbitMQ队列与交换机绑定的配置类com.itheima.rabbitmq.config.RabbitMQConfig</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.rabbitmq.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitMQConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 交换机名称</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String EXCHANGE_NAME = <span class="string">"boot_topic_exchange"</span>;</span><br><span class="line">    <span class="comment">// 队列名称</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE_NAME = <span class="string">"boot_queue"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.交换机</span></span><br><span class="line">    <span class="meta">@Bean</span>(<span class="string">"bootExchange"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Exchange <span class="title">bootExchange</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ExchangeBuilder.topicExchange(EXCHANGE_NAME).durable(<span class="keyword">true</span>).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.Queue 队列</span></span><br><span class="line">    <span class="meta">@Bean</span>(<span class="string">"bootQueue"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">bootQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> QueueBuilder.durable(QUEUE_NAME).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3. 队列和交互机绑定关系 Binding</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        1. 知道哪个队列</span></span><br><span class="line"><span class="comment">        2. 知道哪个交换机</span></span><br><span class="line"><span class="comment">        3. routing key</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">bindQueueExchange</span><span class="params">(@Qualifier(<span class="string">"bootQueue"</span>)</span> Queue queue, @<span class="title">Qualifier</span><span class="params">(<span class="string">"bootExchange"</span>)</span> Exchange exchange) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(queue).to(exchange).with(<span class="string">"boot.#"</span>).noargs();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-搭建消费者工程"><a href="#3-搭建消费者工程" class="headerlink" title="3. 搭建消费者工程"></a>3. 搭建消费者工程</h2><h3 id="3-1-创建工程"><a href="#3-1-创建工程" class="headerlink" title="3.1 创建工程"></a>3.1 创建工程</h3><p>创建消费者工程springboot-rabbitmq-consumer</p><p><img src="assets/1558322109359.png" alt="1556073553841"></p><p><img src="assets/1558322192435.png" alt="1556073567786"></p><h3 id="3-2-添加依赖"><a href="#3-2-添加依赖" class="headerlink" title="3.2 添加依赖"></a>3.2 添加依赖</h3><p>修改pom.xml文件内容为如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itheima<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>consumer-springboot<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- RabbitMQ 启动依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-3-启动类"><a href="#3-3-启动类" class="headerlink" title="3.3 启动类"></a>3.3 启动类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.rabbitmq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ConsumerApplication<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-4-配置RabbitMQ"><a href="#3-4-配置RabbitMQ" class="headerlink" title="3.4 配置RabbitMQ"></a>3.4 配置RabbitMQ</h3><p>创建application.yml，内容如下：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置RabbitMQ的基本信息  ip 端口 username  password..</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">106.15</span><span class="number">.72</span><span class="number">.229</span> <span class="comment"># ip</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">heima</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">heima</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/itcast</span></span><br></pre></td></tr></table></figure><h3 id="3-5-消息监听处理类"><a href="#3-5-消息监听处理类" class="headerlink" title="3.5 消息监听处理类"></a>3.5 消息监听处理类</h3><p>编写消息监听器com.itheima.rabbitmq.listener.RabbimtMQListener</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.consumerspringboot;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Message;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbimtMQListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// </span></span><br><span class="line">    <span class="meta">@RabbitListener</span>(queues = <span class="string">"boot_queue"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ListenerQueue</span><span class="params">(Message message)</span></span>&#123;</span><br><span class="line">        <span class="comment">//System.out.println(message);</span></span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(message.getBody()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-测试"><a href="#4-测试" class="headerlink" title="4. 测试"></a>4. 测试</h2><p>在生产者工程springboot-rabbitmq-producer中创建测试类，发送消息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.test;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.rabbitmq.config.RabbitMQConfig;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">ProducerTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.注入RabbitTemplate</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSend</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        rabbitTemplate.convertAndSend(RabbitMQConfig.EXCHANGE_NAME,<span class="string">"boot.haha"</span>,<span class="string">"boot mq hello~~~"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="assets/image-20201215162243570.png" alt="image-20201215162243570"></p><p>先运行上述测试程序（交换机和队列才能先被声明和绑定），然后启动消费者；在消费者工程springboot-rabbitmq-consumer中控制台查看是否接收到对应消息。</p><p><img src="assets/image-20201215162317180.png" alt="image-20201215162317180"></p><p>另外；也可以在RabbitMQ的管理控制台中查看到交换机与队列的绑定：</p><p><img src="assets/image-20201215162341130.png" alt="image-20201215162341130"></p><h2 id="5-小结☆"><a href="#5-小结☆" class="headerlink" title="5. 小结☆"></a>5. 小结☆</h2><h4 id="生产端"><a href="#生产端" class="headerlink" title="生产端"></a>生产端</h4><pre><code>1. 创建生产者SpringBoot工程2. 引入start，依赖坐标3. 编写yml配置，基本信息配置4. 定义交换机，队列以及绑定关系的配置类5. 注入RabbitTemplate，调用方法，完成消息发送</code></pre><h4 id="消费端"><a href="#消费端" class="headerlink" title="消费端"></a>消费端</h4><pre><code>1. 创建消费者SpringBoot工程 2. 引入start，依赖坐标 3. 编写yml配置，基本信息配置 4. 定义监听类，使用@RabbitListener注解完成队列监听。</code></pre><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ol><li>SpringBoot提供了快速整合RabbitMQ的方式</li><li>基本信息再yml中配置，队列交互机以及绑定关系在配置类中使用Bean的方式配置</li><li>生产端直接注入RabbitTemplate完成消息发送</li><li>消费端直接使用@RabbitListener完成消息接收</li></ol><h1 id="☆"><a href="#☆" class="headerlink" title="☆"></a>☆</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>rabbitmq笔记/7.Spring整合RabbitMQ</title>
    <link href="http://www.itbuild.cn/2020/12/19/rabbitmq%E7%AC%94%E8%AE%B0/7.Spring%E6%95%B4%E5%90%88RabbitMQ/"/>
    <id>http://www.itbuild.cn/2020/12/19/rabbitmq%E7%AC%94%E8%AE%B0/7.Spring%E6%95%B4%E5%90%88RabbitMQ/</id>
    <published>2020-12-18T16:05:36.980Z</published>
    <updated>2020-12-15T04:27:12.507Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>[toc]</p><h1 id="Spring-整合RabbitMQ"><a href="#Spring-整合RabbitMQ" class="headerlink" title="Spring 整合RabbitMQ"></a>Spring 整合RabbitMQ</h1><h2 id="1-搭建生产者工程"><a href="#1-搭建生产者工程" class="headerlink" title="1. 搭建生产者工程"></a>1. 搭建生产者工程</h2><h3 id="1-1-创建工程"><a href="#1-1-创建工程" class="headerlink" title="1.1 创建工程"></a>1.1 创建工程</h3><p><img src="assets/1565149342994.png" alt="1565149342994"></p><p><img src="assets/1565144326498.png" alt="1565144326498"></p><h3 id="1-2-添加依赖"><a href="#1-2-添加依赖" class="headerlink" title="1.2 添加依赖"></a>1.2 添加依赖</h3><p>修改pom.xml文件内容为如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itheima<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-rabbitmq-producers<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.amqp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-rabbit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.8.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-3-配置整合☆"><a href="#1-3-配置整合☆" class="headerlink" title="1.3 配置整合☆"></a>1.3 配置整合☆</h3><p>创建<code>spring-rabbitmq-producer\src\main\resources\properties\rabbitmq.properties</code>连接参数等配置文件；</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">rabbitmq.host</span>=<span class="string">106.15.72.229</span></span><br><span class="line"><span class="meta">rabbitmq.port</span>=<span class="string">5672</span></span><br><span class="line"><span class="meta">rabbitmq.username</span>=<span class="string">heima</span></span><br><span class="line"><span class="meta">rabbitmq.password</span>=<span class="string">heima</span></span><br><span class="line"><span class="meta">rabbitmq.virtual-host</span>=<span class="string">/itcast</span></span><br></pre></td></tr></table></figure><p>创建 <code>spring-rabbitmq-producer\src\main\resources\spring-rabbitmq.xml</code> 整合配置文件；</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:rabbit</span>=<span class="string">"http://www.springframework.org/schema/rabbit"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">       https://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/rabbit</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/rabbit/spring-rabbit.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--加载配置文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:rabbitmq.properties"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 定义rabbitmq connectionFactory --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rabbit:connection-factory</span> <span class="attr">id</span>=<span class="string">"connectionFactory"</span> <span class="attr">host</span>=<span class="string">"$&#123;rabbitmq.host&#125;"</span></span></span><br><span class="line"><span class="tag">                               <span class="attr">port</span>=<span class="string">"$&#123;rabbitmq.port&#125;"</span></span></span><br><span class="line"><span class="tag">                               <span class="attr">username</span>=<span class="string">"$&#123;rabbitmq.username&#125;"</span></span></span><br><span class="line"><span class="tag">                               <span class="attr">password</span>=<span class="string">"$&#123;rabbitmq.password&#125;"</span></span></span><br><span class="line"><span class="tag">                               <span class="attr">virtual-host</span>=<span class="string">"$&#123;rabbitmq.virtual-host&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--定义管理交换机、队列--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rabbit:admin</span> <span class="attr">connection-factory</span>=<span class="string">"connectionFactory"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--定义持久化队列，不存在则自动创建；不绑定到交换机则绑定到默认交换机</span></span><br><span class="line"><span class="comment">    默认交换机类型为direct，名字为：""，路由键为队列的名称</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        id：bean的名称</span></span><br><span class="line"><span class="comment">        name：queue的名称</span></span><br><span class="line"><span class="comment">        auto-declare:自动创建</span></span><br><span class="line"><span class="comment">        auto-delete:自动删除。 最后一个消费者和该队列断开连接后，自动删除队列</span></span><br><span class="line"><span class="comment">        exclusive:是否独占</span></span><br><span class="line"><span class="comment">        durable：是否持久化</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">rabbit:queue</span> <span class="attr">id</span>=<span class="string">"spring_queue"</span> <span class="attr">name</span>=<span class="string">"spring_queue"</span>    <span class="attr">auto-declare</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~广播；所有队列都能收到消息~~~~~~~~~~~~~~~~~~~~~~~~~~~~ --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--定义广播交换机中的持久化队列，不存在则自动创建--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rabbit:queue</span> <span class="attr">id</span>=<span class="string">"spring_fanout_queue_1"</span> <span class="attr">name</span>=<span class="string">"spring_fanout_queue_1"</span> <span class="attr">auto-declare</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--定义广播交换机中的持久化队列，不存在则自动创建--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rabbit:queue</span> <span class="attr">id</span>=<span class="string">"spring_fanout_queue_2"</span> <span class="attr">name</span>=<span class="string">"spring_fanout_queue_2"</span> <span class="attr">auto-declare</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--定义广播类型交换机；并绑定上述两个队列--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rabbit:fanout-exchange</span> <span class="attr">id</span>=<span class="string">"spring_fanout_exchange"</span> <span class="attr">name</span>=<span class="string">"spring_fanout_exchange"</span>  <span class="attr">auto-declare</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rabbit:bindings</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">rabbit:binding</span>  <span class="attr">queue</span>=<span class="string">"spring_fanout_queue_1"</span>  /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">rabbit:binding</span> <span class="attr">queue</span>=<span class="string">"spring_fanout_queue_2"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rabbit:bindings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">rabbit:fanout-exchange</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--&lt;rabbit:direct-exchange name="aa" &gt;</span></span><br><span class="line"><span class="comment">        &lt;rabbit:bindings&gt;</span></span><br><span class="line"><span class="comment">            &amp;lt;!&amp;ndash;direct 类型的交换机绑定队列  key ：路由key  queue：队列名称&amp;ndash;&amp;gt;</span></span><br><span class="line"><span class="comment">            &lt;rabbit:binding queue="spring_queue" key="xxx"&gt;&lt;/rabbit:binding&gt;</span></span><br><span class="line"><span class="comment">        &lt;/rabbit:bindings&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    &lt;/rabbit:direct-exchange&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~通配符；*匹配一个单词，#匹配多个单词 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~ --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--定义广播交换机中的持久化队列，不存在则自动创建--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rabbit:queue</span> <span class="attr">id</span>=<span class="string">"spring_topic_queue_star"</span> <span class="attr">name</span>=<span class="string">"spring_topic_queue_star"</span>  <span class="attr">auto-declare</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--定义广播交换机中的持久化队列，不存在则自动创建--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rabbit:queue</span> <span class="attr">id</span>=<span class="string">"spring_topic_queue_well"</span> <span class="attr">name</span>=<span class="string">"spring_topic_queue_well"</span> <span class="attr">auto-declare</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--定义广播交换机中的持久化队列，不存在则自动创建--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rabbit:queue</span> <span class="attr">id</span>=<span class="string">"spring_topic_queue_well2"</span> <span class="attr">name</span>=<span class="string">"spring_topic_queue_well2"</span> <span class="attr">auto-declare</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">rabbit:topic-exchange</span> <span class="attr">id</span>=<span class="string">"spring_topic_exchange"</span>  <span class="attr">name</span>=<span class="string">"spring_topic_exchange"</span> <span class="attr">auto-declare</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rabbit:bindings</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">rabbit:binding</span> <span class="attr">pattern</span>=<span class="string">"heima.*"</span>  <span class="attr">queue</span>=<span class="string">"spring_topic_queue_star"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">rabbit:binding</span> <span class="attr">pattern</span>=<span class="string">"heima.#"</span> <span class="attr">queue</span>=<span class="string">"spring_topic_queue_well"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">rabbit:binding</span> <span class="attr">pattern</span>=<span class="string">"itcast.#"</span> <span class="attr">queue</span>=<span class="string">"spring_topic_queue_well2"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rabbit:bindings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">rabbit:topic-exchange</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--定义rabbitTemplate对象操作可以在代码中方便发送消息--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rabbit:template</span> <span class="attr">id</span>=<span class="string">"rabbitTemplate"</span> <span class="attr">connection-factory</span>=<span class="string">"connectionFactory"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-4-发送消息"><a href="#1-4-发送消息" class="headerlink" title="1.4 发送消息"></a>1.4 发送消息</h3><p>创建测试文件 <code>spring-rabbitmq-producer\src\test\java\com\itheima\rabbitmq\ProducerTest.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.ContextConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">ContextConfiguration</span>(<span class="title">locations</span> </span>= <span class="string">"classpath:spring-rabbitmq-producer.xml"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProducerTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.注入 RabbitTemplate</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testHelloWorld</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//2.发送消息</span></span><br><span class="line"></span><br><span class="line">        rabbitTemplate.convertAndSend(<span class="string">"spring_queue"</span>,<span class="string">"hello world spring...."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送fanout消息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFanout</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//2.发送消息</span></span><br><span class="line"></span><br><span class="line">        rabbitTemplate.convertAndSend(<span class="string">"spring_fanout_exchange"</span>,<span class="string">""</span>,<span class="string">"spring fanout...."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送topic消息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testTopics</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//2.发送消息</span></span><br><span class="line"></span><br><span class="line">        rabbitTemplate.convertAndSend(<span class="string">"spring_topic_exchange"</span>,<span class="string">"heima.hehe.haha"</span>,<span class="string">"spring topic...."</span>);</span><br><span class="line">        rabbitTemplate.convertAndSend(<span class="string">"spring_topic_exchange"</span>,<span class="string">"itcast.hehe.haha"</span>,<span class="string">"spring topic...."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-搭建消费者工程"><a href="#2-搭建消费者工程" class="headerlink" title="2. 搭建消费者工程"></a>2. 搭建消费者工程</h2><h3 id="2-1-创建工程"><a href="#2-1-创建工程" class="headerlink" title="2.1 创建工程"></a>2.1 创建工程</h3><p><img src="assets/1565149374831.png" alt="1565149374831"></p><p><img src="assets/1565144775216.png" alt="1565144775216"></p><h3 id="2-2-添加依赖"><a href="#2-2-添加依赖" class="headerlink" title="2.2 添加依赖"></a>2.2 添加依赖</h3><p>修改pom.xml文件内容为如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itheima<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-rabbitmq-consumers<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.amqp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-rabbit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.8.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-3-配置整合"><a href="#2-3-配置整合" class="headerlink" title="2.3 配置整合"></a>2.3 配置整合</h3><p>创建<code>spring-rabbitmq-consumer\src\main\resources\properties\rabbitmq.properties</code>连接参数等配置文件；</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">rabbitmq.host</span>=<span class="string">106.15.72.229</span></span><br><span class="line"><span class="meta">rabbitmq.port</span>=<span class="string">5672</span></span><br><span class="line"><span class="meta">rabbitmq.username</span>=<span class="string">heima</span></span><br><span class="line"><span class="meta">rabbitmq.password</span>=<span class="string">heima</span></span><br><span class="line"><span class="meta">rabbitmq.virtual-host</span>=<span class="string">/itcast</span></span><br></pre></td></tr></table></figure><p>创建 <code>spring-rabbitmq-consumer\src\main\resources\spring-rabbitmq.xml</code> 整合配置文件；</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:rabbit</span>=<span class="string">"http://www.springframework.org/schema/rabbit"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">       https://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/rabbit</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/rabbit/spring-rabbit.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--加载配置文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:properties/rabbitmq.properties"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 定义rabbitmq connectionFactory --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rabbit:connection-factory</span> <span class="attr">id</span>=<span class="string">"connectionFactory"</span> <span class="attr">host</span>=<span class="string">"$&#123;rabbitmq.host&#125;"</span></span></span><br><span class="line"><span class="tag">                               <span class="attr">port</span>=<span class="string">"$&#123;rabbitmq.port&#125;"</span></span></span><br><span class="line"><span class="tag">                               <span class="attr">username</span>=<span class="string">"$&#123;rabbitmq.username&#125;"</span></span></span><br><span class="line"><span class="tag">                               <span class="attr">password</span>=<span class="string">"$&#123;rabbitmq.password&#125;"</span></span></span><br><span class="line"><span class="tag">                               <span class="attr">virtual-host</span>=<span class="string">"$&#123;rabbitmq.virtual-host&#125;"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"springQueueListener"</span> <span class="attr">class</span>=<span class="string">"com.itheima.rabbitmq.listener.SpringQueueListener"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"fanoutListener1"</span> <span class="attr">class</span>=<span class="string">"com.itheima.rabbitmq.listener.FanoutListener1"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"fanoutListener2"</span> <span class="attr">class</span>=<span class="string">"com.itheima.rabbitmq.listener.FanoutListener2"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"topicListenerStar"</span> <span class="attr">class</span>=<span class="string">"com.itheima.rabbitmq.listener.TopicListenerStar"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"topicListenerWell"</span> <span class="attr">class</span>=<span class="string">"com.itheima.rabbitmq.listener.TopicListenerWell"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"topicListenerWell2"</span> <span class="attr">class</span>=<span class="string">"com.itheima.rabbitmq.listener.TopicListenerWell2"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">rabbit:listener-container</span> <span class="attr">connection-factory</span>=<span class="string">"connectionFactory"</span> <span class="attr">auto-declare</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rabbit:listener</span> <span class="attr">ref</span>=<span class="string">"springQueueListener"</span> <span class="attr">queue-names</span>=<span class="string">"spring_queue"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rabbit:listener</span> <span class="attr">ref</span>=<span class="string">"fanoutListener1"</span> <span class="attr">queue-names</span>=<span class="string">"spring_fanout_queue_1"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rabbit:listener</span> <span class="attr">ref</span>=<span class="string">"fanoutListener2"</span> <span class="attr">queue-names</span>=<span class="string">"spring_fanout_queue_2"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rabbit:listener</span> <span class="attr">ref</span>=<span class="string">"topicListenerStar"</span> <span class="attr">queue-names</span>=<span class="string">"spring_topic_queue_star"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rabbit:listener</span> <span class="attr">ref</span>=<span class="string">"topicListenerWell"</span> <span class="attr">queue-names</span>=<span class="string">"spring_topic_queue_well"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rabbit:listener</span> <span class="attr">ref</span>=<span class="string">"topicListenerWell2"</span> <span class="attr">queue-names</span>=<span class="string">"spring_topic_queue_well2"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">rabbit:listener-container</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-4-消息监听器"><a href="#2-4-消息监听器" class="headerlink" title="2.4 消息监听器"></a>2.4 消息监听器</h3><h4 id="队列监听器"><a href="#队列监听器" class="headerlink" title="队列监听器"></a>队列监听器</h4><p>创建 <code>spring-rabbitmq-consumer\src\main\java\com\itheima\rabbitmq\listener\SpringQueueListener.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringQueueListener</span> <span class="keyword">implements</span> <span class="title">MessageListener</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(Message message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String msg = <span class="keyword">new</span> String(message.getBody(), <span class="string">"utf-8"</span>);</span><br><span class="line"></span><br><span class="line">            System.out.printf(<span class="string">"接收路由名称为：%s，路由键为：%s，队列名为：%s的消息：%s \n"</span>,</span><br><span class="line">                    message.getMessageProperties().getReceivedExchange(),</span><br><span class="line">                    message.getMessageProperties().getReceivedRoutingKey(),</span><br><span class="line">                    message.getMessageProperties().getConsumerQueue(),</span><br><span class="line">                    msg);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="广播监听器1"><a href="#广播监听器1" class="headerlink" title="广播监听器1"></a>广播监听器1</h4><p>创建 <code>spring-rabbitmq-consumer\src\main\java\com\itheima\rabbitmq\listener\FanoutListener1.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Message;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.MessageListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FanoutListener1</span> <span class="keyword">implements</span> <span class="title">MessageListener</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(Message message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String msg = <span class="keyword">new</span> String(message.getBody(), <span class="string">"utf-8"</span>);</span><br><span class="line"></span><br><span class="line">            System.out.printf(<span class="string">"广播监听器1：接收路由名称为：%s，路由键为：%s，队列名为：%s的消息：%s \n"</span>,</span><br><span class="line">                    message.getMessageProperties().getReceivedExchange(),</span><br><span class="line">                    message.getMessageProperties().getReceivedRoutingKey(),</span><br><span class="line">                    message.getMessageProperties().getConsumerQueue(),</span><br><span class="line">                    msg);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="广播监听器2"><a href="#广播监听器2" class="headerlink" title="广播监听器2"></a>广播监听器2</h4><p>创建 <code>spring-rabbitmq-consumer\src\main\java\com\itheima\rabbitmq\listener\FanoutListener2.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Message;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.MessageListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FanoutListener2</span> <span class="keyword">implements</span> <span class="title">MessageListener</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(Message message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String msg = <span class="keyword">new</span> String(message.getBody(), <span class="string">"utf-8"</span>);</span><br><span class="line"></span><br><span class="line">            System.out.printf(<span class="string">"广播监听器2：接收路由名称为：%s，路由键为：%s，队列名为：%s的消息：%s \n"</span>,</span><br><span class="line">                    message.getMessageProperties().getReceivedExchange(),</span><br><span class="line">                    message.getMessageProperties().getReceivedRoutingKey(),</span><br><span class="line">                    message.getMessageProperties().getConsumerQueue(),</span><br><span class="line">                    msg);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="星号通配符监听器"><a href="#星号通配符监听器" class="headerlink" title="星号通配符监听器"></a>星号通配符监听器</h4><p>创建 <code>spring-rabbitmq-consumer\src\main\java\com\itheima\rabbitmq\listener\TopicListenerStar.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Message;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.MessageListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TopicListenerStar</span> <span class="keyword">implements</span> <span class="title">MessageListener</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(Message message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String msg = <span class="keyword">new</span> String(message.getBody(), <span class="string">"utf-8"</span>);</span><br><span class="line"></span><br><span class="line">            System.out.printf(<span class="string">"通配符*监听器：接收路由名称为：%s，路由键为：%s，队列名为：%s的消息：%s \n"</span>,</span><br><span class="line">                    message.getMessageProperties().getReceivedExchange(),</span><br><span class="line">                    message.getMessageProperties().getReceivedRoutingKey(),</span><br><span class="line">                    message.getMessageProperties().getConsumerQueue(),</span><br><span class="line">                    msg);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="井号通配符监听器"><a href="#井号通配符监听器" class="headerlink" title="井号通配符监听器"></a>井号通配符监听器</h4><p>创建 <code>spring-rabbitmq-consumer\src\main\java\com\itheima\rabbitmq\listener\TopicListenerWell.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Message;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.MessageListener;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TopicListenerWell</span> <span class="keyword">implements</span> <span class="title">MessageListener</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(Message message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String msg = <span class="keyword">new</span> String(message.getBody(), <span class="string">"utf-8"</span>);</span><br><span class="line"></span><br><span class="line">            System.out.printf(<span class="string">"通配符#监听器：接收路由名称为：%s，路由键为：%s，队列名为：%s的消息：%s \n"</span>,</span><br><span class="line">                    message.getMessageProperties().getReceivedExchange(),</span><br><span class="line">                    message.getMessageProperties().getReceivedRoutingKey(),</span><br><span class="line">                    message.getMessageProperties().getConsumerQueue(),</span><br><span class="line">                    msg);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="井号通配符监听器2"><a href="#井号通配符监听器2" class="headerlink" title="井号通配符监听器2"></a>井号通配符监听器2</h4><p>创建 <code>spring-rabbitmq-consumer\src\main\java\com\itheima\rabbitmq\listener\TopicListenerWell2.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Message;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.MessageListener;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TopicListenerWell2</span> <span class="keyword">implements</span> <span class="title">MessageListener</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(Message message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String msg = <span class="keyword">new</span> String(message.getBody(), <span class="string">"utf-8"</span>);</span><br><span class="line"></span><br><span class="line">            System.out.printf(<span class="string">"通配符#监听器2：接收路由名称为：%s，路由键为：%s，队列名为：%s的消息：%s \n"</span>,</span><br><span class="line">                    message.getMessageProperties().getReceivedExchange(),</span><br><span class="line">                    message.getMessageProperties().getReceivedRoutingKey(),</span><br><span class="line">                    message.getMessageProperties().getConsumerQueue(),</span><br><span class="line">                    msg);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-5-测试"><a href="#2-5-测试" class="headerlink" title="2.5 测试"></a>2.5 测试</h3><p>启动测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.ContextConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">ContextConfiguration</span>(<span class="title">locations</span> </span>= <span class="string">"classpath:spring-rabbitmq-consumer.xml"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="assets/image-20201215122711842.png" alt="image-20201215122711842"></p><h1 id="☆"><a href="#☆" class="headerlink" title="☆"></a>☆</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>rabbitmq笔记/6.RabbitMQ工作模式</title>
    <link href="http://www.itbuild.cn/2020/12/19/rabbitmq%E7%AC%94%E8%AE%B0/6.RabbitMQ%E5%B7%A5%E4%BD%9C%E6%A8%A1%E5%BC%8F/"/>
    <id>http://www.itbuild.cn/2020/12/19/rabbitmq%E7%AC%94%E8%AE%B0/6.RabbitMQ%E5%B7%A5%E4%BD%9C%E6%A8%A1%E5%BC%8F/</id>
    <published>2020-12-18T16:05:36.971Z</published>
    <updated>2020-12-14T16:07:18.209Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>[toc]</p><h1 id="RabbitMQ工作模式"><a href="#RabbitMQ工作模式" class="headerlink" title="RabbitMQ工作模式"></a>RabbitMQ工作模式</h1><p>官网对应模式介绍：<a href="https://www.rabbitmq.com/getstarted.html" target="_blank" rel="noopener">https://www.rabbitmq.com/getstarted.html</a></p><p><img src="assets/1555988678324-1607960269112.png" alt="1555988678324"></p><h2 id="1-Work-queues工作队列模式"><a href="#1-Work-queues工作队列模式" class="headerlink" title="1. Work queues工作队列模式"></a>1. Work queues工作队列模式</h2><h3 id="1-1-模式说明"><a href="#1-1-模式说明" class="headerlink" title="1.1 模式说明"></a>1.1 模式说明</h3><p><img src="assets/1556009144848.png" alt="1556009144848"></p><p><code>Work Queues</code>与入门程序的<code>简单模式</code>相比，多了一个或一些消费端，多个消费端共同消费同一个队列中的消息。</p><p><code>应用场景</code>：对于 任务过重或任务较多情况使用工作队列可以提高任务处理的速度。</p><h3 id="1-2-代码"><a href="#1-2-代码" class="headerlink" title="1.2 代码"></a>1.2 代码</h3><p><code>Work Queues</code>与入门程序的<code>简单模式</code>的代码是几乎一样的；可以完全复制，并复制多一个消费者进行多个消费者同时消费消息的测试。</p><h4 id="生产者"><a href="#生产者" class="headerlink" title="生产者"></a>生产者</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.producer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.ConnectionFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 发送消息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Producer_WorkQueues</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.创建连接工厂</span></span><br><span class="line">        ConnectionFactory factory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        <span class="comment">//2. 设置参数</span></span><br><span class="line">        factory.setHost(<span class="string">"106.15.72.229"</span>);<span class="comment">//ip  默认值 localhost</span></span><br><span class="line">        factory.setPort(<span class="number">5672</span>); <span class="comment">//端口  默认值 5672</span></span><br><span class="line">        factory.setVirtualHost(<span class="string">"/itcast"</span>);<span class="comment">//虚拟机 默认值/</span></span><br><span class="line">        factory.setUsername(<span class="string">"heima"</span>);<span class="comment">//用户名 默认 guest</span></span><br><span class="line">        factory.setPassword(<span class="string">"heima"</span>);<span class="comment">//密码 默认值 guest</span></span><br><span class="line">        <span class="comment">//3. 创建连接 Connection</span></span><br><span class="line">        Connection connection = factory.newConnection();</span><br><span class="line">        <span class="comment">//4. 创建Channel</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5. 创建队列Queue</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        queueDeclare(String queue, boolean durable, boolean exclusive, boolean autoDelete, Map&lt;String, Object&gt; arguments)</span></span><br><span class="line"><span class="comment">        参数：</span></span><br><span class="line"><span class="comment">            1. queue：队列名称</span></span><br><span class="line"><span class="comment">            2. durable:是否持久化，当mq重启之后，还在</span></span><br><span class="line"><span class="comment">            3. exclusive：</span></span><br><span class="line"><span class="comment">                * 是否独占。只能有一个消费者监听这队列</span></span><br><span class="line"><span class="comment">                * 当Connection关闭时，是否删除队列</span></span><br><span class="line"><span class="comment">                *</span></span><br><span class="line"><span class="comment">            4. autoDelete:是否自动删除。当没有Consumer时，自动删除掉</span></span><br><span class="line"><span class="comment">            5. arguments：参数。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//如果没有一个名字叫hello_world的队列，则会创建该队列，如果有则不会创建</span></span><br><span class="line">        channel.queueDeclare(<span class="string">"work_queues"</span>, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        basicPublish(String exchange, String routingKey, BasicProperties props, byte[] body)</span></span><br><span class="line"><span class="comment">        参数：</span></span><br><span class="line"><span class="comment">            1. exchange：交换机名称。简单模式下交换机会使用默认的 ""</span></span><br><span class="line"><span class="comment">            2. routingKey：路由名称</span></span><br><span class="line"><span class="comment">            3. props：配置信息</span></span><br><span class="line"><span class="comment">            4. body：发送消息数据</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">            String body = i + <span class="string">"hello rabbitmq~~~"</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//6. 发送消息</span></span><br><span class="line">            channel.basicPublish(<span class="string">""</span>, <span class="string">"work_queues"</span>, <span class="keyword">null</span>, body.getBytes());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//7.释放资源</span></span><br><span class="line">        channel.close();</span><br><span class="line">        connection.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="assets/image-20201214233115280.png" alt="image-20201214233115280"></p><h4 id="消费者1"><a href="#消费者1" class="headerlink" title="消费者1"></a>消费者1</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.consumer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer_WorkQueues1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.创建连接工厂</span></span><br><span class="line">        ConnectionFactory factory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        <span class="comment">//2. 设置参数</span></span><br><span class="line">        factory.setHost(<span class="string">"106.15.72.229"</span>);<span class="comment">//ip  默认值 localhost</span></span><br><span class="line">        factory.setPort(<span class="number">5672</span>); <span class="comment">//端口  默认值 5672</span></span><br><span class="line">        factory.setVirtualHost(<span class="string">"/itcast"</span>);<span class="comment">//虚拟机 默认值/</span></span><br><span class="line">        factory.setUsername(<span class="string">"heima"</span>);<span class="comment">//用户名 默认 guest</span></span><br><span class="line">        factory.setPassword(<span class="string">"heima"</span>);<span class="comment">//密码 默认值 guest</span></span><br><span class="line">        <span class="comment">//3. 创建连接 Connection</span></span><br><span class="line">        Connection connection = factory.newConnection();</span><br><span class="line">        <span class="comment">//4. 创建Channel</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        <span class="comment">//5. 创建队列Queue</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        queueDeclare(String queue, boolean durable, boolean exclusive, boolean autoDelete, Map&lt;String, Object&gt; arguments)</span></span><br><span class="line"><span class="comment">        参数：</span></span><br><span class="line"><span class="comment">            1. queue：队列名称</span></span><br><span class="line"><span class="comment">            2. durable:是否持久化，当mq重启之后，还在</span></span><br><span class="line"><span class="comment">            3. exclusive：</span></span><br><span class="line"><span class="comment">                * 是否独占。只能有一个消费者监听这队列</span></span><br><span class="line"><span class="comment">                * 当Connection关闭时，是否删除队列</span></span><br><span class="line"><span class="comment">                *</span></span><br><span class="line"><span class="comment">            4. autoDelete:是否自动删除。当没有Consumer时，自动删除掉</span></span><br><span class="line"><span class="comment">            5. arguments：参数。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//如果没有一个名字叫hello_world的队列，则会创建该队列，如果有则不会创建</span></span><br><span class="line">        channel.queueDeclare(<span class="string">"work_queues"</span>,<span class="keyword">true</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        basicConsume(String queue, boolean autoAck, Consumer callback)</span></span><br><span class="line"><span class="comment">        参数：</span></span><br><span class="line"><span class="comment">            1. queue：队列名称</span></span><br><span class="line"><span class="comment">            2. autoAck：是否自动确认</span></span><br><span class="line"><span class="comment">            3. callback：回调对象</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">// 接收消息</span></span><br><span class="line">        Consumer consumer = <span class="keyword">new</span> DefaultConsumer(channel)&#123;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">                回调方法，当收到消息后，会自动执行该方法</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                1. consumerTag：标识</span></span><br><span class="line"><span class="comment">                2. envelope：获取一些信息，交换机，路由key...</span></span><br><span class="line"><span class="comment">                3. properties:配置信息</span></span><br><span class="line"><span class="comment">                4. body：数据</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">              <span class="comment">/*  System.out.println("consumerTag："+consumerTag);</span></span><br><span class="line"><span class="comment">                System.out.println("Exchange："+envelope.getExchange());</span></span><br><span class="line"><span class="comment">                System.out.println("RoutingKey："+envelope.getRoutingKey());</span></span><br><span class="line"><span class="comment">                System.out.println("properties："+properties);*/</span></span><br><span class="line">                System.out.println(<span class="string">"body："</span>+<span class="keyword">new</span> String(body));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        channel.basicConsume(<span class="string">"work_queues"</span>,<span class="keyword">true</span>,consumer);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭资源？不要</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="消费者2"><a href="#消费者2" class="headerlink" title="消费者2"></a>消费者2</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.consumer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer_WorkQueues2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.创建连接工厂</span></span><br><span class="line">        ConnectionFactory factory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        <span class="comment">//2. 设置参数</span></span><br><span class="line">        factory.setHost(<span class="string">"106.15.72.229"</span>);<span class="comment">//ip  默认值 localhost</span></span><br><span class="line">        factory.setPort(<span class="number">5672</span>); <span class="comment">//端口  默认值 5672</span></span><br><span class="line">        factory.setVirtualHost(<span class="string">"/itcast"</span>);<span class="comment">//虚拟机 默认值/</span></span><br><span class="line">        factory.setUsername(<span class="string">"heima"</span>);<span class="comment">//用户名 默认 guest</span></span><br><span class="line">        factory.setPassword(<span class="string">"heima"</span>);<span class="comment">//密码 默认值 guest</span></span><br><span class="line">        <span class="comment">//3. 创建连接 Connection</span></span><br><span class="line">        Connection connection = factory.newConnection();</span><br><span class="line">        <span class="comment">//4. 创建Channel</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        <span class="comment">//5. 创建队列Queue</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        queueDeclare(String queue, boolean durable, boolean exclusive, boolean autoDelete, Map&lt;String, Object&gt; arguments)</span></span><br><span class="line"><span class="comment">        参数：</span></span><br><span class="line"><span class="comment">            1. queue：队列名称</span></span><br><span class="line"><span class="comment">            2. durable:是否持久化，当mq重启之后，还在</span></span><br><span class="line"><span class="comment">            3. exclusive：</span></span><br><span class="line"><span class="comment">                * 是否独占。只能有一个消费者监听这队列</span></span><br><span class="line"><span class="comment">                * 当Connection关闭时，是否删除队列</span></span><br><span class="line"><span class="comment">                *</span></span><br><span class="line"><span class="comment">            4. autoDelete:是否自动删除。当没有Consumer时，自动删除掉</span></span><br><span class="line"><span class="comment">            5. arguments：参数。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//如果没有一个名字叫hello_world的队列，则会创建该队列，如果有则不会创建</span></span><br><span class="line">        channel.queueDeclare(<span class="string">"work_queues"</span>, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        basicConsume(String queue, boolean autoAck, Consumer callback)</span></span><br><span class="line"><span class="comment">        参数：</span></span><br><span class="line"><span class="comment">            1. queue：队列名称</span></span><br><span class="line"><span class="comment">            2. autoAck：是否自动确认</span></span><br><span class="line"><span class="comment">            3. callback：回调对象</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">// 接收消息</span></span><br><span class="line">        Consumer consumer = <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">                回调方法，当收到消息后，会自动执行该方法</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                1. consumerTag：标识</span></span><br><span class="line"><span class="comment">                2. envelope：获取一些信息，交换机，路由key...</span></span><br><span class="line"><span class="comment">                3. properties:配置信息</span></span><br><span class="line"><span class="comment">                4. body：数据</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">              <span class="comment">/*  System.out.println("consumerTag："+consumerTag);</span></span><br><span class="line"><span class="comment">                System.out.println("Exchange："+envelope.getExchange());</span></span><br><span class="line"><span class="comment">                System.out.println("RoutingKey："+envelope.getRoutingKey());</span></span><br><span class="line"><span class="comment">                System.out.println("properties："+properties);*/</span></span><br><span class="line">                System.out.println(<span class="string">"body："</span> + <span class="keyword">new</span> String(body));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        channel.basicConsume(<span class="string">"work_queues"</span>, <span class="keyword">true</span>, consumer);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭资源？不要</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-3-测试"><a href="#1-3-测试" class="headerlink" title="1.3 测试"></a>1.3 测试</h3><p>启动两个消费者，然后再启动生产者发送消息；到IDEA的两个消费者对应的控制台查看是否竞争性的接收到消息。</p><p><img src="assets/image-20201214233458985.png" alt="image-20201214233458985"></p><p><img src="assets/image-20201214233412557.png" alt="image-20201214233412557"></p><h3 id="1-4-小结"><a href="#1-4-小结" class="headerlink" title="1.4 小结"></a>1.4 小结</h3><p>在一个队列中如果有多个消费者，那么消费者之间对于同一个消息的关系是<code>竞争</code>的关系。</p><h2 id="2-订阅模式类型☆"><a href="#2-订阅模式类型☆" class="headerlink" title="2. 订阅模式类型☆"></a>2. 订阅模式类型☆</h2><p>订阅模式示例图：</p><p><img src="assets/1556014499573.png" alt="1556014499573"></p><p>前面2个案例中，只有3个角色：</p><ul><li>P：生产者，也就是要发送消息的程序</li><li>C：消费者：消息的接受者，会一直等待消息到来。</li><li>queue：消息队列，图中红色部分</li></ul><p>而在订阅模型中，多了一个exchange角色，而且过程略有变化：</p><ul><li>P：生产者，也就是要发送消息的程序，但是不再发送到队列中，而是发给X（交换机）</li><li>C：消费者，消息的接受者，会一直等待消息到来。</li><li>Queue：消息队列，接收消息、缓存消息。</li><li>Exchange：交换机，图中的X。一方面，接收生产者发送的消息。另一方面，知道如何处理消息，例如递交给某个特别队列、递交给所有队列、或是将消息丢弃。到底如何操作，取决于Exchange的类型。Exchange有常见以下3种类型：<ul><li>Fanout：广播，将消息交给所有绑定到交换机的队列</li><li>Direct：定向，把消息交给符合指定routing key 的队列</li><li>Topic：通配符，把消息交给符合routing pattern（路由模式） 的队列</li></ul></li></ul><p><code>Exchange（交换机）只负责转发消息，不具备存储消息的能力</code>，因此如果没有任何队列与Exchange绑定，或者没有符合路由规则的队列，那么消息会丢失！</p><h2 id="3-Publish-Subscribe发布与订阅模式"><a href="#3-Publish-Subscribe发布与订阅模式" class="headerlink" title="3. Publish/Subscribe发布与订阅模式"></a>3. Publish/Subscribe发布与订阅模式</h2><h3 id="3-1-模式说明"><a href="#3-1-模式说明" class="headerlink" title="3.1 模式说明"></a>3.1 模式说明</h3><p><img src="assets/1556010329032.png" alt="1556010329032"></p><p>发布订阅模式：<br>1、每个消费者监听自己的队列。<br>2、生产者将消息发给broker，由交换机将消息转发到绑定此交换机的每个队列，每个绑定交换机的队列都将接收<br>到消息。</p><h3 id="3-2-代码"><a href="#3-2-代码" class="headerlink" title="3.2. 代码"></a>3.2. 代码</h3><h4 id="生产者-1"><a href="#生产者-1" class="headerlink" title="生产者"></a>生产者</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.producer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.BuiltinExchangeType;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.ConnectionFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 发送消息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Producer_PubSub</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.创建连接工厂</span></span><br><span class="line">        ConnectionFactory factory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        <span class="comment">//2. 设置参数</span></span><br><span class="line">        factory.setHost(<span class="string">"106.15.72.229"</span>);<span class="comment">//ip  默认值 localhost</span></span><br><span class="line">        factory.setPort(<span class="number">5672</span>); <span class="comment">//端口  默认值 5672</span></span><br><span class="line">        factory.setVirtualHost(<span class="string">"/itcast"</span>);<span class="comment">//虚拟机 默认值/</span></span><br><span class="line">        factory.setUsername(<span class="string">"heima"</span>);<span class="comment">//用户名 默认 guest</span></span><br><span class="line">        factory.setPassword(<span class="string">"heima"</span>);<span class="comment">//密码 默认值 guest</span></span><br><span class="line">        <span class="comment">//3. 创建连接 Connection</span></span><br><span class="line">        Connection connection = factory.newConnection();</span><br><span class="line">        <span class="comment">//4. 创建Channel</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">       <span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">       exchangeDeclare(String exchange, BuiltinExchangeType type, boolean durable, boolean autoDelete, boolean internal, Map&lt;String, Object&gt; arguments)</span></span><br><span class="line"><span class="comment">       参数：</span></span><br><span class="line"><span class="comment">        1. exchange:交换机名称</span></span><br><span class="line"><span class="comment">        2. type:交换机类型</span></span><br><span class="line"><span class="comment">            DIRECT("direct"),：定向</span></span><br><span class="line"><span class="comment">            FANOUT("fanout"),：扇形（广播），发送消息到每一个与之绑定队列。</span></span><br><span class="line"><span class="comment">            TOPIC("topic"),通配符的方式</span></span><br><span class="line"><span class="comment">            HEADERS("headers");参数匹配</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        3. durable:是否持久化</span></span><br><span class="line"><span class="comment">        4. autoDelete:自动删除</span></span><br><span class="line"><span class="comment">        5. internal：内部使用。 一般false</span></span><br><span class="line"><span class="comment">        6. arguments：参数</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">        String exchangeName = <span class="string">"test_fanout"</span>;</span><br><span class="line">        <span class="comment">//5. 创建交换机</span></span><br><span class="line">        channel.exchangeDeclare(exchangeName, BuiltinExchangeType.FANOUT, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">//6. 创建队列</span></span><br><span class="line">        String queue1Name = <span class="string">"test_fanout_queue1"</span>;</span><br><span class="line">        String queue2Name = <span class="string">"test_fanout_queue2"</span>;</span><br><span class="line">        channel.queueDeclare(queue1Name, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">        channel.queueDeclare(queue2Name, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">//7. 绑定队列和交换机</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        queueBind(String queue, String exchange, String routingKey)</span></span><br><span class="line"><span class="comment">        参数：</span></span><br><span class="line"><span class="comment">            1. queue：队列名称</span></span><br><span class="line"><span class="comment">            2. exchange：交换机名称</span></span><br><span class="line"><span class="comment">            3. routingKey：路由键，绑定规则</span></span><br><span class="line"><span class="comment">                如果交换机的类型为fanout ，routingKey设置为""</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.queueBind(queue1Name, exchangeName, <span class="string">""</span>);</span><br><span class="line">        channel.queueBind(queue2Name, exchangeName, <span class="string">""</span>);</span><br><span class="line"></span><br><span class="line">        String body = <span class="string">"日志信息：张三调用了findAll方法...日志级别：info..."</span>;</span><br><span class="line">        <span class="comment">//8. 发送消息</span></span><br><span class="line">        channel.basicPublish(exchangeName, <span class="string">""</span>, <span class="keyword">null</span>, body.getBytes());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//9. 释放资源</span></span><br><span class="line">        channel.close();</span><br><span class="line">        connection.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="消费者1-1"><a href="#消费者1-1" class="headerlink" title="消费者1"></a>消费者1</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.consumer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer_PubSub1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.创建连接工厂</span></span><br><span class="line">        ConnectionFactory factory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        <span class="comment">//2. 设置参数</span></span><br><span class="line">        factory.setHost(<span class="string">"106.15.72.229"</span>);<span class="comment">//ip  默认值 localhost</span></span><br><span class="line">        factory.setPort(<span class="number">5672</span>); <span class="comment">//端口  默认值 5672</span></span><br><span class="line">        factory.setVirtualHost(<span class="string">"/itcast"</span>);<span class="comment">//虚拟机 默认值/</span></span><br><span class="line">        factory.setUsername(<span class="string">"heima"</span>);<span class="comment">//用户名 默认 guest</span></span><br><span class="line">        factory.setPassword(<span class="string">"heima"</span>);<span class="comment">//密码 默认值 guest</span></span><br><span class="line">        <span class="comment">//3. 创建连接 Connection</span></span><br><span class="line">        Connection connection = factory.newConnection();</span><br><span class="line">        <span class="comment">//4. 创建Channel</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        String queue1Name = <span class="string">"test_fanout_queue1"</span>;</span><br><span class="line">        String queue2Name = <span class="string">"test_fanout_queue2"</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        basicConsume(String queue, boolean autoAck, Consumer callback)</span></span><br><span class="line"><span class="comment">        参数：</span></span><br><span class="line"><span class="comment">            1. queue：队列名称</span></span><br><span class="line"><span class="comment">            2. autoAck：是否自动确认</span></span><br><span class="line"><span class="comment">            3. callback：回调对象</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">// 接收消息</span></span><br><span class="line">        Consumer consumer = <span class="keyword">new</span> DefaultConsumer(channel)&#123;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">                回调方法，当收到消息后，会自动执行该方法</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                1. consumerTag：标识</span></span><br><span class="line"><span class="comment">                2. envelope：获取一些信息，交换机，路由key...</span></span><br><span class="line"><span class="comment">                3. properties:配置信息</span></span><br><span class="line"><span class="comment">                4. body：数据</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">              <span class="comment">/*  System.out.println("consumerTag："+consumerTag);</span></span><br><span class="line"><span class="comment">                System.out.println("Exchange："+envelope.getExchange());</span></span><br><span class="line"><span class="comment">                System.out.println("RoutingKey："+envelope.getRoutingKey());</span></span><br><span class="line"><span class="comment">                System.out.println("properties："+properties);*/</span></span><br><span class="line">                System.out.println(<span class="string">"body："</span>+<span class="keyword">new</span> String(body));</span><br><span class="line">                System.out.println(<span class="string">"将日志信息打印到控制台....."</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        channel.basicConsume(queue1Name,<span class="keyword">true</span>,consumer);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭资源？不要</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="消费者2-1"><a href="#消费者2-1" class="headerlink" title="消费者2"></a>消费者2</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.consumer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer_PubSub2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.创建连接工厂</span></span><br><span class="line">        ConnectionFactory factory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        <span class="comment">//2. 设置参数</span></span><br><span class="line">        factory.setHost(<span class="string">"106.15.72.229"</span>);<span class="comment">//ip  默认值 localhost</span></span><br><span class="line">        factory.setPort(<span class="number">5672</span>); <span class="comment">//端口  默认值 5672</span></span><br><span class="line">        factory.setVirtualHost(<span class="string">"/itcast"</span>);<span class="comment">//虚拟机 默认值/</span></span><br><span class="line">        factory.setUsername(<span class="string">"heima"</span>);<span class="comment">//用户名 默认 guest</span></span><br><span class="line">        factory.setPassword(<span class="string">"heima"</span>);<span class="comment">//密码 默认值 guest</span></span><br><span class="line">        <span class="comment">//3. 创建连接 Connection</span></span><br><span class="line">        Connection connection = factory.newConnection();</span><br><span class="line">        <span class="comment">//4. 创建Channel</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        String queue1Name = <span class="string">"test_fanout_queue1"</span>;</span><br><span class="line">        String queue2Name = <span class="string">"test_fanout_queue2"</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        basicConsume(String queue, boolean autoAck, Consumer callback)</span></span><br><span class="line"><span class="comment">        参数：</span></span><br><span class="line"><span class="comment">            1. queue：队列名称</span></span><br><span class="line"><span class="comment">            2. autoAck：是否自动确认</span></span><br><span class="line"><span class="comment">            3. callback：回调对象</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">// 接收消息</span></span><br><span class="line">        Consumer consumer = <span class="keyword">new</span> DefaultConsumer(channel)&#123;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">                回调方法，当收到消息后，会自动执行该方法</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                1. consumerTag：标识</span></span><br><span class="line"><span class="comment">                2. envelope：获取一些信息，交换机，路由key...</span></span><br><span class="line"><span class="comment">                3. properties:配置信息</span></span><br><span class="line"><span class="comment">                4. body：数据</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">              <span class="comment">/*  System.out.println("consumerTag："+consumerTag);</span></span><br><span class="line"><span class="comment">                System.out.println("Exchange："+envelope.getExchange());</span></span><br><span class="line"><span class="comment">                System.out.println("RoutingKey："+envelope.getRoutingKey());</span></span><br><span class="line"><span class="comment">                System.out.println("properties："+properties);*/</span></span><br><span class="line">                System.out.println(<span class="string">"body："</span>+<span class="keyword">new</span> String(body));</span><br><span class="line">                System.out.println(<span class="string">"将日志信息保存数据库....."</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        channel.basicConsume(queue2Name,<span class="keyword">true</span>,consumer);</span><br><span class="line">        <span class="comment">//关闭资源？不要</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-测试"><a href="#3-3-测试" class="headerlink" title="3.3 测试"></a>3.3 测试</h3><p><img src="assets/image-20201214235015805.png" alt="image-20201214235015805"></p><p>启动所有消费者，然后使用生产者发送消息；在每个消费者对应的控制台可以查看到生产者发送的所有消息；到达<code>广播</code>的效果。</p><p><img src="assets/image-20201214234959997.png" alt="image-20201214234959997"></p><p>在执行完测试代码后，其实到RabbitMQ的管理后台找到<code>Exchanges</code>选项卡，点击 <code>fanout_exchange</code> 的交换机，可以查看到如下的绑定：</p><p><img src="assets/image-20201214234927452.png" alt="image-20201214234927452"></p><h3 id="3-4-小结"><a href="#3-4-小结" class="headerlink" title="3.4 小结"></a>3.4 小结</h3><p>交换机需要与队列进行绑定，绑定之后；一个消息可以被多个消费者都收到。</p><p><code>发布订阅模式与工作队列模式的区别</code></p><p>1、工作队列模式不用定义交换机，而发布/订阅模式需要定义交换机。 </p><p>2、发布/订阅模式的生产方是面向交换机发送消息，工作队列模式的生产方是面向队列发送消息(底层使用默认交换机)。</p><p>3、发布/订阅模式需要设置队列和交换机的绑定，工作队列模式不需要设置，实际上工作队列模式会将队列绑 定到默认的交换机 。</p><h2 id="4-Routing路由模式"><a href="#4-Routing路由模式" class="headerlink" title="4. Routing路由模式"></a>4. Routing路由模式</h2><h3 id="4-1-模式说明"><a href="#4-1-模式说明" class="headerlink" title="4.1 模式说明"></a>4.1 模式说明</h3><p>路由模式特点：</p><ul><li>队列与交换机的绑定，不能是任意绑定了，而是要指定一个<code>RoutingKey</code>（路由key）</li><li>消息的发送方在 向Exchange发送消息时，也必须指定消息的 <code>RoutingKey</code>。</li><li>Exchange不再把消息交给每一个绑定的队列，而是根据消息的<code>Routing Key</code>进行判断，只有队列的<code>Routingkey</code>与消息的 <code>Routing key</code>完全一致，才会接收到消息</li></ul><p><img src="assets/1556029284397.png" alt="1556029284397"></p><p>图解：</p><ul><li>P：生产者，向Exchange发送消息，发送消息时，会指定一个routing key。</li><li>X：Exchange（交换机），接收生产者的消息，然后把消息递交给 与routing key完全匹配的队列</li><li>C1：消费者，其所在队列指定了需要routing key 为 error 的消息</li><li>C2：消费者，其所在队列指定了需要routing key 为 info、error、warning 的消息</li></ul><h3 id="4-2-代码"><a href="#4-2-代码" class="headerlink" title="4.2 代码"></a>4.2 代码</h3><p>在编码上与 <code>Publish/Subscribe发布与订阅模式</code> 的区别是交换机的类型为：Direct，还有队列绑定交换机的时候需要指定routing key。</p><h4 id="生产者-2"><a href="#生产者-2" class="headerlink" title="生产者"></a>生产者</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.producer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.BuiltinExchangeType;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.ConnectionFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 发送消息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Producer_Routing</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.创建连接工厂</span></span><br><span class="line">        ConnectionFactory factory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        <span class="comment">//2. 设置参数</span></span><br><span class="line">        factory.setHost(<span class="string">"106.15.72.229"</span>);<span class="comment">//ip  默认值 localhost</span></span><br><span class="line">        factory.setPort(<span class="number">5672</span>); <span class="comment">//端口  默认值 5672</span></span><br><span class="line">        factory.setVirtualHost(<span class="string">"/itcast"</span>);<span class="comment">//虚拟机 默认值/</span></span><br><span class="line">        factory.setUsername(<span class="string">"heima"</span>);<span class="comment">//用户名 默认 guest</span></span><br><span class="line">        factory.setPassword(<span class="string">"heima"</span>);<span class="comment">//密码 默认值 guest</span></span><br><span class="line">        <span class="comment">//3. 创建连接 Connection</span></span><br><span class="line">        Connection connection = factory.newConnection();</span><br><span class="line">        <span class="comment">//4. 创建Channel</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">       <span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">       exchangeDeclare(String exchange, BuiltinExchangeType type, boolean durable, boolean autoDelete, boolean internal, Map&lt;String, Object&gt; arguments)</span></span><br><span class="line"><span class="comment">       参数：</span></span><br><span class="line"><span class="comment">        1. exchange:交换机名称</span></span><br><span class="line"><span class="comment">        2. type:交换机类型</span></span><br><span class="line"><span class="comment">            DIRECT("direct"),：定向</span></span><br><span class="line"><span class="comment">            FANOUT("fanout"),：扇形（广播），发送消息到每一个与之绑定队列。</span></span><br><span class="line"><span class="comment">            TOPIC("topic"),通配符的方式</span></span><br><span class="line"><span class="comment">            HEADERS("headers");参数匹配</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        3. durable:是否持久化</span></span><br><span class="line"><span class="comment">        4. autoDelete:自动删除</span></span><br><span class="line"><span class="comment">        5. internal：内部使用。 一般false</span></span><br><span class="line"><span class="comment">        6. arguments：参数</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">       String exchangeName = <span class="string">"test_direct"</span>;</span><br><span class="line">        <span class="comment">//5. 创建交换机</span></span><br><span class="line">        channel.exchangeDeclare(exchangeName, BuiltinExchangeType.DIRECT,<span class="keyword">true</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">//6. 创建队列</span></span><br><span class="line">        String queue1Name = <span class="string">"test_direct_queue1"</span>;</span><br><span class="line">        String queue2Name = <span class="string">"test_direct_queue2"</span>;</span><br><span class="line"></span><br><span class="line">        channel.queueDeclare(queue1Name,<span class="keyword">true</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">null</span>);</span><br><span class="line">        channel.queueDeclare(queue2Name,<span class="keyword">true</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">//7. 绑定队列和交换机</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        queueBind(String queue, String exchange, String routingKey)</span></span><br><span class="line"><span class="comment">        参数：</span></span><br><span class="line"><span class="comment">            1. queue：队列名称</span></span><br><span class="line"><span class="comment">            2. exchange：交换机名称</span></span><br><span class="line"><span class="comment">            3. routingKey：路由键，绑定规则</span></span><br><span class="line"><span class="comment">                如果交换机的类型为fanout ，routingKey设置为""</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//队列1绑定 error</span></span><br><span class="line">        channel.queueBind(queue1Name,exchangeName,<span class="string">"error"</span>);</span><br><span class="line">        <span class="comment">//队列2绑定 info  error  warning</span></span><br><span class="line">        channel.queueBind(queue2Name,exchangeName,<span class="string">"info"</span>);</span><br><span class="line">        channel.queueBind(queue2Name,exchangeName,<span class="string">"error"</span>);</span><br><span class="line">        channel.queueBind(queue2Name,exchangeName,<span class="string">"warning"</span>);</span><br><span class="line"></span><br><span class="line">        String body = <span class="string">"日志信息：张三调用了delete方法...出错误了。。。日志级别：error..."</span>;</span><br><span class="line">        <span class="comment">//8. 发送消息</span></span><br><span class="line">        channel.basicPublish(exchangeName,<span class="string">"warning"</span>,<span class="keyword">null</span>,body.getBytes());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//9. 释放资源</span></span><br><span class="line">        channel.close();</span><br><span class="line">        connection.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="assets/image-20201214235530308.png" alt="image-20201214235530308"></p><h4 id="消费者1-2"><a href="#消费者1-2" class="headerlink" title="消费者1"></a>消费者1</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.consumer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer_Routing1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.创建连接工厂</span></span><br><span class="line">        ConnectionFactory factory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        <span class="comment">//2. 设置参数</span></span><br><span class="line">        factory.setHost(<span class="string">"106.15.72.229"</span>);<span class="comment">//ip  默认值 localhost</span></span><br><span class="line">        factory.setPort(<span class="number">5672</span>); <span class="comment">//端口  默认值 5672</span></span><br><span class="line">        factory.setVirtualHost(<span class="string">"/itcast"</span>);<span class="comment">//虚拟机 默认值/</span></span><br><span class="line">        factory.setUsername(<span class="string">"heima"</span>);<span class="comment">//用户名 默认 guest</span></span><br><span class="line">        factory.setPassword(<span class="string">"heima"</span>);<span class="comment">//密码 默认值 guest</span></span><br><span class="line">        <span class="comment">//3. 创建连接 Connection</span></span><br><span class="line">        Connection connection = factory.newConnection();</span><br><span class="line">        <span class="comment">//4. 创建Channel</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        String queue1Name = <span class="string">"test_direct_queue1"</span>;</span><br><span class="line">        String queue2Name = <span class="string">"test_direct_queue2"</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        basicConsume(String queue, boolean autoAck, Consumer callback)</span></span><br><span class="line"><span class="comment">        参数：</span></span><br><span class="line"><span class="comment">            1. queue：队列名称</span></span><br><span class="line"><span class="comment">            2. autoAck：是否自动确认</span></span><br><span class="line"><span class="comment">            3. callback：回调对象</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">// 接收消息</span></span><br><span class="line">        Consumer consumer = <span class="keyword">new</span> DefaultConsumer(channel)&#123;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">                回调方法，当收到消息后，会自动执行该方法</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                1. consumerTag：标识</span></span><br><span class="line"><span class="comment">                2. envelope：获取一些信息，交换机，路由key...</span></span><br><span class="line"><span class="comment">                3. properties:配置信息</span></span><br><span class="line"><span class="comment">                4. body：数据</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">              <span class="comment">/*  System.out.println("consumerTag："+consumerTag);</span></span><br><span class="line"><span class="comment">                System.out.println("Exchange："+envelope.getExchange());</span></span><br><span class="line"><span class="comment">                System.out.println("RoutingKey："+envelope.getRoutingKey());</span></span><br><span class="line"><span class="comment">                System.out.println("properties："+properties);*/</span></span><br><span class="line">                System.out.println(<span class="string">"body："</span>+<span class="keyword">new</span> String(body));</span><br><span class="line">                System.out.println(<span class="string">"将日志信息打印到控制台....."</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        channel.basicConsume(queue1Name,<span class="keyword">true</span>,consumer);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭资源？不要</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="消费者2-2"><a href="#消费者2-2" class="headerlink" title="消费者2"></a>消费者2</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.consumer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer_Routing2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.创建连接工厂</span></span><br><span class="line">        ConnectionFactory factory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        <span class="comment">//2. 设置参数</span></span><br><span class="line">        factory.setHost(<span class="string">"106.15.72.229"</span>);<span class="comment">//ip  默认值 localhost</span></span><br><span class="line">        factory.setPort(<span class="number">5672</span>); <span class="comment">//端口  默认值 5672</span></span><br><span class="line">        factory.setVirtualHost(<span class="string">"/itcast"</span>);<span class="comment">//虚拟机 默认值/</span></span><br><span class="line">        factory.setUsername(<span class="string">"heima"</span>);<span class="comment">//用户名 默认 guest</span></span><br><span class="line">        factory.setPassword(<span class="string">"heima"</span>);<span class="comment">//密码 默认值 guest</span></span><br><span class="line">        <span class="comment">//3. 创建连接 Connection</span></span><br><span class="line">        Connection connection = factory.newConnection();</span><br><span class="line">        <span class="comment">//4. 创建Channel</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        String queue1Name = <span class="string">"test_direct_queue1"</span>;</span><br><span class="line">        String queue2Name = <span class="string">"test_direct_queue2"</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        basicConsume(String queue, boolean autoAck, Consumer callback)</span></span><br><span class="line"><span class="comment">        参数：</span></span><br><span class="line"><span class="comment">            1. queue：队列名称</span></span><br><span class="line"><span class="comment">            2. autoAck：是否自动确认</span></span><br><span class="line"><span class="comment">            3. callback：回调对象</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">// 接收消息</span></span><br><span class="line">        Consumer consumer = <span class="keyword">new</span> DefaultConsumer(channel)&#123;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">                回调方法，当收到消息后，会自动执行该方法</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                1. consumerTag：标识</span></span><br><span class="line"><span class="comment">                2. envelope：获取一些信息，交换机，路由key...</span></span><br><span class="line"><span class="comment">                3. properties:配置信息</span></span><br><span class="line"><span class="comment">                4. body：数据</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">              <span class="comment">/*  System.out.println("consumerTag："+consumerTag);</span></span><br><span class="line"><span class="comment">                System.out.println("Exchange："+envelope.getExchange());</span></span><br><span class="line"><span class="comment">                System.out.println("RoutingKey："+envelope.getRoutingKey());</span></span><br><span class="line"><span class="comment">                System.out.println("properties："+properties);*/</span></span><br><span class="line">                System.out.println(<span class="string">"body："</span>+<span class="keyword">new</span> String(body));</span><br><span class="line">                System.out.println(<span class="string">"将日志信息存储到数据库....."</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        channel.basicConsume(queue2Name,<span class="keyword">true</span>,consumer);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭资源？不要</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-3-测试"><a href="#4-3-测试" class="headerlink" title="4.3 测试"></a>4.3 测试</h3><p>启动所有消费者，然后使用生产者发送消息；在消费者对应的控制台可以查看到生产者发送对应routing key对应队列的消息；到达<code>按照需要接收</code>的效果。</p><p>在执行完测试代码后，其实到RabbitMQ的管理后台找到<code>Exchanges</code>选项卡，点击 <code>direct_exchange</code> 的交换机，可以查看到如下的绑定：</p><p><img src="assets/image-20201214235922773.png" alt="image-20201214235922773"></p><h3 id="4-4-小结"><a href="#4-4-小结" class="headerlink" title="4.4 小结"></a>4.4 小结</h3><p>Routing模式要求队列在绑定交换机时要指定routing key，消息会转发到符合routing key的队列。</p><h2 id="5-Topics通配符模式"><a href="#5-Topics通配符模式" class="headerlink" title="5. Topics通配符模式"></a>5. Topics通配符模式</h2><h3 id="5-1-模式说明"><a href="#5-1-模式说明" class="headerlink" title="5.1. 模式说明"></a>5.1. 模式说明</h3><p><code>Topic</code>类型与<code>Direct</code>相比，都是可以根据<code>RoutingKey</code>把消息路由到不同的队列。只不过<code>Topic</code>类型<code>Exchange</code>可以让队列在绑定<code>Routing key</code> 的时候<code>使用通配符</code>！</p><p><code>Routingkey</code> 一般都是有一个或多个单词组成，多个单词之间以”.”分割，例如： <code>item.insert</code></p><p> 通配符规则：</p><p><code>#</code>：匹配一个或多个词</p><p><code>*</code>：匹配不多不少恰好1个词</p><p>举例：</p><p><code>item.#</code>：能够匹配<code>item.insert.abc</code> 或者 <code>item.insert</code></p><p><code>item.*</code>：只能匹配<code>item.insert</code></p><p><img src="assets/1556031362048.png" alt="1556031362048"></p><p><img src="assets/1556031519931.png" alt="1556031519931"></p><p>图解：</p><ul><li>红色Queue：绑定的是<code>usa.#</code> ，因此凡是以 <code>usa.</code>开头的<code>routing key</code> 都会被匹配到</li><li>黄色Queue：绑定的是<code>#.news</code> ，因此凡是以 <code>.news</code>结尾的 <code>routing key</code> 都会被匹配</li></ul><h3 id="5-2-代码"><a href="#5-2-代码" class="headerlink" title="5.2. 代码"></a>5.2. 代码</h3><h4 id="生产者-3"><a href="#生产者-3" class="headerlink" title="生产者"></a>生产者</h4><p>所有error级别的日志存入数据库，所有order系统的日志存入数据库</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.producer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.BuiltinExchangeType;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.ConnectionFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 发送消息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Producer_Topics</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.创建连接工厂</span></span><br><span class="line">        ConnectionFactory factory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        <span class="comment">//2. 设置参数</span></span><br><span class="line">        factory.setHost(<span class="string">"106.15.72.229"</span>);<span class="comment">//ip  默认值 localhost</span></span><br><span class="line">        factory.setPort(<span class="number">5672</span>); <span class="comment">//端口  默认值 5672</span></span><br><span class="line">        factory.setVirtualHost(<span class="string">"/itcast"</span>);<span class="comment">//虚拟机 默认值/</span></span><br><span class="line">        factory.setUsername(<span class="string">"heima"</span>);<span class="comment">//用户名 默认 guest</span></span><br><span class="line">        factory.setPassword(<span class="string">"heima"</span>);<span class="comment">//密码 默认值 guest</span></span><br><span class="line">        <span class="comment">//3. 创建连接 Connection</span></span><br><span class="line">        Connection connection = factory.newConnection();</span><br><span class="line">        <span class="comment">//4. 创建Channel</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">       <span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">       exchangeDeclare(String exchange, BuiltinExchangeType type, boolean durable, boolean autoDelete, boolean internal, Map&lt;String, Object&gt; arguments)</span></span><br><span class="line"><span class="comment">       参数：</span></span><br><span class="line"><span class="comment">        1. exchange:交换机名称</span></span><br><span class="line"><span class="comment">        2. type:交换机类型</span></span><br><span class="line"><span class="comment">            DIRECT("direct"),：定向</span></span><br><span class="line"><span class="comment">            FANOUT("fanout"),：扇形（广播），发送消息到每一个与之绑定队列。</span></span><br><span class="line"><span class="comment">            TOPIC("topic"),通配符的方式</span></span><br><span class="line"><span class="comment">            HEADERS("headers");参数匹配</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        3. durable:是否持久化</span></span><br><span class="line"><span class="comment">        4. autoDelete:自动删除</span></span><br><span class="line"><span class="comment">        5. internal：内部使用。 一般false</span></span><br><span class="line"><span class="comment">        6. arguments：参数</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">        String exchangeName = <span class="string">"test_topic"</span>;</span><br><span class="line">        <span class="comment">//5. 创建交换机</span></span><br><span class="line">        channel.exchangeDeclare(exchangeName, BuiltinExchangeType.TOPIC, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">//6. 创建队列</span></span><br><span class="line">        String queue1Name = <span class="string">"test_topic_queue1"</span>;</span><br><span class="line">        String queue2Name = <span class="string">"test_topic_queue2"</span>;</span><br><span class="line">        channel.queueDeclare(queue1Name, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">        channel.queueDeclare(queue2Name, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">//7. 绑定队列和交换机</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        queueBind(String queue, String exchange, String routingKey)</span></span><br><span class="line"><span class="comment">        参数：</span></span><br><span class="line"><span class="comment">            1. queue：队列名称</span></span><br><span class="line"><span class="comment">            2. exchange：交换机名称</span></span><br><span class="line"><span class="comment">            3. routingKey：路由键，绑定规则</span></span><br><span class="line"><span class="comment">                如果交换机的类型为fanout ，routingKey设置为""</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// routing key  系统的名称.日志的级别。</span></span><br><span class="line">        <span class="comment">//=需求： 所有error级别的日志存入数据库，所有order系统的日志存入数据库</span></span><br><span class="line">        channel.queueBind(queue1Name, exchangeName, <span class="string">"#.error"</span>);</span><br><span class="line">        channel.queueBind(queue1Name, exchangeName, <span class="string">"order.*"</span>);</span><br><span class="line">        channel.queueBind(queue2Name, exchangeName, <span class="string">"*.*"</span>);</span><br><span class="line"></span><br><span class="line">        String body = <span class="string">"日志信息：张三调用了findAll方法...日志级别：info..."</span>;</span><br><span class="line">        <span class="comment">//8. 发送消息</span></span><br><span class="line">        channel.basicPublish(exchangeName, <span class="string">"goods.error"</span>, <span class="keyword">null</span>, body.getBytes());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//9. 释放资源</span></span><br><span class="line">        channel.close();</span><br><span class="line">        connection.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="消费者1-3"><a href="#消费者1-3" class="headerlink" title="消费者1"></a>消费者1</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.consumer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer_Topic1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.创建连接工厂</span></span><br><span class="line">        ConnectionFactory factory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        <span class="comment">//2. 设置参数</span></span><br><span class="line">        factory.setHost(<span class="string">"106.15.72.229"</span>);<span class="comment">//ip  默认值 localhost</span></span><br><span class="line">        factory.setPort(<span class="number">5672</span>); <span class="comment">//端口  默认值 5672</span></span><br><span class="line">        factory.setVirtualHost(<span class="string">"/itcast"</span>);<span class="comment">//虚拟机 默认值/</span></span><br><span class="line">        factory.setUsername(<span class="string">"heima"</span>);<span class="comment">//用户名 默认 guest</span></span><br><span class="line">        factory.setPassword(<span class="string">"heima"</span>);<span class="comment">//密码 默认值 guest</span></span><br><span class="line">        <span class="comment">//3. 创建连接 Connection</span></span><br><span class="line">        Connection connection = factory.newConnection();</span><br><span class="line">        <span class="comment">//4. 创建Channel</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        String queue1Name = <span class="string">"test_topic_queue1"</span>;</span><br><span class="line">        String queue2Name = <span class="string">"test_topic_queue2"</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        basicConsume(String queue, boolean autoAck, Consumer callback)</span></span><br><span class="line"><span class="comment">        参数：</span></span><br><span class="line"><span class="comment">            1. queue：队列名称</span></span><br><span class="line"><span class="comment">            2. autoAck：是否自动确认</span></span><br><span class="line"><span class="comment">            3. callback：回调对象</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">// 接收消息</span></span><br><span class="line">        Consumer consumer = <span class="keyword">new</span> DefaultConsumer(channel)&#123;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">                回调方法，当收到消息后，会自动执行该方法</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                1. consumerTag：标识</span></span><br><span class="line"><span class="comment">                2. envelope：获取一些信息，交换机，路由key...</span></span><br><span class="line"><span class="comment">                3. properties:配置信息</span></span><br><span class="line"><span class="comment">                4. body：数据</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">              <span class="comment">/*  System.out.println("consumerTag："+consumerTag);</span></span><br><span class="line"><span class="comment">                System.out.println("Exchange："+envelope.getExchange());</span></span><br><span class="line"><span class="comment">                System.out.println("RoutingKey："+envelope.getRoutingKey());</span></span><br><span class="line"><span class="comment">                System.out.println("properties："+properties);*/</span></span><br><span class="line">                System.out.println(<span class="string">"body："</span>+<span class="keyword">new</span> String(body));</span><br><span class="line">                System.out.println(<span class="string">"将日志信息存入数据库......."</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        channel.basicConsume(queue1Name,<span class="keyword">true</span>,consumer);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭资源？不要</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="消费者2-3"><a href="#消费者2-3" class="headerlink" title="消费者2"></a>消费者2</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.consumer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer_Topic2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.创建连接工厂</span></span><br><span class="line">        ConnectionFactory factory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        <span class="comment">//2. 设置参数</span></span><br><span class="line">        factory.setHost(<span class="string">"106.15.72.229"</span>);<span class="comment">//ip  默认值 localhost</span></span><br><span class="line">        factory.setPort(<span class="number">5672</span>); <span class="comment">//端口  默认值 5672</span></span><br><span class="line">        factory.setVirtualHost(<span class="string">"/itcast"</span>);<span class="comment">//虚拟机 默认值/</span></span><br><span class="line">        factory.setUsername(<span class="string">"heima"</span>);<span class="comment">//用户名 默认 guest</span></span><br><span class="line">        factory.setPassword(<span class="string">"heima"</span>);<span class="comment">//密码 默认值 guest</span></span><br><span class="line">        <span class="comment">//3. 创建连接 Connection</span></span><br><span class="line">        Connection connection = factory.newConnection();</span><br><span class="line">        <span class="comment">//4. 创建Channel</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        String queue1Name = <span class="string">"test_topic_queue1"</span>;</span><br><span class="line">        String queue2Name = <span class="string">"test_topic_queue2"</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        basicConsume(String queue, boolean autoAck, Consumer callback)</span></span><br><span class="line"><span class="comment">        参数：</span></span><br><span class="line"><span class="comment">            1. queue：队列名称</span></span><br><span class="line"><span class="comment">            2. autoAck：是否自动确认</span></span><br><span class="line"><span class="comment">            3. callback：回调对象</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">// 接收消息</span></span><br><span class="line">        Consumer consumer = <span class="keyword">new</span> DefaultConsumer(channel)&#123;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">                回调方法，当收到消息后，会自动执行该方法</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                1. consumerTag：标识</span></span><br><span class="line"><span class="comment">                2. envelope：获取一些信息，交换机，路由key...</span></span><br><span class="line"><span class="comment">                3. properties:配置信息</span></span><br><span class="line"><span class="comment">                4. body：数据</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">              <span class="comment">/*  System.out.println("consumerTag："+consumerTag);</span></span><br><span class="line"><span class="comment">                System.out.println("Exchange："+envelope.getExchange());</span></span><br><span class="line"><span class="comment">                System.out.println("RoutingKey："+envelope.getRoutingKey());</span></span><br><span class="line"><span class="comment">                System.out.println("properties："+properties);*/</span></span><br><span class="line">                System.out.println(<span class="string">"body："</span>+<span class="keyword">new</span> String(body));</span><br><span class="line">                System.out.println(<span class="string">"将日志信息打印控制台......."</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        channel.basicConsume(queue2Name,<span class="keyword">true</span>,consumer);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭资源？不要</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-3-测试"><a href="#5-3-测试" class="headerlink" title="5.3 测试"></a>5.3 测试</h3><p>启动所有消费者，然后使用生产者发送消息；在消费者对应的控制台可以查看到生产者发送对应routing key对应队列的消息；到达<code>按照需要接收</code>的效果；并且这些routing key可以使用通配符。</p><p>在执行完测试代码后，其实到RabbitMQ的管理后台找到<code>Exchanges</code>选项卡，点击 <code>topic_exchange</code> 的交换机，可以查看到如下的绑定：</p><p><img src="assets/image-20201215000614183.png" alt="image-20201215000614183"></p><h3 id="5-4-小结"><a href="#5-4-小结" class="headerlink" title="5.4. 小结"></a>5.4. 小结</h3><p>Topic主题模式可以实现 <code>Publish/Subscribe发布与订阅模式</code> 和 <code>Routing路由模式</code> 的功能；只是Topic在配置routing key 的时候可以使用通配符，显得更加灵活。</p><h2 id="6-模式总结"><a href="#6-模式总结" class="headerlink" title="6. 模式总结"></a>6. 模式总结</h2><p>RabbitMQ工作模式：<br><code>1、简单模式 HelloWorld</code></p><p>一个生产者、一个消费者，不需要设置交换机（使用默认的交换机）</p><p>`2、工作队列模式 Work Queue</p><p>一个生产者、多个消费者（竞争关系），不需要设置交换机（使用默认的交换机）</p><p><code>3、发布订阅模式 Publish/subscribe</code></p><p>需要设置类型为fanout的交换机，并且交换机和队列进行绑定，当发送消息到交换机后，交换机会将消息发送到绑定的队列</p><p><code>4、路由模式 Routing</code></p><p>需要设置类型为direct的交换机，交换机和队列进行绑定，并且指定routing key，当发送消息到交换机后，交换机会根据routing key将消息发送到对应的队列</p><p><code>5、通配符模式 Topic</code></p><p>需要设置类型为topic的交换机，交换机和队列进行绑定，并且指定通配符方式的routing key，当发送消息到交换机后，交换机会根据routing key将消息发送到对应的队列</p><h1 id="☆"><a href="#☆" class="headerlink" title="☆"></a>☆</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>rabbitmq笔记/5.AMQP</title>
    <link href="http://www.itbuild.cn/2020/12/19/rabbitmq%E7%AC%94%E8%AE%B0/5.AMQP/"/>
    <id>http://www.itbuild.cn/2020/12/19/rabbitmq%E7%AC%94%E8%AE%B0/5.AMQP/</id>
    <published>2020-12-18T16:05:36.957Z</published>
    <updated>2020-12-14T15:24:53.401Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="AMQP"><a href="#AMQP" class="headerlink" title="AMQP"></a>AMQP</h1><h2 id="1-相关概念介绍"><a href="#1-相关概念介绍" class="headerlink" title="1. 相关概念介绍"></a>1. 相关概念介绍</h2><p>AMQP  一个提供统一消息服务的应用层标准高级消息队列协议，是应用层协议的一个开放标准，为面向消息的中间件设计。</p><p>AMQP是一个二进制协议，拥有一些现代化特点：多信道、协商式，异步，安全，扩平台，中立，高效。</p><p>RabbitMQ是AMQP协议的Erlang的实现。</p><table><thead><tr><th>概念</th><th>说明</th></tr></thead><tbody><tr><td>连接Connection</td><td>一个网络连接，比如TCP/IP套接字连接。</td></tr><tr><td>会话Session</td><td>端点之间的命名对话。在一个会话上下文中，保证“恰好传递一次”。</td></tr><tr><td>信道Channel</td><td>多路复用连接中的一条独立的双向数据流通道。为会话提供物理传输介质。</td></tr><tr><td>客户端Client</td><td>AMQP连接或者会话的发起者。AMQP是非对称的，客户端生产和消费消息，服务器存储和路由这些消息。</td></tr><tr><td>服务节点Broker</td><td>消息中间件的服务节点；一般情况下可以将一个RabbitMQ Broker看作一台RabbitMQ 服务器。</td></tr><tr><td>端点</td><td>AMQP对话的任意一方。一个AMQP连接包括两个端点（一个是客户端，一个是服务器）。</td></tr><tr><td>消费者Consumer</td><td>一个从消息队列里请求消息的客户端程序。</td></tr><tr><td>生产者Producer</td><td>一个向交换机发布消息的客户端应用程序。</td></tr></tbody></table><h2 id="2-RabbitMQ运转流程"><a href="#2-RabbitMQ运转流程" class="headerlink" title="2. RabbitMQ运转流程"></a>2. RabbitMQ运转流程</h2><p>在入门案例中：</p><ul><li>生产者发送消息<ol><li>生产者创建连接（Connection），开启一个信道（Channel），连接到RabbitMQ Broker；</li><li>声明队列并设置属性；如是否排它，是否持久化，是否自动删除；</li><li>将路由键（空字符串）与队列绑定起来；</li><li>发送消息至RabbitMQ Broker；</li><li>关闭信道；</li><li>关闭连接；</li></ol></li><li>消费者接收消息<ol><li>消费者创建连接（Connection），开启一个信道（Channel），连接到RabbitMQ Broker</li><li>向Broker 请求消费相应队列中的消息，设置相应的回调函数；</li><li>等待Broker回应闭关投递响应队列中的消息，消费者接收消息；</li><li>确认（ack，自动确认）接收到的消息；</li><li>RabbitMQ从队列中删除相应已经被确认的消息；</li><li>关闭信道；</li><li>关闭连接；</li></ol></li></ul><p><img src="assets/1565105223969.png" alt="1565105223969"></p><h2 id="3-生产者流转过程说明"><a href="#3-生产者流转过程说明" class="headerlink" title="3. 生产者流转过程说明"></a>3. 生产者流转过程说明</h2><ol><li>客户端与代理服务器Broker建立连接。会调用newConnection() 方法,这个方法会进一步封装Protocol Header 0-9-1 的报文头发送给Broker ，以此通知Broker 本次交互采用的是AMQPO-9-1 协议，紧接着Broker 返回Connection.Start 来建立连接，在连接的过程中涉及Connection.Start/.Start-OK 、Connection.Tune/.Tune-Ok ，Connection.Open/ .Open-Ok 这6 个命令的交互。</li><li>客户端调用connection.createChannel方法。此方法开启信道，其包装的channel.open命令发送给Broker,等待channel.basicPublish方法，对应的AMQP命令为Basic.Publish,这个命令包含了content Header 和content Body()。content Header 包含了消息体的属性，例如:投递模式，优先级等，content Body 包含了消息体本身。</li><li>客户端发送完消息需要关闭资源时，涉及到Channel.Close和Channl.Close-Ok 与Connetion.Close和Connection.Close-Ok的命令交互。</li></ol><p><img src="assets/%E7%94%9F%E4%BA%A7%E8%80%85%E6%B5%81%E8%BD%AC%E8%BF%87%E7%A8%8B%E5%9B%BE.bmp" alt="生产者流转过程图"></p><h2 id="4-消费者流转过程说明"><a href="#4-消费者流转过程说明" class="headerlink" title="4. 消费者流转过程说明"></a>4. 消费者流转过程说明</h2><ol><li>消费者客户端与代理服务器Broker建立连接。会调用newConnection() 方法,这个方法会进一步封装Protocol Header 0-9-1 的报文头发送给Broker ，以此通知Broker 本次交互采用的是AMQPO-9-1 协议，紧接着Broker 返回Connection.Start 来建立连接，在连接的过程中涉及Connection.Start/.Start-OK 、Connection.Tune/.Tune-Ok ，Connection.Open/ .Open-Ok 这6 个命令的交互。</li><li>消费者客户端调用connection.createChannel方法。和生产者客户端一样，协议涉及Channel . Open/Open-Ok命令。</li><li>在真正消费之前，消费者客户端需要向Broker 发送Basic.Consume 命令(即调用channel.basicConsume 方法〉将Channel 置为接收模式，之后Broker 回执Basic . Consume - Ok 以告诉消费者客户端准备好消费消息。</li><li>Broker 向消费者客户端推送(Push) 消息，即Basic.Deliver 命令，这个命令和Basic.Publish 命令一样会携带Content Header 和Content Body。</li><li>消费者接收到消息并正确消费之后，向Broker 发送确认，即Basic.Ack 命令。</li><li>客户端发送完消息需要关闭资源时，涉及到Channel.Close和Channl.Close-Ok 与Connetion.Close和Connection.Close-Ok的命令交互。</li></ol><p><img src="assets/%E6%B6%88%E8%B4%B9%E8%80%85%E6%B5%81%E8%BD%AC%E8%BF%87%E7%A8%8B%E5%9B%BE.bmp" alt="消费者流转过程图"></p><h1 id="☆"><a href="#☆" class="headerlink" title="☆"></a>☆</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>rabbitmq笔记/4.RabbitMQ入门</title>
    <link href="http://www.itbuild.cn/2020/12/19/rabbitmq%E7%AC%94%E8%AE%B0/4.RabbitMQ%E5%85%A5%E9%97%A8/"/>
    <id>http://www.itbuild.cn/2020/12/19/rabbitmq%E7%AC%94%E8%AE%B0/4.RabbitMQ%E5%85%A5%E9%97%A8/</id>
    <published>2020-12-18T16:05:36.947Z</published>
    <updated>2020-12-14T15:23:18.944Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>[toc]</p><h2 id="RabbitMQ入门"><a href="#RabbitMQ入门" class="headerlink" title="RabbitMQ入门"></a>RabbitMQ入门</h2><h3 id="1-搭建示例工程"><a href="#1-搭建示例工程" class="headerlink" title="1. 搭建示例工程"></a>1. 搭建示例工程</h3><h4 id="1-1-创建工程"><a href="#1-1-创建工程" class="headerlink" title="1.1 创建工程"></a>1.1 创建工程</h4><p><img src="assets/1558319510387.png" alt="1555991321159"></p><p><img src="assets/1558319546688.png" alt="1555991353704"></p><h4 id="1-2-添加依赖"><a href="#1-2-添加依赖" class="headerlink" title="1.2 添加依赖"></a>1.2 添加依赖</h4><p>往heima-rabbitmq的pom.xml文件中添加如下依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.rabbitmq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>amqp-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.6.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-编写生产者"><a href="#2-编写生产者" class="headerlink" title="2. 编写生产者"></a>2. 编写生产者</h3><p>编写消息生产者com.itheima.producer.Producer_HelloWorld;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.producer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.ConnectionFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 发送消息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Producer_HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line">        <span class="comment">//1.创建连接工厂</span></span><br><span class="line">        ConnectionFactory factory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 设置参数</span></span><br><span class="line">        factory.setHost(<span class="string">"106.15.72.229"</span>);<span class="comment">//ip  默认值 localhost</span></span><br><span class="line">        factory.setPort(<span class="number">5672</span>); <span class="comment">//端口  默认值 5672</span></span><br><span class="line">        factory.setVirtualHost(<span class="string">"/itcast"</span>);<span class="comment">//虚拟机 默认值/</span></span><br><span class="line">        factory.setUsername(<span class="string">"heima"</span>);<span class="comment">//用户名 默认 guest</span></span><br><span class="line">        factory.setPassword(<span class="string">"heima"</span>);<span class="comment">//密码 默认值 guest</span></span><br><span class="line">        <span class="comment">//3. 创建连接 Connection</span></span><br><span class="line">        Connection connection = factory.newConnection();</span><br><span class="line">        <span class="comment">//4. 创建Channel</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        <span class="comment">//5. 创建队列Queue</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        queueDeclare(String queue, boolean durable, boolean exclusive, boolean autoDelete, Map&lt;String, Object&gt; arguments)</span></span><br><span class="line"><span class="comment">        参数：</span></span><br><span class="line"><span class="comment">            1. queue：队列名称</span></span><br><span class="line"><span class="comment">            2. durable:是否持久化，当mq重启之后，还在</span></span><br><span class="line"><span class="comment">            3. exclusive：</span></span><br><span class="line"><span class="comment">                * 是否独占。只能有一个消费者监听这队列</span></span><br><span class="line"><span class="comment">                * 当Connection关闭时，是否删除队列</span></span><br><span class="line"><span class="comment">                *</span></span><br><span class="line"><span class="comment">            4. autoDelete:是否自动删除。当没有Consumer时，自动删除掉</span></span><br><span class="line"><span class="comment">            5. arguments：参数。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//如果没有一个名字叫hello_world的队列，则会创建该队列，如果有则不会创建</span></span><br><span class="line">        channel.queueDeclare(<span class="string">"hello_world"</span>, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        basicPublish(String exchange, String routingKey, BasicProperties props, byte[] body)</span></span><br><span class="line"><span class="comment">        参数：</span></span><br><span class="line"><span class="comment">            1. exchange：交换机名称。简单模式下交换机会使用默认的 ""</span></span><br><span class="line"><span class="comment">            2. routingKey：路由名称</span></span><br><span class="line"><span class="comment">            3. props：配置信息</span></span><br><span class="line"><span class="comment">            4. body：发送消息数据</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        String body = <span class="string">"hello rabbitmq~~~"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//6. 发送消息</span></span><br><span class="line">        channel.basicPublish(<span class="string">""</span>, <span class="string">"hello_world"</span>, <span class="keyword">null</span>, body.getBytes());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//7.释放资源</span></span><br><span class="line">        channel.close();</span><br><span class="line">        connection.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在执行上述的消息发送之后；可以登录rabbitMQ的管理控制台，可以发现队列和其消息：</p><p><img src="assets/image-20201214231440832.png" alt="image-20201214231440832"></p><p><img src="assets/image-20201214231617494.png" alt="image-20201214231617494"></p><h3 id="3-编写消费者"><a href="#3-编写消费者" class="headerlink" title="3. 编写消费者"></a>3. 编写消费者</h3><p>编写消息的消费者com.itheima.consumer.Consumer_HelloWorld;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.consumer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer_HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.创建连接工厂</span></span><br><span class="line">        ConnectionFactory factory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        <span class="comment">//2. 设置参数</span></span><br><span class="line">        factory.setHost(<span class="string">"106.15.72.229"</span>);<span class="comment">//ip  默认值 localhost</span></span><br><span class="line">        factory.setPort(<span class="number">5672</span>); <span class="comment">//端口  默认值 5672</span></span><br><span class="line">        factory.setVirtualHost(<span class="string">"/itcast"</span>);<span class="comment">//虚拟机 默认值/</span></span><br><span class="line">        factory.setUsername(<span class="string">"heima"</span>);<span class="comment">//用户名 默认 guest</span></span><br><span class="line">        factory.setPassword(<span class="string">"heima"</span>);<span class="comment">//密码 默认值 guest</span></span><br><span class="line">        <span class="comment">//3. 创建连接 Connection</span></span><br><span class="line">        Connection connection = factory.newConnection();</span><br><span class="line">        <span class="comment">//4. 创建Channel</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        <span class="comment">//5. 创建队列Queue</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        queueDeclare(String queue, boolean durable, boolean exclusive, boolean autoDelete, Map&lt;String, Object&gt; arguments)</span></span><br><span class="line"><span class="comment">        参数：</span></span><br><span class="line"><span class="comment">            1. queue：队列名称</span></span><br><span class="line"><span class="comment">            2. durable:是否持久化，当mq重启之后，还在</span></span><br><span class="line"><span class="comment">            3. exclusive：</span></span><br><span class="line"><span class="comment">                * 是否独占。只能有一个消费者监听这队列</span></span><br><span class="line"><span class="comment">                * 当Connection关闭时，是否删除队列</span></span><br><span class="line"><span class="comment">                *</span></span><br><span class="line"><span class="comment">            4. autoDelete:是否自动删除。当没有Consumer时，自动删除掉</span></span><br><span class="line"><span class="comment">            5. arguments：参数。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//如果没有一个名字叫hello_world的队列，则会创建该队列，如果有则不会创建</span></span><br><span class="line">        channel.queueDeclare(<span class="string">"hello_world"</span>,<span class="keyword">true</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        basicConsume(String queue, boolean autoAck, Consumer callback)</span></span><br><span class="line"><span class="comment">        参数：</span></span><br><span class="line"><span class="comment">            1. queue：队列名称</span></span><br><span class="line"><span class="comment">            2. autoAck：是否自动确认</span></span><br><span class="line"><span class="comment">            3. callback：回调对象</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">// 接收消息</span></span><br><span class="line">        Consumer consumer = <span class="keyword">new</span> DefaultConsumer(channel)&#123;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">                回调方法，当收到消息后，会自动执行该方法</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                1. consumerTag：标识</span></span><br><span class="line"><span class="comment">                2. envelope：获取一些信息，交换机，路由key...</span></span><br><span class="line"><span class="comment">                3. properties:配置信息</span></span><br><span class="line"><span class="comment">                4. body：数据</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"consumerTag："</span>+consumerTag);</span><br><span class="line">                System.out.println(<span class="string">"Exchange："</span>+envelope.getExchange());</span><br><span class="line">                System.out.println(<span class="string">"RoutingKey："</span>+envelope.getRoutingKey());</span><br><span class="line">                System.out.println(<span class="string">"properties："</span>+properties);</span><br><span class="line">                System.out.println(<span class="string">"body："</span>+<span class="keyword">new</span> String(body));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        channel.basicConsume(<span class="string">"hello_world"</span>,<span class="keyword">true</span>,consumer);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭资源？不要</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="assets/image-20201214231933716.png" alt="image-20201214231933716"></p><p><img src="assets/image-20201214232206963.png" alt="image-20201214232206963"></p><p><img src="assets/image-20201214232226947.png" alt="image-20201214232226947"></p><p><img src="assets/image-20201214232238896.png" alt="image-20201214232238896"></p><h3 id="4-小结"><a href="#4-小结" class="headerlink" title="4. 小结"></a>4. 小结</h3><p>抽取创建connection的工具类com.itheima.util.ConnectionUtil；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.rabbitmq.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.ConnectionFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConnectionUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//创建连接工厂</span></span><br><span class="line">        ConnectionFactory connectionFactory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        <span class="comment">//主机地址;默认为 localhost</span></span><br><span class="line">        connectionFactory.setHost(<span class="string">"106.15.72.229"</span>);</span><br><span class="line">        <span class="comment">//连接端口;默认为 5672</span></span><br><span class="line">        connectionFactory.setPort(<span class="number">5672</span>);</span><br><span class="line">        <span class="comment">//虚拟主机名称;默认为 /</span></span><br><span class="line">        connectionFactory.setVirtualHost(<span class="string">"/itcast"</span>);</span><br><span class="line">        <span class="comment">//连接用户名；默认为guest</span></span><br><span class="line">        connectionFactory.setUsername(<span class="string">"heima"</span>);</span><br><span class="line">        <span class="comment">//连接密码；默认为guest</span></span><br><span class="line">        connectionFactory.setPassword(<span class="string">"heima"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建连接</span></span><br><span class="line">        <span class="keyword">return</span> connectionFactory.newConnection();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述的入门案例中中其实使用的是如下的<code>简单模式：</code></p><p><img src="assets/1555991074575.png" alt="1555991074575"></p><p>在上图的模型中，有以下概念：</p><ul><li>P：生产者，也就是要发送消息的程序</li><li>C：消费者：消息的接受者，会一直等待消息到来。</li><li>queue：消息队列，图中红色部分。类似一个邮箱，可以缓存消息；生产者向其中投递消息，消费者从其中取出消息。</li></ul><h2 id="☆"><a href="#☆" class="headerlink" title="☆"></a>☆</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>rabbitmq笔记/3.RabbitMQ的安装和配置</title>
    <link href="http://www.itbuild.cn/2020/12/19/rabbitmq%E7%AC%94%E8%AE%B0/3.RabbitMQ%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/"/>
    <id>http://www.itbuild.cn/2020/12/19/rabbitmq%E7%AC%94%E8%AE%B0/3.RabbitMQ%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/</id>
    <published>2020-12-18T16:05:36.937Z</published>
    <updated>2020-12-15T13:31:28.810Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>[toc]</p><h2 id="RabbitMQ的安装和配置"><a href="#RabbitMQ的安装和配置" class="headerlink" title="RabbitMQ的安装和配置"></a>RabbitMQ的安装和配置</h2><p><a href="https://blog.csdn.net/Kermit_father/article/details/105181740" target="_blank" rel="noopener">https://blog.csdn.net/Kermit_father/article/details/105181740</a></p><h3 id="1-安装依赖环境"><a href="#1-安装依赖环境" class="headerlink" title="1. 安装依赖环境"></a>1. 安装依赖环境</h3><p>在线安装依赖环境：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install build-essential openssl openssl-devel unixODBC unixODBC-devel make gcc gcc-c++ kernel-devel m4 ncurses-devel tk tc xz</span><br></pre></td></tr></table></figure><h3 id="2-安装Erlang"><a href="#2-安装Erlang" class="headerlink" title="2. 安装Erlang"></a>2. 安装Erlang</h3><p>上传下面三个安装包</p><p><code>erlang-18.3-1.el7.centos.x86_64.rpm</code></p><p><code>socat-1.7.3.2-5.el7.lux.x86_64.rpm</code></p><p><code>rabbitmq-server-3.6.5-1.noarch.rpm</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#下载erlang</span></span><br><span class="line">wget www.rabbitmq.com/releases/erlang/erlang-18.3-1.el7.centos.x86_64.rpm</span><br><span class="line"></span><br><span class="line"><span class="comment">#下载socat</span></span><br><span class="line">wget http://repo.iotti.biz/CentOS/7/x86_64/socat-1.7.3.2-5.el7.lux.x86_64.rpm</span><br><span class="line"></span><br><span class="line"><span class="comment">#下载rabbitmq-server</span></span><br><span class="line">wget www.rabbitmq.com/releases/rabbitmq-server/v3.6.5/rabbitmq-server-3.6.5-1.noarch.rpm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装</span></span><br><span class="line">rpm -ivh erlang-18.3-1.el7.centos.x86_64.rpm</span><br></pre></td></tr></table></figure><p>如果出现如下错误</p><p><img src="assets/1565526174751.png" alt="1565526174751"></p><p>说明gblic 版本太低。我们可以查看当前机器的gblic 版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">strings /lib64/libc.so.6 | grep GLIBC</span><br></pre></td></tr></table></figure><p><img src="assets/1565526264426.png" alt="1565526264426"></p><p>当前最高版本2.12，需要2.15.所以需要升级glibc</p><ul><li><p>使用yum更新安装依赖</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gcc make -y</span><br></pre></td></tr></table></figure></li><li><p>下载rpm包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">wget http://copr-be.cloud.fedoraproject.org/results/mosquito/myrepo-el6/epel-6-x86_64/glibc-2.17-55.fc20/glibc-utils-2.17-55.el6.x86_64.rpm &amp;</span><br><span class="line">wget http://copr-be.cloud.fedoraproject.org/results/mosquito/myrepo-el6/epel-6-x86_64/glibc-2.17-55.fc20/glibc-static-2.17-55.el6.x86_64.rpm &amp;</span><br><span class="line">wget http://copr-be.cloud.fedoraproject.org/results/mosquito/myrepo-el6/epel-6-x86_64/glibc-2.17-55.fc20/glibc-2.17-55.el6.x86_64.rpm &amp;</span><br><span class="line">wget http://copr-be.cloud.fedoraproject.org/results/mosquito/myrepo-el6/epel-6-x86_64/glibc-2.17-55.fc20/glibc-common-2.17-55.el6.x86_64.rpm &amp;</span><br><span class="line">wget http://copr-be.cloud.fedoraproject.org/results/mosquito/myrepo-el6/epel-6-x86_64/glibc-2.17-55.fc20/glibc-devel-2.17-55.el6.x86_64.rpm &amp;</span><br><span class="line">wget http://copr-be.cloud.fedoraproject.org/results/mosquito/myrepo-el6/epel-6-x86_64/glibc-2.17-55.fc20/glibc-headers-2.17-55.el6.x86_64.rpm &amp;</span><br><span class="line">wget http://copr-be.cloud.fedoraproject.org/results/mosquito/myrepo-el6/epel-6-x86_64/glibc-2.17-55.fc20/nscd-2.17-55.el6.x86_64.rpm &amp;</span><br></pre></td></tr></table></figure></li><li><p>安装rpm包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rpm -Uvh *-2.17-55.el6.x86_64.rpm --force --nodeps</span><br></pre></td></tr></table></figure></li><li><p>安装完毕后再查看glibc版本,发现glibc版本已经到2.17了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">strings /lib64/libc.so.6 | grep GLIBC</span><br></pre></td></tr></table></figure></li></ul><p><img src="assets/1565528746057.png" alt="1565528746057"></p><h3 id="3-安装RabbitMQ"><a href="#3-安装RabbitMQ" class="headerlink" title="3. 安装RabbitMQ"></a>3. 安装RabbitMQ</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">rpm -ivh socat-1.7.3.2-5.el7.lux.x86_64.rpm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装</span></span><br><span class="line">rpm -ivh rabbitmq-server-3.6.5-1.noarch.rpm</span><br></pre></td></tr></table></figure><h3 id="4-开启管理界面及配置"><a href="#4-开启管理界面及配置" class="headerlink" title="4. 开启管理界面及配置"></a>4. 开启管理界面及配置</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开启管理界面</span></span><br><span class="line">rabbitmq-plugins <span class="built_in">enable</span> rabbitmq_management</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改默认配置信息 </span></span><br><span class="line"><span class="built_in">cd</span> /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin</span><br><span class="line">vim rabbit.app </span><br><span class="line"><span class="comment"># 比如修改密码、配置等等，例如：loopback_users 中的 &lt;&lt;"guest"&gt;&gt;,只保留guest</span></span><br></pre></td></tr></table></figure><h3 id="5-启动"><a href="#5-启动" class="headerlink" title="5. 启动"></a>5. 启动</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">systemctl start rabbitmq-server  <span class="comment"># 启动服务</span></span><br><span class="line">systemctl stop rabbitmq-server  <span class="comment"># 停止服务</span></span><br><span class="line">systemctl restart rabbitmq-server  <span class="comment"># 重启服务</span></span><br><span class="line">systemctl status rabbitmq-server</span><br></pre></td></tr></table></figure><p>设置配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/share/doc/rabbitmq-server-3.6.5/</span><br><span class="line"></span><br><span class="line">cp rabbitmq.config.example /etc/rabbitmq/rabbitmq.config</span><br></pre></td></tr></table></figure><p>启动rabbitmq</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin</span><br><span class="line"> </span><br><span class="line">rabbitmq-server start &amp;</span><br></pre></td></tr></table></figure><p>常用命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">  rabbitmq-server -deched  --后台启动节点</span><br><span class="line"> </span><br><span class="line">  rabbitmqctl stop_app --关闭节点上的应用</span><br><span class="line"> </span><br><span class="line">  rabbitmqctl start_app --启动节点上的应用</span><br><span class="line"> </span><br><span class="line">  rabbitmqctl stop --关闭节点</span><br></pre></td></tr></table></figure><p><img src="assets/image-20201215115721783.png" alt="image-20201215115721783"></p><blockquote><p>修改了用户名之后，重启服务器造成创建用户丢失：</p><p>因为rabbitmq数据是根据当前hostname作为node节点作为数据名保存，这一点可以从rabbitmq-env文件中可以看出。</p><p>解决方案：</p><ol><li>不要更改hostname</li><li><a href="https://blog.csdn.net/qq_27037443/article/details/78050526" target="_blank" rel="noopener">https://blog.csdn.net/qq_27037443/article/details/78050526</a></li></ol></blockquote><h3 id="6-配置虚拟主机及用户"><a href="#6-配置虚拟主机及用户" class="headerlink" title="6. 配置虚拟主机及用户"></a>6. 配置虚拟主机及用户</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">执行添加用户命令</span></span><br><span class="line"></span><br><span class="line">rabbitmqctl add_user admin admin</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">执行设置权限命令</span></span><br><span class="line">rabbitmqctl set_permissions -p / admin ".*" ".*" ".*"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">执行设置角色命令</span></span><br><span class="line">rabbitmqctl set_user_tags admin administrator</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">执行查看用户命令</span></span><br><span class="line">rabbitmqctl list_users</span><br></pre></td></tr></table></figure><h4 id="6-1-用户角色"><a href="#6-1-用户角色" class="headerlink" title="6.1 用户角色"></a>6.1 用户角色</h4><p>RabbitMQ在安装好后，可以访问<code>http://ip地址:15672</code> ；其自带了guest/guest的用户名和密码；如果需要创建自定义用户；那么也可以登录管理界面后，如下操作：</p><p><img src="assets/1565098043833.png" alt="1565098043833"> </p><p><img src="assets/1565098315375.png" alt="1565098315375"></p><p><strong>角色说明</strong>：</p><p>1、 超级管理员(administrator)</p><p>可登陆管理控制台，可查看所有的信息，并且可以对用户，策略(policy)进行操作。</p><p>2、 监控者(monitoring)</p><p>可登陆管理控制台，同时可以查看rabbitmq节点的相关信息(进程数，内存使用情况，磁盘使用情况等)</p><p>3、 策略制定者(policymaker)</p><p>可登陆管理控制台, 同时可以对policy进行管理。但无法查看节点的相关信息(上图红框标识的部分)。</p><p>4、 普通管理者(management)</p><p>仅可登陆管理控制台，无法看到节点信息，也无法对策略进行管理。</p><p>5、 其他</p><p>无法登陆管理控制台，通常就是普通的生产者和消费者。</p><h4 id="6-2-Virtual-Hosts配置"><a href="#6-2-Virtual-Hosts配置" class="headerlink" title="6.2 Virtual Hosts配置"></a>6.2 Virtual Hosts配置</h4><p><code>像mysql拥有数据库的概念并且可以指定用户对库和表等操作的权限。RabbitMQ也有类似的权限管理；</code>在RabbitMQ中可以虚拟消息服务器Virtual Host，每个Virtual Hosts相当于一个相对独立的RabbitMQ服务器，每个VirtualHost之间是相互隔离的。exchange、queue、message不能互通。 相当于mysql的db。Virtual Name一般以/开头。</p><h6 id="创建Virtual-Hosts"><a href="#创建Virtual-Hosts" class="headerlink" title="创建Virtual Hosts"></a>创建Virtual Hosts</h6><p><img src="assets/1565098496482.png" alt="1565098496482"></p><h6 id="设置Virtual-Hosts权限"><a href="#设置Virtual-Hosts权限" class="headerlink" title="设置Virtual Hosts权限"></a>设置Virtual Hosts权限</h6><p><img src="assets/1565098585317.png" alt="1565098585317"></p><p><img src="assets/1565098719054.png" alt="1565098719054"></p><h2 id="☆"><a href="#☆" class="headerlink" title="☆"></a>☆</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>rabbitmq笔记/2.RabbitMQ基本介绍</title>
    <link href="http://www.itbuild.cn/2020/12/19/rabbitmq%E7%AC%94%E8%AE%B0/2.RabbitMQ%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D/"/>
    <id>http://www.itbuild.cn/2020/12/19/rabbitmq%E7%AC%94%E8%AE%B0/2.RabbitMQ%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D/</id>
    <published>2020-12-18T16:05:36.929Z</published>
    <updated>2020-12-14T13:00:29.690Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>[toc]</p><h2 id="RabbitMQ基本介绍"><a href="#RabbitMQ基本介绍" class="headerlink" title="RabbitMQ基本介绍"></a>RabbitMQ基本介绍</h2><p><code>AMQP，即 Advanced Message Queuing Protocol（高级消息队列协议），是一个网络协议</code>，是<code>应用层协议</code>的一个开放标准，为面向消息的中间件设计。基于此协议的客户端与消息中间件可传递消息，并不受客户端/中间件不同产品，不同的开发语言等条件的限制。<code>2006年，AMQP 规范发布。类比HTTP。</code></p><p><img src="assets/image-20201214204900113.png" alt="image-20201214204900113"></p><p>2007年，Rabbit 技术公司基于 AMQP 标准开发的 RabbitMQ 1.0 发布。RabbitMQ 采用 Erlang 语言开发。<code>Erlang 语言由 Ericson 设计，专门为开发高并发和分布式系统的一种语言，在电信领域使用广泛。</code></p><h3 id="1-RabbitMQ-基础架构"><a href="#1-RabbitMQ-基础架构" class="headerlink" title="1. RabbitMQ 基础架构"></a>1. RabbitMQ 基础架构</h3><p><img src="assets/image-20201214204938331.png" alt="image-20201214204938331"></p><h3 id="2-RabbitMQ-中的相关概念"><a href="#2-RabbitMQ-中的相关概念" class="headerlink" title="2. RabbitMQ 中的相关概念"></a>2. RabbitMQ 中的相关概念</h3><p><code>Broker：</code>接收和分发消息的应用，<code>RabbitMQ Server就是 Message Broker。</code></p><p><code>Virtual host：</code>出于多租户和安全因素设计的，把 AMQP 的基本组件划分到一个虚拟的分组中，类似于网络中的 namespace 概念。当多个不同的用户使用同一个 RabbitMQ server 提供的服务时，可以划分出多个vhost，每个用户在自己的 vhost 创建 exchange／queue 等。</p><p><code>Connection：</code>publisher／consumer 和 broker 之间的 TCP 连接。</p><p><code>Channel：</code>如果每一次访问 RabbitMQ 都建立一个 Connection，在消息量大的时候建立 TCP Connection的开销将是巨大的，效率也较低。Channel 是在 connection 内部建立的逻辑连接，如果应用程序支持多线程，通常每个thread创建单独的 channel 进行通讯，AMQP method 包含了channel id 帮助客户端和message broker 识别 channel，所以 channel 之间是完全隔离的。Channel 作为轻量级的 Connection 极大减少了操作系统建立 TCP connection 的开销。</p><p><code>Exchange：</code>message 到达 broker 的第一站，根据分发规则，<code>匹配查询表中的 routing key，</code>分发消息到queue 中去。常用的类型有：</p><ul><li><code>direct (point-to-point)</code></li><li><code>topic (publish-subscribe)</code> </li><li><code>fanout (multicast)</code></li></ul><p><code>Queue：</code>消息最终被送到这里等待 consumer 取走</p><p><code>Binding：</code>exchange 和 queue 之间的虚拟连接，binding 中可以包含 routing key。Binding 信息被保存到 exchange 中的查询表中，用于 message 的分发依据</p><h3 id="3-RabbitMQ的6-种工作模式"><a href="#3-RabbitMQ的6-种工作模式" class="headerlink" title="3. RabbitMQ的6 种工作模式"></a>3. RabbitMQ的6 种工作模式</h3><p>RabbitMQ 提供了 6 种工作模式：</p><p>==简单模式、work queues、Publish/Subscribe 发布与订阅模式、Routing 路由模式、Topics 主题模式、RPC 远程调用模式（远程调用，不太算 MQ；暂不作介绍）。==</p><p>官网对应模式介绍：<a href="https://www.rabbitmq.com/getstarted.html" target="_blank" rel="noopener">https://www.rabbitmq.com/getstarted.html</a></p><p><img src="assets/1555988678324.png" alt="1555988678324"></p><h3 id="4-AMQP-和-JMS"><a href="#4-AMQP-和-JMS" class="headerlink" title="4. AMQP 和 JMS"></a>4. AMQP 和 JMS</h3><p>MQ是消息通信的模型；<code>实现MQ的大致有两种主流方式：AMQP、JMS。</code></p><h4 id="4-1-AMQP"><a href="#4-1-AMQP" class="headerlink" title="4.1 AMQP"></a>4.1 AMQP</h4><p>AMQP是一种协议，更准确的说是一种binary wire-level protocol（链接协议）。这是其和JMS的本质差别，AMQP不从API层进行限定，而是直接定义网络交换的数据格式。</p><h4 id="4-2-JMS"><a href="#4-2-JMS" class="headerlink" title="4.2 JMS"></a>4.2 JMS</h4><p><code>JMS即Java消息服务（JavaMessage Service）应用程序接口，</code>是一个Java平台中关于面向消息中间件（MOM）的API，用于在两个应用程序之间，或分布式系统中发送消息，进行异步通信。</p><p> JMS 是 JavaEE 规范中的一种，类比JDBC。</p><h4 id="4-3-AMQP-与-JMS-区别☆"><a href="#4-3-AMQP-与-JMS-区别☆" class="headerlink" title="4.3 AMQP 与 JMS 区别☆"></a>4.3 AMQP 与 JMS 区别☆</h4><p>JMS是定义了统一的接口，来对消息操作进行统一；AMQP是通过规定协议来统一数据交互的格式</p><p>JMS限定了必须使用Java语言；AMQP只是协议，不规定实现方式，因此是跨语言的。</p><p>JMS规定了两种消息模式；而AMQP的消息模式更加丰富</p><h4 id="4-4-再谈市场上常见的消息队列"><a href="#4-4-再谈市场上常见的消息队列" class="headerlink" title="4.4 再谈市场上常见的消息队列"></a>4.4 再谈市场上常见的消息队列</h4><p>ActiveMQ：基于JMS</p><p>ZeroMQ：基于C语言开发</p><p>RabbitMQ：基于AMQP协议，erlang语言开发，稳定性好</p><p>RocketMQ：基于JMS，阿里巴巴产品</p><p>Kafka：类似MQ的产品；分布式消息系统，高吞吐量。</p><h2 id="☆"><a href="#☆" class="headerlink" title="☆"></a>☆</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>rabbitmq笔记/12.SpringBoot中集成ActiveMQ</title>
    <link href="http://www.itbuild.cn/2020/12/19/rabbitmq%E7%AC%94%E8%AE%B0/12.SpringBoot%E4%B8%AD%E9%9B%86%E6%88%90ActiveMQ/"/>
    <id>http://www.itbuild.cn/2020/12/19/rabbitmq%E7%AC%94%E8%AE%B0/12.SpringBoot%E4%B8%AD%E9%9B%86%E6%88%90ActiveMQ/</id>
    <published>2020-12-18T16:05:36.922Z</published>
    <updated>2020-12-16T05:48:04.415Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="SpringBoot中集成ActiveMQ"><a href="#SpringBoot中集成ActiveMQ" class="headerlink" title="SpringBoot中集成ActiveMQ"></a>SpringBoot中集成ActiveMQ</h2><h3 id="1-JMS-和-ActiveMQ-介绍"><a href="#1-JMS-和-ActiveMQ-介绍" class="headerlink" title="1. JMS 和 ActiveMQ 介绍"></a>1. JMS 和 ActiveMQ 介绍</h3><h4 id="1-1-JMS-是啥"><a href="#1-1-JMS-是啥" class="headerlink" title="1.1 JMS 是啥"></a>1.1 JMS 是啥</h4><p>百度百科的解释：</p><blockquote><p><code>JMS 即 Java 消息服务（Java Message Service）应用程序接口</code>，是一个Java平台中关于面向消息中间件（MOM）的 API，用于在两个应用程序之间，或分布式系统中发送消息，进行异步通信。Java 消息服务是一个与具体平台无关的 API，绝大多数 MOM 提供商都对 JMS 提供支持。</p></blockquote><p>JMS 只是接口，不同的提供商或者开源组织对其有不同的实现，ActiveMQ 就是其中之一，它支持JMS，是 Apache 推出的。JMS 中有几个对象模型：</p><blockquote><p>连接工厂：ConnectionFactory</p><p>JMS连接：Connection</p><p>JMS会话：Session</p><p>JMS目的：Destination</p><p>JMS生产者：Producer</p><p>JMS消费者：Consumer</p><p><code>JMS消息两种类型：点对点和发布/订阅。</code></p></blockquote><p>可以看出 JMS 实际上和 JDBC 有点类似，JDBC 是可以用来访问许多不同关系数据库的 API，而 JMS 则提供同样与厂商无关的访问方法，以访问消息收发服务。本文主要使用 ActiveMQ。</p><h4 id="1-2-ActiveMQ"><a href="#1-2-ActiveMQ" class="headerlink" title="1.2 ActiveMQ"></a>1.2 ActiveMQ</h4><p>ActiveMQ 是 Apache 的一个能力强劲的开源消息总线。ActiveMQ 完全支持JMS1.1和J2EE 1.4规范，尽管 JMS 规范出台已经是很久的事情了，但是 JMS 在当今的 Java EE 应用中间仍然扮演着特殊的地位。ActiveMQ 用在异步消息的处理上，所谓异步消息即消息发送者无需等待消息接收者的处理以及返回，甚至无需关心消息是否发送成功。</p><p>异步消息主要有两种目的地形式，队列（queue）和主题（topic），队列用于点对点形式的消息通信，主题用于发布/订阅式的消息通信。本章节主要来学习一下在 Spring Boot 中如何使用这两种形式的消息。</p><h3 id="2-ActiveMQ安装"><a href="#2-ActiveMQ安装" class="headerlink" title="2. ActiveMQ安装"></a>2. ActiveMQ安装</h3><p>使用 ActiveMQ 首先需要去官网下载，官网地址为：<a href="http://activemq.apache.org/" target="_blank" rel="noopener">http://activemq.apache.org/</a></p><p>本课程使用的版本是 apache-activemq-5.15.3，下载后解压缩会有一个名为 apache-activemq-5.15.3的文件夹，没错，这就安装好了，非常简单，开箱即用。打开文件夹会看到里面有个  activemq-all-5.15.3.jar ，这个 jar 我们是可以加进工程里的，但是使用 maven 的话，这个 jar 我们不需要。在使用 ActiveMQ 之前，首先得先启动，刚才解压后的目录中有个 bin 目录，里面有 win32 和 win64两个目录，根据自己电脑选择其中一个打开运行里面的 activemq.bat 即可启动 ActiveMQ。</p><p>消息生产者生产消息发布到queue中，然后消息消费者从queue中取出，并且消费消息。这里需要注意：消息被消费者消费以后，queue中不再有存储，所以消息消费者不可消费到已经被消费的消息。Queue支持存在多个消息消费者，但是对一个消息而言，只会有一个消费者可以消费启动完成后，在浏览器中输入  <a href="http://127.0.0.1:8161/admin/" target="_blank" rel="noopener">http://127.0.0.1:8161/admin/</a> 来访问 ActiveMQ 的服务器，用户名和密码是 admin/admin。如下：</p><p><img src="assets/image-20201216134216543.png" alt="image-20201216134216543"></p><p>我们可以看到有 Queues 和 Topics 这两个选项，这两个选项分别是点对点消息和发布/订阅消息的查看窗口。何为点对点消息和发布/订阅消息呢？</p><p>点对点消息：消息生产者生产消息发布到 queue 中，然后消息消费者从 queue 中取出，并且消费消息。这里需要注意：消息被消费者消费以后，queue 中不再有存储，所以消息消费者不可消费到已经被消费的消息。</p><p>Queue 支持存在多个消息消费者，但是对一个消息而言，只会有一个消费者可以消费。</p><p>发布/订阅消息：消息生产者（发布）将消息发布到 topic 中，同时有多个消息消费者（订阅）消费该消息。和点对点方式不同，发布到 topic 的消息会被所有订阅者消费。下面分析具体的实现方式。</p><h3 id="3-ActiveMQ集成"><a href="#3-ActiveMQ集成" class="headerlink" title="3. ActiveMQ集成"></a>3. ActiveMQ集成</h3><h4 id="3-1-依赖导入和配置"><a href="#3-1-依赖导入和配置" class="headerlink" title="3.1 依赖导入和配置"></a>3.1 依赖导入和配置</h4><p>在 Spring Boot 中集成 ActiveMQ 需要导入如下 starter 依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-activemq<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后在 application.yml 配置文件中，对 activemq 做一下配置：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"> <span class="attr">activemq:</span></span><br><span class="line">  <span class="comment"># activemq url</span></span><br><span class="line">  <span class="attr">broker-url:</span> <span class="string">tcp://localhost:61616</span></span><br><span class="line">  <span class="attr">in-memory:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">pool:</span></span><br><span class="line">   <span class="comment"># 如果此处设置为true，需要添加activemq-pool的依赖包，否则会自动配置失败，无法注入JmsMessagingTemplate</span></span><br><span class="line">   <span class="attr">enabled:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><h4 id="3-2-Queue-和-Topic-的创建"><a href="#3-2-Queue-和-Topic-的创建" class="headerlink" title="3.2 Queue 和 Topic 的创建"></a>3.2 Queue 和 Topic 的创建</h4><p>首先我们需要创建两种消息 Queue 和 Topic，这两种消息的创建，我们放到 ActiveMqConfig 中来创建，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* activemq的配置</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> shengwu ni</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ActiveMqConfig</span> </span>&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 发布/订阅模式队列名称</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TOPIC_NAME = <span class="string">"activemq.topic"</span>;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 点对点模式队列名称</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE_NAME = <span class="string">"activemq.queue"</span>;</span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Destination <span class="title">topic</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ActiveMQTopic(TOPIC_NAME);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Destination <span class="title">queue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ActiveMQQueue(QUEUE_NAME);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出创建 Queue 和 Topic 两种消息，分别使用  new ActiveMQQueue 和  new ActiveMQTopic 来创建，分别跟上对应消息的名称即可。这样在其他地方就可以直接将这两种消息作为组件注入进来了。</p><h4 id="3-3-消息的发送接口"><a href="#3-3-消息的发送接口" class="headerlink" title="3.3 消息的发送接口"></a>3.3 消息的发送接口</h4><p>在 Spring Boot 中，我们只要注入 JmsMessagingTemplate 模板即可快速发送消息，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 消息发送者</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> shengwu ni</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MsgProducer</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Resource</span></span><br><span class="line">  <span class="keyword">private</span> JmsMessagingTemplate jmsMessagingTemplate;</span><br><span class="line">    </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(Destination destination, String msg)</span> </span>&#123;</span><br><span class="line">    jmsMessagingTemplate.convertAndSend(destination, msg);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>convertAndSend 方法中第一个参数是消息发送的目的地，第二个参数是具体的消息内容。</p><h4 id="3-4-点对点消息生产与消费"><a href="#3-4-点对点消息生产与消费" class="headerlink" title="3.4 点对点消息生产与消费"></a>3.4 点对点消息生产与消费</h4><h6 id="3-4-1-点对点消息的生产"><a href="#3-4-1-点对点消息的生产" class="headerlink" title="3.4.1 点对点消息的生产"></a>3.4.1 点对点消息的生产</h6><p>消息的生产，我们放到 Controller 中来做，由于上面已经生成了 Queue 消息的组件，所以在Controller 中我们直接注入进来即可。然后调用上文的消息发送方法  sendMessage 即可成功生产一条消息。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>rabbitmq笔记/11.RabbitMQ集群搭建</title>
    <link href="http://www.itbuild.cn/2020/12/19/rabbitmq%E7%AC%94%E8%AE%B0/11.RabbitMQ%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/"/>
    <id>http://www.itbuild.cn/2020/12/19/rabbitmq%E7%AC%94%E8%AE%B0/11.RabbitMQ%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/</id>
    <published>2020-12-18T16:05:36.914Z</published>
    <updated>2020-12-15T13:51:04.311Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="RabbitMQ集群搭建"><a href="#RabbitMQ集群搭建" class="headerlink" title="RabbitMQ集群搭建"></a>RabbitMQ集群搭建</h2><p>摘要：实际生产应用中都会采用消息队列的集群方案，如果选择RabbitMQ那么有必要了解下它的集群方案原理</p><p>一般来说，如果只是为了学习RabbitMQ或者验证业务工程的正确性那么在本地环境或者测试环境上使用其单实例部署就可以了，但是出于MQ中间件本身的可靠性、并发性、吞吐量和消息堆积能力等问题的考虑，在生产环境上一般都会考虑使用RabbitMQ的集群方案。</p><h3 id="3-1-集群方案的原理"><a href="#3-1-集群方案的原理" class="headerlink" title="3.1 集群方案的原理"></a>3.1 集群方案的原理</h3><p>RabbitMQ这款消息队列中间件产品本身是基于Erlang编写，Erlang语言天生具备分布式特性（通过同步Erlang集群各节点的magic cookie来实现）。<code>因此，RabbitMQ天然支持Clustering。这使得RabbitMQ本身不需要像ActiveMQ、Kafka那样通过ZooKeeper分别来实现HA方案和保存集群的元数据。</code>集群是保证可靠性的一种方式，同时可以通过水平扩展以达到增加消息吞吐量能力的目的。</p><p><img src="assets/1566073768274.png" alt="1565245219265"></p><h3 id="3-2-单机多实例部署"><a href="#3-2-单机多实例部署" class="headerlink" title="3.2 单机多实例部署"></a>3.2 单机多实例部署</h3><p>由于某些因素的限制，有时候你不得不在一台机器上去搭建一个rabbitmq集群，这个有点类似zookeeper的单机版。真实生成环境还是要配成多机集群的。有关怎么配置多机集群的可以参考其他的资料，这里主要论述如何在单机中配置多个rabbitmq实例。</p><p>主要参考官方文档：<a href="https://www.rabbitmq.com/clustering.html" target="_blank" rel="noopener">https://www.rabbitmq.com/clustering.html</a></p><p>首先确保RabbitMQ运行没有问题</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">[root@super ~]# rabbitmqctl status</span><br><span class="line">Status of node rabbit@super ...</span><br><span class="line">[&#123;pid,10232&#125;,</span><br><span class="line"> &#123;running_applications,</span><br><span class="line">     [&#123;rabbitmq_management,"RabbitMQ Management Console","3.6.5"&#125;,</span><br><span class="line">      &#123;rabbitmq_web_dispatch,"RabbitMQ Web Dispatcher","3.6.5"&#125;,</span><br><span class="line">      &#123;webmachine,"webmachine","1.10.3"&#125;,</span><br><span class="line">      &#123;mochiweb,"MochiMedia Web Server","2.13.1"&#125;,</span><br><span class="line">      &#123;rabbitmq_management_agent,"RabbitMQ Management Agent","3.6.5"&#125;,</span><br><span class="line">      &#123;rabbit,"RabbitMQ","3.6.5"&#125;,</span><br><span class="line">      &#123;os_mon,"CPO  CXC 138 46","2.4"&#125;,</span><br><span class="line">      &#123;syntax_tools,"Syntax tools","1.7"&#125;,</span><br><span class="line">      &#123;inets,"INETS  CXC 138 49","6.2"&#125;,</span><br><span class="line">      &#123;amqp_client,"RabbitMQ AMQP Client","3.6.5"&#125;,</span><br><span class="line">      &#123;rabbit_common,[],"3.6.5"&#125;,</span><br><span class="line">      &#123;ssl,"Erlang/OTP SSL application","7.3"&#125;,</span><br><span class="line">      &#123;public_key,"Public key infrastructure","1.1.1"&#125;,</span><br><span class="line">      &#123;asn1,"The Erlang ASN1 compiler version 4.0.2","4.0.2"&#125;,</span><br><span class="line">      &#123;ranch,"Socket acceptor pool for TCP protocols.","1.2.1"&#125;,</span><br><span class="line">      &#123;mnesia,"MNESIA  CXC 138 12","4.13.3"&#125;,</span><br><span class="line">      &#123;compiler,"ERTS  CXC 138 10","6.0.3"&#125;,</span><br><span class="line">      &#123;crypto,"CRYPTO","3.6.3"&#125;,</span><br><span class="line">      &#123;xmerl,"XML parser","1.3.10"&#125;,</span><br><span class="line">      &#123;sasl,"SASL  CXC 138 11","2.7"&#125;,</span><br><span class="line">      &#123;stdlib,"ERTS  CXC 138 10","2.8"&#125;,</span><br><span class="line">      &#123;kernel,"ERTS  CXC 138 10","4.2"&#125;]&#125;,</span><br><span class="line"> &#123;os,&#123;unix,linux&#125;&#125;,</span><br><span class="line"> &#123;erlang_version,</span><br><span class="line">     "Erlang/OTP 18 [erts-7.3] [source] [64-bit] [async-threads:64] [hipe] [kernel-poll:true]\n"&#125;,</span><br><span class="line"> &#123;memory,</span><br><span class="line">     [&#123;total,56066752&#125;,</span><br><span class="line">      &#123;connection_readers,0&#125;,</span><br><span class="line">      &#123;connection_writers,0&#125;,</span><br><span class="line">      &#123;connection_channels,0&#125;,</span><br><span class="line">      &#123;connection_other,2680&#125;,</span><br><span class="line">      &#123;queue_procs,268248&#125;,</span><br><span class="line">      &#123;queue_slave_procs,0&#125;,</span><br><span class="line">      &#123;plugins,1131936&#125;,</span><br><span class="line">      &#123;other_proc,18144280&#125;,</span><br><span class="line">      &#123;mnesia,125304&#125;,</span><br><span class="line">      &#123;mgmt_db,921312&#125;,</span><br><span class="line">      &#123;msg_index,69440&#125;,</span><br><span class="line">      &#123;other_ets,1413664&#125;,</span><br><span class="line">      &#123;binary,755736&#125;,</span><br><span class="line">      &#123;code,27824046&#125;,</span><br><span class="line">      &#123;atom,1000601&#125;,</span><br><span class="line">      &#123;other_system,4409505&#125;]&#125;,</span><br><span class="line"> &#123;alarms,[]&#125;,</span><br><span class="line"> &#123;listeners,[&#123;clustering,25672,"::"&#125;,&#123;amqp,5672,"::"&#125;]&#125;,</span><br><span class="line"> &#123;vm_memory_high_watermark,0.4&#125;,</span><br><span class="line"> &#123;vm_memory_limit,411294105&#125;,</span><br><span class="line"> &#123;disk_free_limit,50000000&#125;,</span><br><span class="line"> &#123;disk_free,13270233088&#125;,</span><br><span class="line"> &#123;file_descriptors,</span><br><span class="line">     [&#123;total_limit,924&#125;,&#123;total_used,6&#125;,&#123;sockets_limit,829&#125;,&#123;sockets_used,0&#125;]&#125;,</span><br><span class="line"> &#123;processes,[&#123;limit,1048576&#125;,&#123;used,262&#125;]&#125;,</span><br><span class="line"> &#123;run_queue,0&#125;,</span><br><span class="line"> &#123;uptime,43651&#125;,</span><br><span class="line"> &#123;kernel,&#123;net_ticktime,60&#125;&#125;]</span><br></pre></td></tr></table></figure><p>停止rabbitmq服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@super sbin]# service rabbitmq-server stop</span><br><span class="line">Stopping rabbitmq-server: rabbitmq-server.</span><br></pre></td></tr></table></figure><p>启动第一个节点：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@super sbin]# RABBITMQ_NODE_PORT=5673 RABBITMQ_NODENAME=rabbit1 rabbitmq-server start</span><br><span class="line"></span><br><span class="line">              RabbitMQ 3.6.5. Copyright (C) 2007-2016 Pivotal Software, Inc.</span><br><span class="line"><span class="meta">  #</span><span class="bash"><span class="comment">#  ##      Licensed under the MPL.  See http://www.rabbitmq.com/</span></span></span><br><span class="line"><span class="meta">  #</span><span class="bash"><span class="comment">#  ##</span></span></span><br><span class="line"><span class="meta">  #</span><span class="bash"><span class="comment">#########  Logs: /var/log/rabbitmq/rabbit1.log</span></span></span><br><span class="line"><span class="meta">  #</span><span class="bash"><span class="comment">#####  ##        /var/log/rabbitmq/rabbit1-sasl.log</span></span></span><br><span class="line"><span class="meta">  #</span><span class="bash"><span class="comment">#########</span></span></span><br><span class="line">              Starting broker...</span><br><span class="line"> completed with 6 plugins.</span><br></pre></td></tr></table></figure><p>启动第二个节点：</p><blockquote><p>web管理插件端口占用,所以还要指定其web插件占用的端口号。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@super ~]# RABBITMQ_NODE_PORT=5674 RABBITMQ_SERVER_START_ARGS="-rabbitmq_management listener [&#123;port,15674&#125;]" RABBITMQ_NODENAME=rabbit2 rabbitmq-server start</span><br><span class="line"></span><br><span class="line">              RabbitMQ 3.6.5. Copyright (C) 2007-2016 Pivotal Software, Inc.</span><br><span class="line"><span class="meta">  #</span><span class="bash"><span class="comment">#  ##      Licensed under the MPL.  See http://www.rabbitmq.com/</span></span></span><br><span class="line"><span class="meta">  #</span><span class="bash"><span class="comment">#  ##</span></span></span><br><span class="line"><span class="meta">  #</span><span class="bash"><span class="comment">#########  Logs: /var/log/rabbitmq/rabbit2.log</span></span></span><br><span class="line"><span class="meta">  #</span><span class="bash"><span class="comment">#####  ##        /var/log/rabbitmq/rabbit2-sasl.log</span></span></span><br><span class="line"><span class="meta">  #</span><span class="bash"><span class="comment">#########</span></span></span><br><span class="line">              Starting broker...</span><br><span class="line"> completed with 6 plugins.</span><br></pre></td></tr></table></figure><p>结束命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl -n rabbit1 stop</span><br><span class="line">rabbitmqctl -n rabbit2 stop</span><br></pre></td></tr></table></figure><p>rabbit1操作作为主节点：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@super ~]# rabbitmqctl -n rabbit1 stop_app  </span><br><span class="line">Stopping node rabbit1@super ...</span><br><span class="line">[root@super ~]# rabbitmqctl -n rabbit1 reset </span><br><span class="line">Resetting node rabbit1@super ...</span><br><span class="line">[root@super ~]# rabbitmqctl -n rabbit1 start_app</span><br><span class="line">Starting node rabbit1@super ...</span><br><span class="line">[root@super ~]#</span><br></pre></td></tr></table></figure><p>rabbit2操作为从节点：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@super ~]# rabbitmqctl -n rabbit2 stop_app</span><br><span class="line">Stopping node rabbit2@super ...</span><br><span class="line">[root@super ~]# rabbitmqctl -n rabbit2 reset</span><br><span class="line">Resetting node rabbit2@super ...</span><br><span class="line">[root@super ~]# rabbitmqctl -n rabbit2 join_cluster rabbit1@'super' ###''内是主机名换成自己的</span><br><span class="line">Clustering node rabbit2@super with rabbit1@super ...</span><br><span class="line">[root@super ~]# rabbitmqctl -n rabbit2 start_app</span><br><span class="line">Starting node rabbit2@super ...</span><br></pre></td></tr></table></figure><p>查看集群状态：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@super ~]# rabbitmqctl cluster_status -n rabbit1</span><br><span class="line">Cluster status of node rabbit1@super ...</span><br><span class="line">[&#123;nodes,[&#123;disc,[rabbit1@super,rabbit2@super]&#125;]&#125;,</span><br><span class="line"> &#123;running_nodes,[rabbit2@super,rabbit1@super]&#125;,</span><br><span class="line"> &#123;cluster_name,&lt;&lt;&quot;rabbit1@super&quot;&gt;&gt;&#125;,</span><br><span class="line"> &#123;partitions,[]&#125;,</span><br><span class="line"> &#123;alarms,[&#123;rabbit2@super,[]&#125;,&#123;rabbit1@super,[]&#125;]&#125;]</span><br></pre></td></tr></table></figure><p>web监控：</p><p><img src="assets/1566065096459.png" alt="1566065096459"></p><h3 id="3-3-集群管理"><a href="#3-3-集群管理" class="headerlink" title="3.3 集群管理"></a>3.3 集群管理</h3><p><strong>rabbitmqctl join_cluster {cluster_node} [–ram]</strong><br>将节点加入指定集群中。在这个命令执行前需要停止RabbitMQ应用并重置节点。</p><p><strong>rabbitmqctl cluster_status</strong><br>显示集群的状态。</p><p><strong>rabbitmqctl change_cluster_node_type {disc|ram}</strong><br>修改集群节点的类型。在这个命令执行前需要停止RabbitMQ应用。</p><p><strong>rabbitmqctl forget_cluster_node [–offline]</strong><br>将节点从集群中删除，允许离线执行。</p><p><strong>rabbitmqctl update_cluster_nodes {clusternode}</strong></p><p>在集群中的节点应用启动前咨询clusternode节点的最新信息，并更新相应的集群信息。这个和join_cluster不同，它不加入集群。考虑这样一种情况，节点A和节点B都在集群中，当节点A离线了，节点C又和节点B组成了一个集群，然后节点B又离开了集群，当A醒来的时候，它会尝试联系节点B，但是这样会失败，因为节点B已经不在集群中了。</p><p><strong>rabbitmqctl cancel_sync_queue [-p vhost] {queue}</strong><br>取消队列queue同步镜像的操作。</p><p><strong>rabbitmqctl set_cluster_name {name}</strong><br>设置集群名称。集群名称在客户端连接时会通报给客户端。Federation和Shovel插件也会有用到集群名称的地方。集群名称默认是集群中第一个节点的名称，通过这个命令可以重新设置。</p><h3 id="3-4-RabbitMQ镜像集群配置"><a href="#3-4-RabbitMQ镜像集群配置" class="headerlink" title="3.4 RabbitMQ镜像集群配置"></a>3.4 RabbitMQ镜像集群配置</h3><blockquote><p>上面已经完成RabbitMQ默认集群模式，但并不保证队列的高可用性，尽管交换机、绑定这些可以复制到集群里的任何一个节点，但是队列内容不会复制。虽然该模式解决一项目组节点压力，但队列节点宕机直接导致该队列无法应用，只能等待重启，所以要想在队列节点宕机或故障也能正常应用，就要复制队列内容到集群里的每个节点，必须要创建镜像队列。</p><p>镜像队列是基于普通的集群模式的，然后再添加一些策略，所以你还是得先配置普通集群，然后才能设置镜像队列，我们就以上面的集群接着做。</p></blockquote><p><strong>设置的镜像队列可以通过开启的网页的管理端Admin-&gt;Policies，也可以通过命令。</strong></p><blockquote><p>rabbitmqctl set_policy my_ha “^” ‘{“ha-mode”:”all”}’</p></blockquote><p><img src="assets/1566072300852.png" alt="1566072300852"></p><blockquote><ul><li>Name:策略名称</li><li>Pattern：匹配的规则，如果是匹配所有的队列，是^.</li><li>Definition:使用ha-mode模式中的all，也就是同步所有匹配的队列。问号链接帮助文档。</li></ul></blockquote><h3 id="3-5-负载均衡-HAProxy"><a href="#3-5-负载均衡-HAProxy" class="headerlink" title="3.5 负载均衡-HAProxy"></a>3.5 负载均衡-HAProxy</h3><p>HAProxy提供高可用性、负载均衡以及基于TCP和HTTP应用的代理，支持虚拟主机，它是免费、快速并且可靠的一种解决方案,包括Twitter，Reddit，StackOverflow，GitHub在内的多家知名互联网公司在使用。HAProxy实现了一种事件驱动、单一进程模型，此模型支持非常大的并发连接数。</p><h5 id="3-5-1-安装HAProxy"><a href="#3-5-1-安装HAProxy" class="headerlink" title="3.5.1  安装HAProxy"></a>3.5.1  安装HAProxy</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">//下载依赖包</span><br><span class="line">yum install gcc vim wget</span><br><span class="line">//上传haproxy源码包</span><br><span class="line">//解压</span><br><span class="line">tar -zxvf haproxy-1.6.5.tar.gz -C /usr/local</span><br><span class="line">//进入目录、进行编译、安装</span><br><span class="line">cd /usr/local/haproxy-1.6.5</span><br><span class="line">make TARGET=linux31 PREFIX=/usr/local/haproxy</span><br><span class="line">make install PREFIX=/usr/local/haproxy</span><br><span class="line">mkdir /etc/haproxy</span><br><span class="line">//赋权</span><br><span class="line">groupadd -r -g 149 haproxy</span><br><span class="line">useradd -g haproxy -r -s /sbin/nologin -u 149 haproxy</span><br><span class="line">//创建haproxy配置文件</span><br><span class="line">mkdir /etc/haproxy</span><br><span class="line">vim /etc/haproxy/haproxy.cfg</span><br></pre></td></tr></table></figure><h5 id="3-5-2-配置HAProxy"><a href="#3-5-2-配置HAProxy" class="headerlink" title="3.5.2 配置HAProxy"></a>3.5.2 配置HAProxy</h5><p>配置文件路径：/etc/haproxy/haproxy.cfg</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">logging options</span></span><br><span class="line">global</span><br><span class="line">log 127.0.0.1 local0 info</span><br><span class="line">maxconn 5120</span><br><span class="line">chroot /usr/local/haproxy</span><br><span class="line">uid 99</span><br><span class="line">gid 99</span><br><span class="line">daemon</span><br><span class="line">quiet</span><br><span class="line">nbproc 20</span><br><span class="line">pidfile /var/run/haproxy.pid</span><br><span class="line"></span><br><span class="line">defaults</span><br><span class="line">log global</span><br><span class="line"></span><br><span class="line">mode tcp</span><br><span class="line"></span><br><span class="line">option tcplog</span><br><span class="line">option dontlognull</span><br><span class="line">retries 3</span><br><span class="line">option redispatch</span><br><span class="line">maxconn 2000</span><br><span class="line">contimeout 5s</span><br><span class="line">   </span><br><span class="line">     clitimeout 60s</span><br><span class="line"></span><br><span class="line">     srvtimeout 15s</span><br><span class="line"><span class="meta">#</span><span class="bash">front-end IP <span class="keyword">for</span> consumers and producters</span></span><br><span class="line"></span><br><span class="line">listen rabbitmq_cluster</span><br><span class="line">bind 0.0.0.0:5672</span><br><span class="line"></span><br><span class="line">mode tcp</span><br><span class="line"><span class="meta">#</span><span class="bash">balance url_param userid</span></span><br><span class="line"><span class="meta">#</span><span class="bash">balance url_param session_id check_post 64</span></span><br><span class="line"><span class="meta">#</span><span class="bash">balance hdr(User-Agent)</span></span><br><span class="line"><span class="meta">#</span><span class="bash">balance hdr(host)</span></span><br><span class="line"><span class="meta">#</span><span class="bash">balance hdr(Host) use_domain_only</span></span><br><span class="line"><span class="meta">#</span><span class="bash">balance rdp-cookie</span></span><br><span class="line"><span class="meta">#</span><span class="bash">balance leastconn</span></span><br><span class="line"><span class="meta">#</span><span class="bash">balance <span class="built_in">source</span> //ip</span></span><br><span class="line"></span><br><span class="line">balance roundrobin</span><br><span class="line"></span><br><span class="line">        server node1 127.0.0.1:5673 check inter 5000 rise 2 fall 2</span><br><span class="line">        server node2 127.0.0.1:5674 check inter 5000 rise 2 fall 2</span><br><span class="line"></span><br><span class="line">listen stats</span><br><span class="line">bind 172.16.98.133:8100</span><br><span class="line">mode http</span><br><span class="line">option httplog</span><br><span class="line">stats enable</span><br><span class="line">stats uri /rabbitmq-stats</span><br><span class="line">stats refresh 5s</span><br></pre></td></tr></table></figure><p>启动HAproxy负载</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/haproxy/sbin/haproxy -f /etc/haproxy/haproxy.cfg</span><br><span class="line">//查看haproxy进程状态</span><br><span class="line">ps -ef | grep haproxy</span><br><span class="line"></span><br><span class="line">访问如下地址对mq节点进行监控</span><br><span class="line">http://172.16.98.133:8100/rabbitmq-stats</span><br></pre></td></tr></table></figure><p>代码中访问mq集群地址，则变为访问haproxy地址:5672</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>rabbitmq笔记/10.RabbitMQ应用问题</title>
    <link href="http://www.itbuild.cn/2020/12/19/rabbitmq%E7%AC%94%E8%AE%B0/10.RabbitMQ%E5%BA%94%E7%94%A8%E9%97%AE%E9%A2%98/"/>
    <id>http://www.itbuild.cn/2020/12/19/rabbitmq%E7%AC%94%E8%AE%B0/10.RabbitMQ%E5%BA%94%E7%94%A8%E9%97%AE%E9%A2%98/</id>
    <published>2020-12-18T16:05:36.901Z</published>
    <updated>2020-12-15T13:09:04.402Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>[toc]</p><h2 id="RabbitMQ应用问题"><a href="#RabbitMQ应用问题" class="headerlink" title="RabbitMQ应用问题"></a>RabbitMQ应用问题</h2><h3 id="1-消息可靠性保障–消息补偿"><a href="#1-消息可靠性保障–消息补偿" class="headerlink" title="1. 消息可靠性保障–消息补偿"></a>1. 消息可靠性保障–消息补偿</h3><p>需求：100%确保消息发送成功</p><p><img src="assets/image-20201215210520558.png" alt="image-20201215210520558"></p><h3 id="2-消息幂等性保障–乐观锁机制"><a href="#2-消息幂等性保障–乐观锁机制" class="headerlink" title="2. 消息幂等性保障–乐观锁机制"></a>2. 消息幂等性保障–乐观锁机制</h3><p>幂等性指一次和多次请求某一个资源，对于资源本身应该具有同样的结果。也就是说，其任意多次执行对资源本身所产生的影响均与一次执行的影响相同。</p><p>在MQ中指，消费多条相同的消息，得到与消费该消息一次相同的结果。</p><p><img src="assets/image-20201215210820023.png" alt="image-20201215210820023"></p><h2 id="☆"><a href="#☆" class="headerlink" title="☆"></a>☆</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>rabbitmq笔记/1.MQ基本概念</title>
    <link href="http://www.itbuild.cn/2020/12/19/rabbitmq%E7%AC%94%E8%AE%B0/1.MQ%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"/>
    <id>http://www.itbuild.cn/2020/12/19/rabbitmq%E7%AC%94%E8%AE%B0/1.MQ%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</id>
    <published>2020-12-18T16:05:36.892Z</published>
    <updated>2020-12-14T12:46:39.375Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>[toc]</p><h2 id="MQ基本概念"><a href="#MQ基本概念" class="headerlink" title="MQ基本概念"></a>MQ基本概念</h2><h3 id="1-MQ概述"><a href="#1-MQ概述" class="headerlink" title="1. MQ概述"></a>1. MQ概述</h3><blockquote><p><code>MQ全称 Message Queue（消息队列）</code>，是在消息的传输过程中保存消息的容器。<code>多</code>用于<code>分布式系统之间进行通信。</code></p></blockquote><p><img src="assets/image-20201214200516263.png" alt="image-20201214200516263"></p><blockquote><p>使用MQ中间件</p></blockquote><p><img src="assets/image-20201214200537641.png" alt="image-20201214200537641"></p><blockquote><p>小结：</p><ol><li>MQ—消息队列，存储消息的中间件。</li><li>分布式系统通信两种方式：<code>直接远程调用</code>和==借助第三方完成间接通信==。</li><li>发送方称为生产者，接收方称为消费者。</li></ol></blockquote><h3 id="2-MQ的优势和劣势"><a href="#2-MQ的优势和劣势" class="headerlink" title="2. MQ的优势和劣势"></a>2. MQ的优势和劣势</h3><h4 id="2-1-优势"><a href="#2-1-优势" class="headerlink" title="2.1 优势"></a>2.1 优势</h4><blockquote><ol><li>应用解耦：提高系统容错性和可维护性。</li><li>异步提速：提升用户体验和系统吞吐量。</li><li>削峰填谷：提高系统稳定性。</li></ol></blockquote><h6 id="应用解耦"><a href="#应用解耦" class="headerlink" title="应用解耦"></a>应用解耦</h6><p>系统的耦合性越高，容错性就越低，可维护性就越低。</p><p><img src="assets/image-20201214202740735.png" alt="image-20201214202740735"></p><p>使用 MQ 使得应用间解耦，提升容错性和可维护性。</p><p><img src="assets/image-20201214202817687.png" alt="image-20201214202817687"></p><h6 id="异步提速"><a href="#异步提速" class="headerlink" title="异步提速"></a>异步提速</h6><p><img src="assets/image-20201214203001503.png" alt="image-20201214203001503"></p><p>一个下单操作耗时：20 + 300 + 300 + 300 = 920ms<br>用户点击完下单按钮后，需要等待920ms才能得到下单响应，太慢！</p><p><img src="assets/image-20201214203119022.png" alt="image-20201214203119022"></p><p>用户点击完下单按钮后，只需等待25ms就能得到下单响应 (20 + 5 = 25ms)。<br><code>提升用户体验和系统吞吐量（单位时间内处理请求的数目）。</code></p><h6 id="削峰填谷"><a href="#削峰填谷" class="headerlink" title="削峰填谷"></a>削峰填谷</h6><p><img src="assets/image-20201214203243219.png" alt="image-20201214203243219"></p><p><img src="assets/image-20201214203331072.png" alt="image-20201214203331072"></p><p><img src="assets/image-20201214203352618.png" alt="image-20201214203352618"></p><p>使用了 MQ 之后，限制消费消息的速度为1000，这样一来，高峰期产生的数据势必会被积压在 MQ 中，高峰就被“削”掉了，但是因为消息积压，在高峰期过后的一段时间内，消费消息的速度还是会维持在1000，直到消费完积压的消息，这就叫做<code>“填谷”</code>。<br><code>使用MQ后，可以提高系统稳定性。</code></p><h4 id="2-2-劣势"><a href="#2-2-劣势" class="headerlink" title="2.2 劣势"></a>2.2 劣势</h4><p><img src="assets/image-20201214203702793.png" alt="image-20201214203702793"></p><h6 id="系统可用性降低"><a href="#系统可用性降低" class="headerlink" title="系统可用性降低"></a>系统可用性降低</h6><p>系统引入的外部依赖越多，系统稳定性越差。一旦 MQ 宕机，就会对业务造成影响。如何保证MQ的高可用？</p><h6 id="系统复杂度提高"><a href="#系统复杂度提高" class="headerlink" title="系统复杂度提高"></a>系统复杂度提高</h6><p>MQ 的加入大大增加了系统的复杂度，以前系统间是同步的远程调用，现在是通过 MQ 进行异步调用。如何保证消息没有被重复消费？怎么处理消息丢失情况？那么保证消息传递的顺序性？</p><h6 id="一致性问题"><a href="#一致性问题" class="headerlink" title="一致性问题"></a>一致性问题</h6><p>A 系统处理完业务，通过 MQ 给B、C、D三个系统发消息数据，如果 B 系统、C 系统处理成功，D 系统处理失败。如何保证消息数据处理的一致性？</p><h4 id="2-3-既然-MQ-有优势也有劣势，那么使用-MQ-需要满足什么条件呢？"><a href="#2-3-既然-MQ-有优势也有劣势，那么使用-MQ-需要满足什么条件呢？" class="headerlink" title="2.3 既然 MQ 有优势也有劣势，那么使用 MQ 需要满足什么条件呢？"></a>2.3 既然 MQ 有优势也有劣势，那么使用 MQ 需要满足什么条件呢？</h4><ol><li>生产者不需要从消费者处获得反馈。引入消息队列之前的直接调用，其接口的返回值应该为空，这才让明明下层的动作还没做，上层却当成动作做完了继续往后走，即所谓异步成为了可能。</li><li>容许短暂的不一致性。</li><li>确实是用了有效果。即解耦、提速、削峰这些方面的收益，超过加入MQ，管理MQ这些成本。</li></ol><h3 id="3-常见的MQ产品"><a href="#3-常见的MQ产品" class="headerlink" title="3. 常见的MQ产品"></a>3. 常见的MQ产品</h3><blockquote><p>目前业界有很多的 MQ 产品，例如 <code>RabbitMQ</code>、RocketMQ、<code>ActiveMQ、Kafka</code>、ZeroMQ、MetaMq等，也有直接使用 Redis 充当消息队列的案例，而这些消息队列产品，各有侧重，在实际选型时，需要结合自身需求及 MQ 产品特征，综合考虑。</p></blockquote><p><img src="assets/image-20201214204101628.png" alt="image-20201214204101628"></p><h2 id="☆"><a href="#☆" class="headerlink" title="☆"></a>☆</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>itbuild-JavaEE</title>
    <link href="http://www.itbuild.cn/2020/08/24/itbuild-JavaEE/"/>
    <id>http://www.itbuild.cn/2020/08/24/itbuild-JavaEE/</id>
    <published>2020-08-24T02:09:16.680Z</published>
    <updated>2020-11-15T02:36:04.216Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>昨夜西风凋碧树，独上高楼，望尽天涯路。</p><a id="more"></a><h3 id="1-前端基础"><a href="#1-前端基础" class="headerlink" title="1. 前端基础"></a>1. 前端基础</h3><blockquote><p><a href="https://blog.csdn.net/weixin_45267102/article/details/100855528" target="_blank" rel="noopener">1.前端基础–html.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/108236150" target="_blank" rel="noopener">2.前端基础–CSS概述.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/108237734" target="_blank" rel="noopener">3.前端基础–CSS基础选择器.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/108271198" target="_blank" rel="noopener">4.前端基础–CSS文字文本样式.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/109143376" target="_blank" rel="noopener">5.前端基础–CSS复合选择器.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/109144050" target="_blank" rel="noopener">6.前端基础–CSS标签显示模式☆.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/109146736" target="_blank" rel="noopener">7.前端基础–CSS背景和行高.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/109167055" target="_blank" rel="noopener">8.前端基础–CSS三大特性.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/109398212" target="_blank" rel="noopener">9.前端基础–CSS盒子模型.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/109402561" target="_blank" rel="noopener">10.前端基础–CSS盒子浮动.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/109405091" target="_blank" rel="noopener">11.前端基础–CSS盒子定位.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/109603529" target="_blank" rel="noopener">12.前端基础–模板引擎art-template.md</a></p></blockquote><h4 id="前端-JavaScript"><a href="#前端-JavaScript" class="headerlink" title="前端-JavaScript"></a>前端-JavaScript</h4><blockquote><p><a href="https://blog.csdn.net/weixin_45267102/article/details/109455641" target="_blank" rel="noopener">1.前端–JavaScript入门.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/109477098" target="_blank" rel="noopener">2.前端–JavaScript常用对象.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/109538072" target="_blank" rel="noopener">3.前端–JavaScript DOM.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/109539748" target="_blank" rel="noopener">4.前端–JavaScript 事件的三个阶段.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/109548076" target="_blank" rel="noopener">5.前端–JavaScript 定时器.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/109551601" target="_blank" rel="noopener">6.前端–JavaScript 原型对象.md</a></p></blockquote><h4 id="前端-jQuery"><a href="#前端-jQuery" class="headerlink" title="前端-jQuery"></a>前端-jQuery</h4><blockquote><p><a href="https://blog.csdn.net/weixin_45267102/article/details/109564131" target="_blank" rel="noopener">1.前端–jQuery入门.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/109601002" target="_blank" rel="noopener">2.前端–jQuery常用方法.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/109602678" target="_blank" rel="noopener">3.前端–jQuery动画效果.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/109604365" target="_blank" rel="noopener">4.前端–jQuery滚动事件.md</a></p></blockquote><h4 id="前端-Vue"><a href="#前端-Vue" class="headerlink" title="前端-Vue"></a>前端-Vue</h4><blockquote><p><a href="https://blog.csdn.net/weixin_45267102/article/details/108984781" target="_blank" rel="noopener">1.前端框架—Vue入门</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/109145523" target="_blank" rel="noopener">2.前端框架—Vue的生命周期</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/109609051" target="_blank" rel="noopener">3.前端框架—Vue指令</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/109624146" target="_blank" rel="noopener">4.前端框架—Vue组件化</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/109625345" target="_blank" rel="noopener">5.前端框架—Vue路由</a></p></blockquote><h3 id="2-JavaSE"><a href="#2-JavaSE" class="headerlink" title="2. JavaSE"></a>2. JavaSE</h3><blockquote><p><a href="https://blog.csdn.net/weixin_45267102/article/details/100834756" target="_blank" rel="noopener">01.Java的历史和演变.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/100878136" target="_blank" rel="noopener">02.Java语言概述,JDK安装和环境变量的配置.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/102237758" target="_blank" rel="noopener">03.Java的注释、变量和数据类型.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/102259792" target="_blank" rel="noopener">04.运算符总结.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/102469775" target="_blank" rel="noopener">05.Java数组详解.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/102493012" target="_blank" rel="noopener">06.流程控制语句.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/102512011" target="_blank" rel="noopener">07.面向对象及封装特性.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/106097177" target="_blank" rel="noopener">08.深入分析Java中的length和length()</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/106117366" target="_blank" rel="noopener">09.Java基础之Object类详解.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/106123340" target="_blank" rel="noopener">10.Java常用基础类.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/106155175" target="_blank" rel="noopener">11.static和final关键字详解.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/106155565" target="_blank" rel="noopener">12.面向对象特性之继承.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/106296885" target="_blank" rel="noopener">13.Java基础之接口interface.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/106310952" target="_blank" rel="noopener">14.面向对象特性之多态.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/106346414" target="_blank" rel="noopener">15.内部类、包装类和权限修饰符总结.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/109700686" target="_blank" rel="noopener">16.Jdk1.8新特性–Optional.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/106699694" target="_blank" rel="noopener">17.学习递归这一篇就够了</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/107003675" target="_blank" rel="noopener">18.Java基础之Junit单元测试.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/107009536" target="_blank" rel="noopener">19.Java基础之反射.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/107348280" target="_blank" rel="noopener">20.Java基础之StringBuffer和StringBuilder.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/109693620" target="_blank" rel="noopener">21. JDK8新特性–Lambda表达式</a></p></blockquote><h4 id="Java-SE-设计模式"><a href="#Java-SE-设计模式" class="headerlink" title="Java SE-设计模式"></a>Java SE-设计模式</h4><blockquote><p><a href="https://blog.csdn.net/weixin_45267102/article/details/106618210" target="_blank" rel="noopener">1.设计模式基础之UML类图.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/106630885" target="_blank" rel="noopener">2.设计模式七大原则.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/106652439" target="_blank" rel="noopener">3.设计模式概述.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/106652680" target="_blank" rel="noopener">4.设计模式-单列模式.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/106675984" target="_blank" rel="noopener">5.设计模式-工厂模式.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/106719217" target="_blank" rel="noopener">6.设计模式-原型模式.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/106745059" target="_blank" rel="noopener">7.设计模式-建造者模式.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/106795447" target="_blank" rel="noopener">8.设计模式-适配器模式.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/106893444" target="_blank" rel="noopener">9.设计模式-桥接模式.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/106900365" target="_blank" rel="noopener">10.设计模式-装饰者模式.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/106919560" target="_blank" rel="noopener">11.设计模式-组合模式.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/106939033" target="_blank" rel="noopener">12.设计模式-外观模式.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/106990191" target="_blank" rel="noopener">13.设计模式-享元模式☆.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/107041526" target="_blank" rel="noopener">14.设计模式-代理模式.md</a></p></blockquote><h4 id="Java-SE-JVM"><a href="#Java-SE-JVM" class="headerlink" title="Java SE-JVM"></a>Java SE-JVM</h4><blockquote><p><a href="https://blog.csdn.net/weixin_45267102/article/details/108503674" target="_blank" rel="noopener">1.Java及JVM简介.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/108504237" target="_blank" rel="noopener">2.JVM架构及其生命周期.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/108522647" target="_blank" rel="noopener">3.JVM发展历程.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/108542049" target="_blank" rel="noopener">4.JVM-类加载子系统.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/108550380" target="_blank" rel="noopener">5.JVM运行时数据区概述.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/108551255" target="_blank" rel="noopener">6.JVM程序计数器.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/108606932" target="_blank" rel="noopener">7.JVM虚拟机栈.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/108608669" target="_blank" rel="noopener">8.JVM本地方法栈和本地方法接口.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/108836330" target="_blank" rel="noopener">9.JVM之深入理解堆.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/109150711" target="_blank" rel="noopener">10.JVM之深入理解方法区.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/109162466" target="_blank" rel="noopener">11.对象实例化、内存布局与访问定位.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/109210930" target="_blank" rel="noopener">12.JVM之直接内存.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/109210804" target="_blank" rel="noopener">13.JVM之执行引擎.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/109228871" target="_blank" rel="noopener">14.JVM之StringTable.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/109241376" target="_blank" rel="noopener">15.JVM之垃圾回收概述.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/109258381" target="_blank" rel="noopener">16.JVM之垃圾回收相关算法</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/109280365" target="_blank" rel="noopener">17. JVM之垃圾回收相关概念</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/109386582" target="_blank" rel="noopener">18. JVM之垃圾回收器</a></p></blockquote><h4 id="Java-SE-IO流"><a href="#Java-SE-IO流" class="headerlink" title="Java SE-IO流"></a>Java SE-IO流</h4><blockquote><p><a href="https://blog.csdn.net/weixin_45267102/article/details/106698646" target="_blank" rel="noopener">1.Java基础之File类.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/106701339" target="_blank" rel="noopener">2.Java中数据的读写–IO.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/106711053" target="_blank" rel="noopener">3.Java中IO异常处理.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/106711204" target="_blank" rel="noopener">4.Java基础之Properties类.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/106711392" target="_blank" rel="noopener">5.IO流之缓冲流.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/106717870" target="_blank" rel="noopener">6.IO流之转换流.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/106718648" target="_blank" rel="noopener">7.IO流之序列化流.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/106718846" target="_blank" rel="noopener">8.IO流之打印流.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/106719160" target="_blank" rel="noopener">9.IO流之内存操作流.md</a></p></blockquote><h4 id="Java-SE-NIO"><a href="#Java-SE-NIO" class="headerlink" title="Java SE-NIO"></a>Java SE-NIO</h4><blockquote><p><a href="https://blog.csdn.net/weixin_45267102/article/details/109594797" target="_blank" rel="noopener">1. Java基础之NIO</a></p></blockquote><h4 id="Java-SE-多线程"><a href="#Java-SE-多线程" class="headerlink" title="Java SE-多线程"></a>Java SE-多线程</h4><blockquote><p><a href="https://blog.csdn.net/weixin_45267102/article/details/109191297" target="_blank" rel="noopener">1.JavaSE-多线程基础知识.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/109229916" target="_blank" rel="noopener">2.JavaSE-线程池详解.md</a></p></blockquote><h4 id="Java-SE-集合"><a href="#Java-SE-集合" class="headerlink" title="Java SE-集合"></a>Java SE-集合</h4><blockquote><p><a href="https://blog.csdn.net/weixin_45267102/article/details/107350539" target="_blank" rel="noopener">1.Collection集合概述.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/107352937" target="_blank" rel="noopener">2.Java集合基础之Iterator迭代器.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/107353175" target="_blank" rel="noopener">3.Java集合基础之泛型.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/109632854" target="_blank" rel="noopener">4.List接口及其实现类</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/109644829" target="_blank" rel="noopener">5.Collections包装类和Comparator比较器</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/109678514" target="_blank" rel="noopener">6.Set接口及其实现类</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/109684141" target="_blank" rel="noopener">7.Map接口及其实现类</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/109700825" target="_blank" rel="noopener">8.JDK8新特性–Stream API</a></p></blockquote><h3 id="3-数据结构与算法"><a href="#3-数据结构与算法" class="headerlink" title="3. 数据结构与算法"></a>3. 数据结构与算法</h3><blockquote><p><a href="https://blog.csdn.net/weixin_45267102/article/details/106089597" target="_blank" rel="noopener">1.数据结构和算法概述.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/106149999" target="_blank" rel="noopener">2.数据结构之稀疏数组.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/106244969" target="_blank" rel="noopener">3.数据结构之队列.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/106874777" target="_blank" rel="noopener">4.数据结构之链表.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/106875255" target="_blank" rel="noopener">5.数据结构之栈.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/106875434" target="_blank" rel="noopener">6.数据结构之哈希表.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/106988614" target="_blank" rel="noopener">7.数据结构之二叉树.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/108392748" target="_blank" rel="noopener">8.数据结构之顺序储存二叉树.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/108395085" target="_blank" rel="noopener">9.数据结构之哈弗曼树.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/108413024" target="_blank" rel="noopener">10.数据结构之BST二叉排序树.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/108424364" target="_blank" rel="noopener">11.数据结构之AVL平衡二叉树.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/108424964" target="_blank" rel="noopener">12.数据结构之多路查找树.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/108425500" target="_blank" rel="noopener">13.数据结构之图.md</a></p></blockquote><h4 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h4><blockquote><p><a href="https://blog.csdn.net/weixin_45267102/article/details/106396566" target="_blank" rel="noopener">1.☆排序算法基础☆.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/106433870" target="_blank" rel="noopener">2.排序算法之冒泡排序.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/106460626" target="_blank" rel="noopener">3.排序算法之选择排序.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/106535850" target="_blank" rel="noopener">4.排序算法之插入排序.md</a></p><p>5.排序算法之希尔排序.md</p><p>6.排序算法之快速排序.md</p><p>7.排序算法之归并排序.md</p><p>8.排序算法之基数排序.md</p></blockquote><h4 id="蓝桥杯-Java"><a href="#蓝桥杯-Java" class="headerlink" title="蓝桥杯-Java"></a>蓝桥杯-Java</h4><blockquote><p><a href="https://blog.csdn.net/weixin_45267102/article/details/108894071" target="_blank" rel="noopener">1.蓝桥杯-入门训练Java-B组.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/108980403" target="_blank" rel="noopener">2.蓝桥杯-基础练习Java-B组.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/109081269" target="_blank" rel="noopener">3.蓝桥杯-第四届JavaB组省赛真题.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/109123932" target="_blank" rel="noopener">4.蓝桥杯-第十一届JavaB组省赛真题.md</a></p></blockquote><h4 id="leetcode刷题日记"><a href="#leetcode刷题日记" class="headerlink" title="leetcode刷题日记"></a>leetcode刷题日记</h4><blockquote><p><a href="https://blog.csdn.net/weixin_45267102/article/details/106086851" target="_blank" rel="noopener">1.leetCode–283移动零.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/106096374" target="_blank" rel="noopener">2.leetCode–485最大连续1的个数.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/106112977" target="_blank" rel="noopener">3.leetCode–1389按既定顺序创建目标数组.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/106134413" target="_blank" rel="noopener">4.leetCode–217存在重复元素.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/106154933" target="_blank" rel="noopener">5.leetCode–697数组的度.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/107613904" target="_blank" rel="noopener">6.leetCode–38外观数列</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/109607901" target="_blank" rel="noopener">7.leetCode–剑指Offer01判定字符是否唯一.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/108306953" target="_blank" rel="noopener">8.leetCode–剑指Offer03数组中重复的数字.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/108307079" target="_blank" rel="noopener">9.leetCode–剑指Offer04二维数组中的查找.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/108327758" target="_blank" rel="noopener">10.leetCode–剑指Offer05替换空格.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/108328611" target="_blank" rel="noopener">11.leetCode–剑指Offer06从尾到头打印链表.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/108351219" target="_blank" rel="noopener">12.leetCode–剑指Offer07重建二叉树.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/108366065" target="_blank" rel="noopener">13.leetCode–剑指Offer09用两个栈实现队列.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/108366431" target="_blank" rel="noopener">14.leetCode-剑指Offer10-I斐波那契数列.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/108366672" target="_blank" rel="noopener">15.leetCode–剑指Offer10-II青蛙跳台阶问题.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/108371303" target="_blank" rel="noopener">16.leetCode–剑指Offer11旋转数组的最小数字.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/108411575" target="_blank" rel="noopener">17.leetCode–剑指Offer12矩阵中的路径.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/108411661" target="_blank" rel="noopener">18.leetCode–剑指Offer13机器人的运动范围.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/109081198" target="_blank" rel="noopener">19.leetCode–46全排列</a></p></blockquote><h4 id="程序员常用的十种算法"><a href="#程序员常用的十种算法" class="headerlink" title="程序员常用的十种算法"></a>程序员常用的十种算法</h4><blockquote><p><a href="https://blog.csdn.net/weixin_45267102/article/details/108980910" target="_blank" rel="noopener">1.程序员常用的十种算法之二分查找算法</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/108989988" target="_blank" rel="noopener">2.程序员常用的十种算法之分治算法</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/108995887" target="_blank" rel="noopener">3.程序员常用的十种算法之动态规划算法</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/109003586" target="_blank" rel="noopener">4.程序员常用的十种算法之KMP算法</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/109018621" target="_blank" rel="noopener">5.程序员常用的十种算法之贪心算法</a></p></blockquote><h3 id="4-MySql数据库基础"><a href="#4-MySql数据库基础" class="headerlink" title="4. MySql数据库基础"></a>4. MySql数据库基础</h3><blockquote><p><a href="https://blog.csdn.net/weixin_45267102/article/details/100124940" target="_blank" rel="noopener">01.数据库基础知识.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/100133938" target="_blank" rel="noopener">02.SQL语法.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/100149258" target="_blank" rel="noopener">03.MySQL数据库-修改用户密码.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/100168062" target="_blank" rel="noopener">04.DQL查询语句-排序和分组.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/100181535" target="_blank" rel="noopener">05.MySQL数据库-表的约束和表之间的关系.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/100413082" target="_blank" rel="noopener">06.MySQL数据库-多表查询和子查询.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/100642265" target="_blank" rel="noopener">07.数据库事务.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/100643570" target="_blank" rel="noopener">08.数据库设计三大范式.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/100680560" target="_blank" rel="noopener">09.数据库的备份与还原.md</a></p></blockquote><h4 id="MySql高级知识"><a href="#MySql高级知识" class="headerlink" title="MySql高级知识"></a>MySql高级知识</h4><blockquote><p><a href="https://blog.csdn.net/weixin_45267102/article/details/107595322" target="_blank" rel="noopener">1.MySql高级之索引.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/107597118" target="_blank" rel="noopener">2.MySql高级之视图.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/107610692" target="_blank" rel="noopener">3.MySql高级之存储过程和函数.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/107616387" target="_blank" rel="noopener">4.MySql高级之触发器.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/107621802" target="_blank" rel="noopener">5.MySql的体系结构概览.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/107630144" target="_blank" rel="noopener">6.MySql高级之存储引擎.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/107635601" target="_blank" rel="noopener">7.MySql高级之优化SQL步骤.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/107646780" target="_blank" rel="noopener">8.MySql高级之索引的使用.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/107674886" target="_blank" rel="noopener">9.MySql高级之SQL优化.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/107678132" target="_blank" rel="noopener">10.MySql高级之应用优化.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/107678548" target="_blank" rel="noopener">11.MySql高级之查询缓存优化.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/107690352" target="_blank" rel="noopener">12.MySql高级之内存管理及优化.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/107702061" target="_blank" rel="noopener">13.MySql高级之并发参数调整.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/107702180" target="_blank" rel="noopener">14.MySql高级之锁问题.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/107703562" target="_blank" rel="noopener">15.MySql高级之常用SQL技巧☆.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/107710163" target="_blank" rel="noopener">16.MySql高级之日志.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/107710334" target="_blank" rel="noopener">17.MySql高级之常用工具.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/107719109" target="_blank" rel="noopener">18.MySql高级之主从同步.md</a></p></blockquote><h3 id="5-JavaWeb基础–Web框架基础"><a href="#5-JavaWeb基础–Web框架基础" class="headerlink" title="5. JavaWeb基础–Web框架基础"></a>5. JavaWeb基础–Web框架基础</h3><h4 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h4><blockquote><p><a href="https://blog.csdn.net/weixin_45267102/article/details/106166527" target="_blank" rel="noopener">1.Spring概述.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/106166728" target="_blank" rel="noopener">2.SpringIOC容器.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/106170182" target="_blank" rel="noopener">3.Spring中Bean的配置.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/106170406" target="_blank" rel="noopener">4.Spring之FactoryBean.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/106310451" target="_blank" rel="noopener">5.Spring中通过注解的方式配置Bean.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/106310608" target="_blank" rel="noopener">6.Spring测试单元使用总结.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/106346120" target="_blank" rel="noopener">7.Spring之泛型依赖注入.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/106346173" target="_blank" rel="noopener">8.Spring之AOP前奏.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/106365126" target="_blank" rel="noopener">9.Spring之AOP概述.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/106365311" target="_blank" rel="noopener">10.Spring之AOP切入点表达式.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/106373721" target="_blank" rel="noopener">11.Spring之AOP细节.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/106381997" target="_blank" rel="noopener">12.Spring之AOP通知方法总结.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/106382419" target="_blank" rel="noopener">13.Spring之AOP多切面通知方法的运行顺序.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/106382496" target="_blank" rel="noopener">14.Spring之AOP基于Xml的配置.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/106382718" target="_blank" rel="noopener">15.Spring之JdbcTemplate.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/106410782" target="_blank" rel="noopener">16.Spring之声明式事务管理.md</a></p></blockquote><h4 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a>SpringMVC</h4><blockquote><p><a href="https://blog.csdn.net/weixin_45267102/article/details/106448659" target="_blank" rel="noopener">1.SpringMVC概述.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/106448950" target="_blank" rel="noopener">2.@RequestMapping注解.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/106449295" target="_blank" rel="noopener">3.剖析SpringMVC处理请求数据.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/106454762" target="_blank" rel="noopener">4.剖析SpringMVC处理响应数据.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/106471834" target="_blank" rel="noopener">5.SpringMVC视图解析.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/106472007" target="_blank" rel="noopener">6.剖析SpringMVC处理Json数据.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/106472230" target="_blank" rel="noopener">7.SpringMVC之拦截器.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/106795604" target="_blank" rel="noopener">8.SpringMVC源码剖析其运行过程.md</a></p></blockquote><h4 id="MyBatisPlus"><a href="#MyBatisPlus" class="headerlink" title="MyBatisPlus"></a>MyBatisPlus</h4><blockquote><p><a href="https://blog.csdn.net/weixin_45267102/article/details/108678184" target="_blank" rel="noopener">1.MyBatisPlus简介.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/108678242" target="_blank" rel="noopener">2.MyBatisPlus入门.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/108873123" target="_blank" rel="noopener">3.MybatisPlus的增删改查.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/108874098" target="_blank" rel="noopener">4.MyBatisPlus的主键生成策略.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/108874376" target="_blank" rel="noopener">5.MyBatisPlus的自动填充.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/108984154" target="_blank" rel="noopener">6.MyBatisPlus实现乐观锁.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/109038160" target="_blank" rel="noopener">7.MyBatisPlus实现逻辑删除.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/109142154" target="_blank" rel="noopener">8.MyBatisPlus性能分析.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/109142346" target="_blank" rel="noopener">9.MyBatisPlus实现复杂查询.md</a></p></blockquote><h4 id="SpringDataJpa"><a href="#SpringDataJpa" class="headerlink" title="SpringDataJpa"></a>SpringDataJpa</h4><blockquote><p>1.SpringDataJpa基础.md</p><p>2.Jpa入门.md</p><p>3.Jpa中主键的生成策略.md</p><p>4.Jpa的API介绍和生成工具类.md</p><p>5.Jpa完成增删改查.md</p><p>6.SpringDataJpa概述.md</p><p>7.SpringDataJpa入门.md</p><p>8.SpringDataJpa的查询方式.md</p><p>9.SpringDataJpa原理剖析.md</p><p>10.Specification动态查询.md</p><p>11.表间关系.md</p><p>12.Jpa中的一对多.md</p><p>13.Jpa中的多对多.md</p><p>14.SpringDataJpa的多表查询.md</p></blockquote><h4 id="SpringBoot"><a href="#SpringBoot" class="headerlink" title="SpringBoot"></a>SpringBoot</h4><blockquote><p><a href="https://blog.csdn.net/weixin_45267102/article/details/106109849" target="_blank" rel="noopener">1.系统架构的演变</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/106393670" target="_blank" rel="noopener">2.服务调用方式</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/106394183" target="_blank" rel="noopener">3.SpringBoot入门</a></p></blockquote><h4 id="SpringCloud"><a href="#SpringCloud" class="headerlink" title="SpringCloud"></a>SpringCloud</h4><blockquote><p><a href="https://blog.csdn.net/weixin_45267102/article/details/109147936" target="_blank" rel="noopener">1.SpringCloud入门.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/109168849" target="_blank" rel="noopener">2.SpringCloud组件之Eureka.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/109169600" target="_blank" rel="noopener">3.实现Eureka高可用.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/109176379" target="_blank" rel="noopener">4.SpringCloud组件之Ribbn.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/109180364" target="_blank" rel="noopener">5.SpringCloud组件之Feign.md</a></p></blockquote><h3 id="6-Linux"><a href="#6-Linux" class="headerlink" title="6. Linux"></a>6. Linux</h3><blockquote><p><a href="https://blog.csdn.net/weixin_45267102/article/details/105577379" target="_blank" rel="noopener">1.Linux历史与基础知识</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/106367592" target="_blank" rel="noopener">2. Linux指令总结</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/106367957" target="_blank" rel="noopener">3. Shell编程基础</a></p></blockquote><h3 id="7-实战项目"><a href="#7-实战项目" class="headerlink" title="7. 实战项目"></a>7. 实战项目</h3><h4 id="谷粒学院"><a href="#谷粒学院" class="headerlink" title="谷粒学院"></a>谷粒学院</h4><blockquote><p><a href="https://blog.csdn.net/weixin_45267102/article/details/107373157" target="_blank" rel="noopener">1.谷粒学院概要.md</a></p><ul><li><a href="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/guli/2.%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E8%A1%8C%E4%B8%9A%E4%BB%8B%E7%BB%8D.pdf" target="_blank" rel="noopener">1.1在线教育行业介绍.pdf</a></li></ul><p><a href="https://blog.csdn.net/weixin_45267102/article/details/107647527" target="_blank" rel="noopener">2.谷粒学院项目介绍.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/108413078" target="_blank" rel="noopener">3.谷粒学院数据库设计.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/108413161" target="_blank" rel="noopener">4.项目环境搭建.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/108423895" target="_blank" rel="noopener">5.讲师管理模块的配置.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/108435902" target="_blank" rel="noopener">6.MybatisPlus代码生成器的使用.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/108436007" target="_blank" rel="noopener">7.讲师管理接口-查找所有讲师.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/108436151" target="_blank" rel="noopener">8.统一返回的json时间格式.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/108436174" target="_blank" rel="noopener">9.讲师管理模块的逻辑删除.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/108436164" target="_blank" rel="noopener">10.配置swagger2生成Api接口文档.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/108449377" target="_blank" rel="noopener">11.统一返回结果对象.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/108449578" target="_blank" rel="noopener">12.分页带条件查询.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/108449802" target="_blank" rel="noopener">13.新增和修改讲师接口.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/108449918" target="_blank" rel="noopener">14.统一异常处理.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/108450126" target="_blank" rel="noopener">15.统一日志处理.md</a></p><p>17.ECMAScript6新特性.md</p><p>18.Vue.md</p><p>19.axios.md</p><p>20.element-ui.md</p><p>21.node.js.md</p><p>22.npm包管理器.md</p><p>23.babel转码器.md</p><p>24.模块化开发.md</p><p>25.Webpack.md</p><p>26.前端页面架构分析.md</p><p>27.改造登陆接口.md</p><p>28.前端开发过程.md</p><p>29.条件分页查询讲师前端开发过程.md</p><p>30.删除讲师前端开发部分.md</p><p>31.添加讲师前端开发部分.md</p><p>32.修改讲师前端开发部分.md</p><p>33.对象储存OSS.md</p><p>34.项目中使用OSS.md</p><p>35.使用OSS上传头像前端部分.md</p><p>36.EasyExcel入门.md</p><p>37.添加课程分类后端.md</p><p>38.添加课程分类前端.md</p><p>39.显示课程分类(树)后端.md</p><p>40.显示课程分类(树)前端.md</p><p>41.课程管理后端-添加课程基本信息.md</p><p>42.课程管理前端-添加课程基本信息.md</p><p>43.课程管理后端-修改课程基本信息.md</p><p>44.课程管理前端-修改课程基本信息.md</p><p>45.课程管理后端-展示章节和小节信息.md</p><p>46.课程管理前端-展示章节和小节信息.md</p><p>47.课程管理后端-大纲(章)的增删改.md</p><p>48.课程管理前端-大纲(章)的增删改.md</p><p>49.课程管理后端-大纲(小节)的增删改.md</p><p>50.课程管理前端-大纲(小节)的增删改.md</p><p>51.课程管理后端-课程发布信息的回显.md</p><p>52.课程管理前端-课程发布信息的回显.md</p><p>53.课程管理前后端-课程的最终发布.md</p><p>54.课程管理前后端-课程列表的显示.md</p><p>55.阿里云视频点播服务.md</p><p>56.阿里VOD入门-服务端SDK.md</p><p>57.项目整合阿里云视频点播-上传视频后端.md</p><p>58.项目整合阿里云视频点播-上传视频前端.md</p><p>59.删除视频(数据库记录和云端数据)-前后端.md</p><p>60.SpringCloud入门.md</p><p>61.Nacos入门.md</p><p>62.Feign应用-删除小节同时删除云端视频.md</p><p>63.删除课程后端-同时删除该课程包含的视频.md</p><p>64.删除课程前端-同时删除该课程包含的视频.md</p><p>65.熔断器hystrix入门.md</p><p>66.服务端渲染结束nuxt入门.md</p><p>67.谷粒学院前台页面的搭建.md</p><p>68.Banner微服务的搭建-后端接口.md</p><p>69.Banner后台管理前端.md</p><p>70.首页讲师和课程后端接口.md</p><p>71.首页banner和讲师、热门课程显示.md</p><p>72.首页数据添加Redis缓存.md</p><p>73.用户登录业务介绍.md</p><p>74.项目整合jwt.md</p><p>75.项目整合阿里云短信服务.md</p><p>76.登录和注册功能的后端.md</p><p>77.注册功能前端实现.md</p><p>78.登录功能前端实现.md</p><p>79.退出登录状态.md</p><p>80.OAtuh2入门.md</p><p>81.微信登录准备工作.md</p><p>82.完成微信登录.md</p><p>82.获取微信登录二维码.md</p><p>83.前台讲师列表和讲师详情页后端接口.md</p><p>84.前台讲师列表和讲师详情页前端页面.md</p><p>85.课程列表和课程详情页后端接口.md</p><p>86.课程列表和课程详情页前端页面.md</p><p>87.阿里云视频播放测试.md</p><p>88.项目整合阿里云视频播放功能.md</p><p>89.课程评论功能前后端（有时间做）.md</p><p>90.课程支付需求描述.md</p><p>91.生成订单的后端接口.md</p><p>92.生成订单的前端页面.md</p><p>93.生成二维码和支付的接口.md</p><p>94.生成二维码和支付的前端页面.md</p><p>95.项目整合统计分析模块.md</p><p>96.项目整合ECharts前后端.md</p><p>97.Canal数据同步工具(待完善).md</p><p>98.项目整合网关gateway.md</p><p>99.项目整合权限管理和springsecurity.md</p><p>100.naxos的配置中心使用(待做).md</p><p>101.git.md</p><p>102.Jenkins部署项目(待做).md</p><p>103.项目功能和技术总结.md</p><p>104.项目面试问题.md</p></blockquote><h4 id="乐优商城"><a href="#乐优商城" class="headerlink" title="乐优商城"></a>乐优商城</h4><blockquote><p>2.项目初步搭建.md</p><p>3.ECMAScript6新特性.md</p><p>4.前端开发模式的发展.md</p><p>06.Vue入门.md</p><p>07.Vue的生命周期.md</p><p>08.Vue指令.md</p><p>09.Vue组件化.md</p><p>10.Vue路由.md</p><p>11.搭建后台管理的前端页面.md</p><p>12.Vuetify框架.md</p><p>13.使用域名访问本地项目.md</p><p>14.商品分类查询.md</p><p>15.跨域问题.md</p><p>16.商品的查询.md</p><p>17.品牌的新增.md</p><p>18.实现图片的上传.md</p><p>19.MultipartFile.md</p><p>20.Docker部署FastDFS.md</p><p>21.FastDFS.md</p><p>22.@Import注解.md</p><p>23.商品规格查询.md</p><p>24.Spu和Sku数据结构.md</p><p>25.商品查询.md</p><p>26.商品新增.md</p><p>27.修改商品.md</p><p>28.搭建前台系统.md</p><p>29.Elasticsearch介绍和安装.md</p><p>30.kibana操作索引.md</p><p>31.Kibana查询.md</p><p>32.聚合aggregations.md</p><p>33.创建leyou-search工程导入数据.md</p><p>34.ObjectMapper.md</p><p>35.实现基本搜索.md</p><p>36.Vue实战介绍.md</p><p>37.页面分页效果.md</p></blockquote><h4 id="品优购商城"><a href="#品优购商城" class="headerlink" title="品优购商城"></a>品优购商城</h4><h3 id="☆"><a href="#☆" class="headerlink" title="☆"></a>☆</h3>]]></content>
    
    
    <summary type="html">&lt;p&gt;昨夜西风凋碧树，独上高楼，望尽天涯路。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>itbuild-hadoop生态圈</title>
    <link href="http://www.itbuild.cn/2020/08/06/itbuild-hadoop%E7%94%9F%E6%80%81%E5%9C%88/"/>
    <id>http://www.itbuild.cn/2020/08/06/itbuild-hadoop%E7%94%9F%E6%80%81%E5%9C%88/</id>
    <published>2020-08-06T03:54:49.181Z</published>
    <updated>2020-08-24T02:49:47.790Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>衣带渐宽终不悔，为伊消得人憔悴。</p><a id="more"></a><h3 id="1-Hadoop基础"><a href="#1-Hadoop基础" class="headerlink" title="1. Hadoop基础"></a>1. Hadoop基础</h3><blockquote><p><a href="https://download.csdn.net/download/weixin_45267102/12557552" target="_blank" rel="noopener">1.VMware安装CentOS.md</a></p><p><a href="https://download.csdn.net/download/weixin_45267102/12557566" target="_blank" rel="noopener">2.VMware安装VMTools.md</a></p><p><a href="https://download.csdn.net/download/weixin_45267102/12557582" target="_blank" rel="noopener">3.配置CentOS-为克隆虚拟机做准备.md</a></p><p><a href="https://download.csdn.net/download/weixin_45267102/12557594" target="_blank" rel="noopener">4.VMware克隆虚拟机.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/106997386" target="_blank" rel="noopener">5.大数据概论.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/106997513" target="_blank" rel="noopener">6.Hadoop框架引出大数据生态.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/106988171" target="_blank" rel="noopener">7.安装JDk和Hadoop及测试本地运行模式.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/106988469" target="_blank" rel="noopener">8.Hadoop伪分布式运行模式.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/107131407" target="_blank" rel="noopener">9.Hadoop配置文件说明.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/107145534" target="_blank" rel="noopener">10.集群分发脚本xsync.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/107149221" target="_blank" rel="noopener">11.Hadoop完全分布式运行模式.md</a></p></blockquote><h3 id="2-HDFS"><a href="#2-HDFS" class="headerlink" title="2. HDFS"></a>2. HDFS</h3><blockquote><p><a href="https://blog.csdn.net/weixin_45267102/article/details/107149497" target="_blank" rel="noopener">1.HDFS概述.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/107149899" target="_blank" rel="noopener">2.HDFS的Shell操作.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/107149999" target="_blank" rel="noopener">3.HDFS客户端操作.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/107168888" target="_blank" rel="noopener">4.HDFS的数据流-读写数据.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/107175461" target="_blank" rel="noopener">5.NameNode和SecondaryNameNode.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/107179192" target="_blank" rel="noopener">6.集群安全模式.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/107179840" target="_blank" rel="noopener">7.DataNode.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/107179976" target="_blank" rel="noopener">8.服役和退役数据节点.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/107180158" target="_blank" rel="noopener">9.HDFS 2.X新特性.md</a></p></blockquote><h3 id="3-MapReduce"><a href="#3-MapReduce" class="headerlink" title="3. MapReduce"></a>3. MapReduce</h3><blockquote><p><a href="https://blog.csdn.net/weixin_45267102/article/details/107203888" target="_blank" rel="noopener">1.MapReduce概述.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/107204105" target="_blank" rel="noopener">2.WordCount案例实操.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/107219029" target="_blank" rel="noopener">3.Hadoop序列化.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/107236423" target="_blank" rel="noopener">4.Job提交流程源码和切片源码详解.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/107249800" target="_blank" rel="noopener">5.切片与MapTask并行度决定机制.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/107271320" target="_blank" rel="noopener">6.FileInputFormat实现类.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/107271711" target="_blank" rel="noopener">7.自定义FileInputFormat.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/107293630" target="_blank" rel="noopener">8.Mapper和Reducer源码.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/107300005" target="_blank" rel="noopener">9.MapReduce工作流程.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/107300051" target="_blank" rel="noopener">10.Shuffle机制☆☆.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/107300424" target="_blank" rel="noopener">11.OutputFormat数据输出.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/107300915" target="_blank" rel="noopener">12.MapTask和ReduceTask工作机制.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/107308102" target="_blank" rel="noopener">13.ReduceTask并行度.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/107308102" target="_blank" rel="noopener">14.MapReduce之Join多种应用.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/107322093" target="_blank" rel="noopener">15.MapReduce之数据清洗和计数器的应用</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/107391880" target="_blank" rel="noopener">16.MapReduce扩展案例.md</a></p></blockquote><h3 id="4-Yarn"><a href="#4-Yarn" class="headerlink" title="4. Yarn"></a>4. Yarn</h3><blockquote><p><a href="https://blog.csdn.net/weixin_45267102/article/details/107325788" target="_blank" rel="noopener">1.Yarn资源调度器</a></p></blockquote><h3 id="5-hadoop企业调优"><a href="#5-hadoop企业调优" class="headerlink" title="5. hadoop企业调优"></a>5. hadoop企业调优</h3><blockquote><p><a href="https://blog.csdn.net/weixin_45267102/article/details/107328502" target="_blank" rel="noopener">1.Hadoop数据压缩.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/107337193" target="_blank" rel="noopener">2.Hadoop企业优化.md</a></p></blockquote><h3 id="6-ZooKeeper"><a href="#6-ZooKeeper" class="headerlink" title="6. ZooKeeper"></a>6. ZooKeeper</h3><blockquote><p><a href="https://blog.csdn.net/weixin_45267102/article/details/107415469" target="_blank" rel="noopener">1.ZooKeeper入门.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/107415834" target="_blank" rel="noopener">2.ZooKeeper的安装和配置参数详解.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/107416024" target="_blank" rel="noopener">3.ZooKeeper分布式安装部署和客户端命令行操作.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/107418176" target="_blank" rel="noopener">4.Zookeeper内部原理.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/107425319" target="_blank" rel="noopener">5.ZooKeeper之API应用.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/107433344" target="_blank" rel="noopener">6.HDFS高可用HA配置.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/107436322" target="_blank" rel="noopener">7.Yarn高可用HA配置.md</a></p></blockquote><h3 id="7-Hive"><a href="#7-Hive" class="headerlink" title="7. Hive"></a>7. Hive</h3><blockquote><p><a href="https://blog.csdn.net/weixin_45267102/article/details/107453958" target="_blank" rel="noopener">1.Hive基本概念.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/107461107" target="_blank" rel="noopener">2.Hive的安装和配置.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/107466182" target="_blank" rel="noopener">3.Hive常见属性配置.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/107473784" target="_blank" rel="noopener">4.Hive的数据类型.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/107478015" target="_blank" rel="noopener">5.Hive技术之DDL数据定义.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/107493019" target="_blank" rel="noopener">6.Hive技术之DML数据操作.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/107551194" target="_blank" rel="noopener">7.Hive技术之DML数据查询.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/107733900" target="_blank" rel="noopener">8.Hive技术之常用查询函数.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/107812756" target="_blank" rel="noopener">9.Hive技术之HQL练习☆.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/107820547" target="_blank" rel="noopener">10.Hive技术之自定义函数.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/107840051" target="_blank" rel="noopener">11.Hive技术之压缩和存储.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/107852968" target="_blank" rel="noopener">12.Hive技术之企业级调优.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/107877185" target="_blank" rel="noopener">13.Hive实战之谷粒影音.md</a></p></blockquote><h3 id="8-Flume"><a href="#8-Flume" class="headerlink" title="8. Flume"></a>8. Flume</h3><blockquote><p><a href="https://blog.csdn.net/weixin_45267102/article/details/107901979" target="_blank" rel="noopener">1.Flume技术入门.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/107908679" target="_blank" rel="noopener">2.Flume事务、Agent原理、拓扑结构.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/107924008" target="_blank" rel="noopener">3.Flume企业开发案例-复制.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/107924122" target="_blank" rel="noopener">4.Flume企业开发案例-多路复用以及自定义flume拦截器.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/107924852" target="_blank" rel="noopener">5.Flume企业开发案例-负载均衡和故障转移.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/107924915" target="_blank" rel="noopener">6.Flume企业开发案例-聚合.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/107940489" target="_blank" rel="noopener">7.Flume技术之自定义Source.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/107944968" target="_blank" rel="noopener">8.Flume技术之自定义Sink.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/107946767" target="_blank" rel="noopener">9.Flume数据流监控-Ganglia.md</a></p></blockquote><h3 id="9-Kafka"><a href="#9-Kafka" class="headerlink" title="9. Kafka"></a>9. Kafka</h3><blockquote><p><a href="https://blog.csdn.net/weixin_45267102/article/details/107966922" target="_blank" rel="noopener">1.Kafka概述.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/107993518" target="_blank" rel="noopener">2.kafka快速入门.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/108016826" target="_blank" rel="noopener">3.Kafka工作流程及文件存储机制.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/108064449" target="_blank" rel="noopener">4.kafka生产者.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/108101437" target="_blank" rel="noopener">5.kafka消费者.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/108101579" target="_blank" rel="noopener">6.Kafka高效读写数据及事务.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/108137810" target="_blank" rel="noopener">7.Kafka Producer和Consumer API.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/108149462" target="_blank" rel="noopener">8.自定义拦截器Interceptor.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/108151994" target="_blank" rel="noopener">9.kafka监控-Eagle.md</a></p><p><a href="https://blog.csdn.net/weixin_45267102/article/details/108152883" target="_blank" rel="noopener">10.Flume对接Kafka.md</a></p></blockquote><h2 id="☆"><a href="#☆" class="headerlink" title="☆"></a>☆</h2>]]></content>
    
    
    <summary type="html">&lt;p&gt;衣带渐宽终不悔，为伊消得人憔悴。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
</feed>
