<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>it❤ld</title>
  
  
  <link href="http://www.itbuild.cn/atom.xml" rel="self"/>
  
  <link href="http://www.itbuild.cn/"/>
  <updated>2020-12-19T14:02:52.405Z</updated>
  <id>http://www.itbuild.cn/</id>
  
  <author>
    <name>DuanChaojie</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>MySql高级/18.MySql高级之主从复制</title>
    <link href="http://www.itbuild.cn/2020/12/19/MySql%E9%AB%98%E7%BA%A7/18.MySql%E9%AB%98%E7%BA%A7%E4%B9%8B%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/"/>
    <id>http://www.itbuild.cn/2020/12/19/MySql%E9%AB%98%E7%BA%A7/18.MySql%E9%AB%98%E7%BA%A7%E4%B9%8B%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/</id>
    <published>2020-12-19T13:45:41.714Z</published>
    <updated>2020-12-19T14:02:52.405Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>何日请缨提锐旅，一鞭直渡清河洛。却归来、再续汉阳游，骑黄鹤。</p><p align="right">——岳飞《满江红》</p><a id="more"></a><h2 id="MySql高级之主从复制"><a href="#MySql高级之主从复制" class="headerlink" title="MySql高级之主从复制"></a>MySql高级之主从复制</h2><h3 id="1-复制概述"><a href="#1-复制概述" class="headerlink" title="1. 复制概述"></a>1. 复制概述</h3><blockquote><p>复制是指将主数据库的DDL 和 DML 操作通过二进制日志传到从库服务器中，然后在从库上对这些日志重新执行（也叫重做），从而使得从库和主库的数据保持同步。</p><p><code>MySQL支持一台主库同时向多台从库进行复制， 从库同时也可以作为其他从服务器的主库，实现链状复制。</code></p></blockquote><h3 id="2-复制原理"><a href="#2-复制原理" class="headerlink" title="2. 复制原理"></a>2. 复制原理</h3><p>MySQL 的主从复制原理如下。</p><p><img src="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/1.jpg" alt="1554423698190"> </p><blockquote><p>从上层来看，复制分成三步：</p><ul><li><p><code>Master 主库在事务提交时，会把数据变更作为时间 Events 记录在二进制日志文件 Binlog 中。</code></p></li><li><p><code>主库推送二进制日志文件 Binlog 中的日志事件到从库的中继日志 Relay Log 。</code></p></li><li><p><code>slave重做中继日志中的事件，将改变反映它自己的数据。</code></p></li></ul></blockquote><h3 id="3-复制优势"><a href="#3-复制优势" class="headerlink" title="3. 复制优势"></a>3. 复制优势</h3><blockquote><p>MySQL 复制的有点主要包含以下三个方面：</p><ul><li><p><code>主库出现问题，可以快速切换到从库提供服务。</code></p></li><li><p><code>可以在从库上执行查询操作，从主库中更新，实现读写分离，降低主库的访问压力。</code></p></li><li><p><code>可以在从库中执行备份，以避免备份期间影响主库的服务。</code></p></li></ul></blockquote><h3 id="4-搭建步骤"><a href="#4-搭建步骤" class="headerlink" title="4. 搭建步骤"></a>4. 搭建步骤</h3><h4 id="4-1-master"><a href="#4-1-master" class="headerlink" title="4.1 master"></a>4.1 master</h4><blockquote><ol><li><code>在master 的配置文件（/usr/my.cnf）中，配置如下内容：</code></li></ol></blockquote><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#mysql 服务ID,保证整个集群环境中唯一</span></span><br><span class="line"><span class="meta">server-id</span>=<span class="string">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#mysql binlog 日志的存储路径和文件名</span></span><br><span class="line"><span class="meta">log-bin</span>=<span class="string">/var/lib/mysql/mysqlbin</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#错误日志,默认已经开启</span></span><br><span class="line"><span class="comment">#log-err</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#mysql的安装目录</span></span><br><span class="line"><span class="comment">#basedir</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#mysql的临时目录</span></span><br><span class="line"><span class="comment">#tmpdir</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#mysql的数据存放目录</span></span><br><span class="line"><span class="comment">#datadir</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#是否只读,1 代表只读, 0 代表读写</span></span><br><span class="line"><span class="meta">read-only</span>=<span class="string">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#忽略的数据, 指不需要同步的数据库</span></span><br><span class="line"><span class="meta">binlog-ignore-db</span>=<span class="string">mysql</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#指定同步的数据库</span></span><br><span class="line"><span class="meta">binlog-do-db</span>=<span class="string">mysql_senior</span></span><br></pre></td></tr></table></figure><blockquote><ol start="2"><li>执行完毕之后，需要重启Mysql：</li></ol></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service mysql restart;</span><br></pre></td></tr></table></figure><blockquote><ol start="3"><li>创建同步数据的账户，并且进行授权操作：</li></ol></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">grant</span> <span class="keyword">replication</span> <span class="keyword">slave</span> <span class="keyword">on</span> *.* <span class="keyword">to</span> <span class="string">'justweb'</span>@<span class="string">'192.168.68.102'</span> <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">'justweb'</span>;</span><br><span class="line"><span class="keyword">flush</span> <span class="keyword">privileges</span>;</span><br></pre></td></tr></table></figure><blockquote><ol start="4"><li>查看master状态：</li></ol></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">master</span> <span class="keyword">status</span>;</span><br></pre></td></tr></table></figure><p><img src="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/1554477759735.png" alt="1554477759735"> </p><blockquote><p>字段含义：</p><ul><li><code>File : 从哪个日志文件开始推送日志文件</code> </li><li><code>Position ： 从哪个位置开始推送日志</code></li><li><code>Binlog_Ignore_DB : 指定不需要同步的数据库</code></li></ul></blockquote><h4 id="4-2-slave"><a href="#4-2-slave" class="headerlink" title="4.2  slave"></a>4.2  slave</h4><blockquote><ol><li>在 slave 端配置文件中，配置如下内容：</li></ol></blockquote><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#mysql服务端ID,唯一</span></span><br><span class="line"><span class="meta">server-id</span>=<span class="string">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#指定binlog日志</span></span><br><span class="line"><span class="meta">log-bin</span>=<span class="string">/var/lib/mysql/mysqlbin</span></span><br></pre></td></tr></table></figure><blockquote><ol start="2"><li>执行完毕之后，需要重启Mysql：</li></ol></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service mysql restart;</span><br></pre></td></tr></table></figure><blockquote><ol start="3"><li>执行如下指令 ：</li></ol></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">change</span> <span class="keyword">master</span> <span class="keyword">to</span> master_host= <span class="string">'192.168.68.101'</span>, master_user=<span class="string">'justweb'</span>, master_password=<span class="string">'justweb'</span>, master_log_file=<span class="string">'mysqlbin.000001'</span>, master_log_pos=<span class="number">413</span>;</span><br></pre></td></tr></table></figure><blockquote><p>指定当前从库对应的主库的IP地址，用户名，密码，从哪个日志文件开始的那个位置开始同步推送日志。</p><ol start="4"><li>开启同步操作</li></ol></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">start</span> <span class="keyword">slave</span>;</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">slave</span> <span class="keyword">status</span>;</span><br></pre></td></tr></table></figure><p><img src="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/image-20200731180137143.png" alt="image-20200731180137143"> </p><blockquote><ol start="5"><li>停止同步操作</li></ol></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stop slave;</span><br></pre></td></tr></table></figure><h4 id="4-3-验证同步操作"><a href="#4-3-验证同步操作" class="headerlink" title="4.3 验证同步操作"></a>4.3 验证同步操作</h4><blockquote><ol><li>在主库中创建数据库，创建表，并插入数据 ：</li></ol></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> mysql_senior <span class="keyword">default</span> <span class="keyword">charset</span>=utf8mb4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> mysql_senior;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">user</span>(</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">not</span> <span class="literal">null</span> auto_increment,</span><br><span class="line"><span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">sex <span class="built_in">varchar</span>(<span class="number">1</span>),</span><br><span class="line">primary <span class="keyword">key</span> (<span class="keyword">id</span>)</span><br><span class="line">)<span class="keyword">engine</span>=<span class="keyword">innodb</span> <span class="keyword">default</span> <span class="keyword">charset</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span>(<span class="keyword">id</span>,<span class="keyword">name</span>,sex) <span class="keyword">values</span>(<span class="literal">null</span>,<span class="string">'Tom'</span>,<span class="string">'1'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span>(<span class="keyword">id</span>,<span class="keyword">name</span>,sex) <span class="keyword">values</span>(<span class="literal">null</span>,<span class="string">'Trigger'</span>,<span class="string">'0'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span>(<span class="keyword">id</span>,<span class="keyword">name</span>,sex) <span class="keyword">values</span>(<span class="literal">null</span>,<span class="string">'Dawn'</span>,<span class="string">'1'</span>);</span><br></pre></td></tr></table></figure><blockquote><ol start="2"><li>在从库中查询数据，进行验证 ：</li><li>在从库中，可以查看到刚才创建的数据库：</li></ol></blockquote><p><img src="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/1554544658640.png" alt="1554544658640"> </p><blockquote><p>在该数据库中，查询user表中的数据：</p></blockquote><p><img src="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/1554544679538.png" alt="1554544679538"> </p><h2 id="☆"><a href="#☆" class="headerlink" title="☆"></a>☆</h2>]]></content>
    
    
    <summary type="html">&lt;p&gt;何日请缨提锐旅，一鞭直渡清河洛。却归来、再续汉阳游，骑黄鹤。&lt;/p&gt;
&lt;p align=&quot;right&quot;&gt;——岳飞《满江红》&lt;/p&gt;</summary>
    
    
    
    <category term="MySql高级" scheme="http://www.itbuild.cn/categories/MySql%E9%AB%98%E7%BA%A7/"/>
    
    
  </entry>
  
  <entry>
    <title>MySql高级/17.MySql高级之常用工具</title>
    <link href="http://www.itbuild.cn/2020/12/19/MySql%E9%AB%98%E7%BA%A7/17.MySql%E9%AB%98%E7%BA%A7%E4%B9%8B%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/"/>
    <id>http://www.itbuild.cn/2020/12/19/MySql%E9%AB%98%E7%BA%A7/17.MySql%E9%AB%98%E7%BA%A7%E4%B9%8B%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/</id>
    <published>2020-12-19T13:45:41.713Z</published>
    <updated>2020-12-19T14:02:52.215Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>少年不识愁滋味，爱上层楼。爱上层楼，为赋新词强说愁。</p><p align="right">——辛弃疾《丑奴儿》</p><a id="more"></a><h2 id="MySql高级之常用工具"><a href="#MySql高级之常用工具" class="headerlink" title="MySql高级之常用工具"></a>MySql高级之常用工具</h2><h3 id="1-mysql"><a href="#1-mysql" class="headerlink" title="1. mysql"></a>1. mysql</h3><blockquote><p>该mysql不是指mysql服务，而是指mysql的客户端工具。</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 语法 ：</span></span><br><span class="line">mysql [options] [database]</span><br></pre></td></tr></table></figure><h4 id="1-1-连接选项"><a href="#1-1-连接选项" class="headerlink" title="1.1 连接选项"></a>1.1 连接选项</h4><blockquote><ol><li><code>-u, --user=name            指定用户名</code></li><li><code>-p, --password[=name]    指定密码</code></li><li><code>-h, --host=name            指定服务器IP或域名</code></li><li><code>-P, --port=#            指定连接端口</code></li></ol></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">示例 ：</span></span><br><span class="line">mysql -h 127.0.0.1 -P 3306 -u root -p</span><br><span class="line">mysql -h127.0.0.1 -P3306 -uroot -p2143</span><br></pre></td></tr></table></figure><h4 id="1-2-执行选项"><a href="#1-2-执行选项" class="headerlink" title="1.2 执行选项"></a>1.2 执行选项</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-e, <span class="comment">--execute=name执行SQL语句并退出</span></span><br></pre></td></tr></table></figure><p>此选项可以在Mysql客户端执行SQL语句，而不用连接到MySQL数据库再执行，对于一些批处理脚本，这种方式尤其方便。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p2143 db01 -e "select * from tb_book";</span><br></pre></td></tr></table></figure><p><img src="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/1555325632715.png" alt="1555325632715"> </p><h3 id="2-mysqladmin"><a href="#2-mysqladmin" class="headerlink" title="2. mysqladmin"></a>2. mysqladmin</h3><blockquote><p><code>mysqladmin 是一个执行管理操作的客户端程序。</code>可以用它来检查服务器的配置和当前状态、创建并删除数据库等。</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">可以通过以下指令查看帮助文档</span><br><span class="line">mysqladmin <span class="comment">--help</span></span><br></pre></td></tr></table></figure><p><img src="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/1555326108697.png" alt="1555326108697"> </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">示例 ：</span></span><br><span class="line">mysqladmin -uroot -p2143 create 'test01';  </span><br><span class="line">mysqladmin -uroot -p2143 drop 'test01';</span><br><span class="line">mysqladmin -uroot -p2143 version;</span><br></pre></td></tr></table></figure><h3 id="3-mysqlbinlog"><a href="#3-mysqlbinlog" class="headerlink" title="3. mysqlbinlog"></a>3. mysqlbinlog</h3><blockquote><p>由于服务器生成的二进制日志文件以二进制格式保存，所以如果想要检查这些文本的文本格式，就会使用到mysqlbinlog 日志管理工具。</p></blockquote><p>语法 ：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysqlbinlog [options]  log-files1 log-files2 ...</span><br><span class="line"></span><br><span class="line">选项：</span><br><span class="line"></span><br><span class="line">-d, <span class="comment">--database=name : 指定数据库名称，只列出指定的数据库相关操作。</span></span><br><span class="line">-o, <span class="comment">--offset=# : 忽略掉日志中的前n行命令。</span></span><br><span class="line">-r,<span class="comment">--result-file=name : 将输出的文本格式日志输出到指定文件。</span></span><br><span class="line">-s, <span class="comment">--short-form : 显示简单格式， 省略掉一些信息。</span></span><br><span class="line"><span class="comment">--start-datatime=date1  --stop-datetime=date2 : 指定日期间隔内的所有日志。</span></span><br><span class="line"><span class="comment">--start-position=pos1 --stop-position=pos2 : 指定位置间隔内的所有日志。</span></span><br></pre></td></tr></table></figure><h3 id="4-mysqldump"><a href="#4-mysqldump" class="headerlink" title="4. mysqldump"></a>4. mysqldump</h3><blockquote><p>mysqldump 客户端工具用来备份数据库或在不同数据库之间进行数据迁移。备份内容包含创建表，及插入表的SQL语句。语法 ：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mysqldump [options] db_name [tables]</span><br><span class="line"></span><br><span class="line">mysqldump [options] --database&#x2F;-B db1 [db2 db3...]</span><br><span class="line"></span><br><span class="line">mysqldump [options] --all-databases&#x2F;-A</span><br></pre></td></tr></table></figure><h5 id="4-1-连接选项"><a href="#4-1-连接选项" class="headerlink" title="4.1 连接选项"></a>4.1 连接选项</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">参数 ： </span><br><span class="line">-u, <span class="comment">--user=name指定用户名</span></span><br><span class="line">-p, <span class="comment">--password[=name]指定密码</span></span><br><span class="line">-h, <span class="comment">--host=name指定服务器IP或域名</span></span><br><span class="line">-P, <span class="comment">--port=#指定连接端口</span></span><br></pre></td></tr></table></figure><h5 id="4-2-输出内容选项"><a href="#4-2-输出内容选项" class="headerlink" title="4.2 输出内容选项"></a>4.2 输出内容选项</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">参数：</span><br><span class="line">--add-drop-database在每个数据库创建语句前加上 Drop database 语句</span><br><span class="line">--add-drop-table在每个表创建语句前加上 Drop table 语句 , 默认开启 ; 不开启 (--skip-add-drop-table)</span><br><span class="line"></span><br><span class="line">-n, --no-create-db不包含数据库的创建语句</span><br><span class="line">-t, --no-create-info不包含数据表的创建语句</span><br><span class="line">-d --no-data不包含数据</span><br><span class="line"></span><br><span class="line"> -T, --tab&#x3D;name自动生成两个文件：一个.sql文件，创建表结构的语句；</span><br><span class="line"> 一个.txt文件，数据文件，相当于select into outfile</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">示例 ： </span></span><br><span class="line">mysqldump -uroot -p2143 db01 tb_book --add-drop-database --add-drop-table &gt; a</span><br><span class="line"></span><br><span class="line">mysqldump -uroot -p2143 -T /tmp test city</span><br></pre></td></tr></table></figure><h3 id="5-mysqlimport-source"><a href="#5-mysqlimport-source" class="headerlink" title="5. mysqlimport/source"></a>5. mysqlimport/source</h3><blockquote><p><code>mysqlimport 是客户端数据导入工具，用来导入mysqldump 加 -T 参数后导出的文本文件。</code></p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">语法：</span></span><br><span class="line">mysqlimport [options]  db_name  textfile1  [textfile2...]</span><br><span class="line"><span class="meta">#</span><span class="bash">示例：</span></span><br><span class="line">mysqlimport -uroot -p2143 test /tmp/city.txt</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">如果需要导入sql文件,可以使用mysql中的<span class="built_in">source</span> 指令 : </span></span><br><span class="line">source /root/tb_book.sql</span><br></pre></td></tr></table></figure><h3 id="6-mysqlshow"><a href="#6-mysqlshow" class="headerlink" title="6. mysqlshow"></a>6. mysqlshow</h3><blockquote><p>mysqlshow 客户端对象查找工具，用来很快地查找存在哪些数据库、数据库中的表、表中的列或者索引。</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 语法</span></span><br><span class="line">mysqlshow [options] [db_name [table_name [col_name]]]</span><br></pre></td></tr></table></figure><blockquote><p>参数：</p><ol><li><code>--count        显示数据库及表的统计信息（数据库，表 均可以不指定）</code></li><li><code>-i            显示指定数据库或者指定表的状态信息</code></li></ol></blockquote><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">查询每个数据库的表的数量及表中记录的数量</span></span><br><span class="line">mysqlshow -uroot -p2143 --count</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">查询<span class="built_in">test</span>库中每个表中的字段书，及行数</span></span><br><span class="line">mysqlshow -uroot -p2143 test --count</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">查询<span class="built_in">test</span>库中book表的详细情况</span></span><br><span class="line">mysqlshow -uroot -p2143 test book --count</span><br></pre></td></tr></table></figure><h2 id="☆"><a href="#☆" class="headerlink" title="☆"></a>☆</h2>]]></content>
    
    
    <summary type="html">&lt;p&gt;少年不识愁滋味，爱上层楼。爱上层楼，为赋新词强说愁。&lt;/p&gt;
&lt;p align=&quot;right&quot;&gt;——辛弃疾《丑奴儿》&lt;/p&gt;</summary>
    
    
    
    <category term="MySql高级" scheme="http://www.itbuild.cn/categories/MySql%E9%AB%98%E7%BA%A7/"/>
    
    
  </entry>
  
  <entry>
    <title>MySql高级/16.MySql高级之日志</title>
    <link href="http://www.itbuild.cn/2020/12/19/MySql%E9%AB%98%E7%BA%A7/16.MySql%E9%AB%98%E7%BA%A7%E4%B9%8B%E6%97%A5%E5%BF%97/"/>
    <id>http://www.itbuild.cn/2020/12/19/MySql%E9%AB%98%E7%BA%A7/16.MySql%E9%AB%98%E7%BA%A7%E4%B9%8B%E6%97%A5%E5%BF%97/</id>
    <published>2020-12-19T13:45:41.711Z</published>
    <updated>2020-12-19T14:02:52.126Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>生怕离怀别苦，多少事、欲说还休。新来瘦，非干病酒，不是悲秋。</p><p align="right">——李清照《凤凰台上忆吹箫》</p><a id="more"></a>## MySql高级之日志<blockquote><p>在任何一种数据库中，都会有各种各样的日志，记录着数据库工作的方方面面，以帮助数据库管理员追踪数据库曾经发生过的各种事件。MySQL 也不例外，<code>在 MySQL 中，有 4 种不同的日志，分别是错误日志、二进制日志（BINLOG 日志）、查询日志和慢查询日志，</code>这些日志记录着数据库在不同方面的踪迹。</p></blockquote><h3 id="1-错误日志"><a href="#1-错误日志" class="headerlink" title="1. 错误日志"></a>1. 错误日志</h3><p>错误日志是 MySQL 中最重要的日志之一，它记录了当 mysqld 启动和停止时，以及服务器在运行过程中发生任何严重错误时的相关信息。当数据库出现任何故障导致无法正常使用时，可以首先查看此日志。</p><p>该日志是默认开启的 ， <code>默认存放目录为 mysql 的数据目录（var/lib/mysql）, 默认的日志文件名为  hostname.err（hostname是主机名）。</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查看日志位置指令 ： </span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">'log_error%'</span>;</span><br></pre></td></tr></table></figure><p><img src="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/image-20200731110017398.png" alt="image-20200731110017398"> </p><blockquote><p>查看日志内容 ： </p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tail -f /var/lib/mysql/hadoop.err</span><br></pre></td></tr></table></figure><p><img src="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/image-20200731110307436.png" alt="image-20200731110307436"></p><h3 id="2-二进制日志"><a href="#2-二进制日志" class="headerlink" title="2. 二进制日志"></a>2. 二进制日志</h3><blockquote><p><code>二进制日志（BINLOG）记录了所有的 DDL（数据定义语言）语句和 DML（数据操纵语言）语句，但是不包括数据查询语句。</code>此日志对于灾难时的数据恢复起着极其重要的作用，<code>MySQL的主从复制， 就是通过该binlog实现的。</code></p><ol><li><p>二进制日志，默认情况下是没有开启的，需要到MySQL的配置文件中开启，并配置MySQL日志的格式。 </p></li><li><p><code>配置文件位置 : /usr/my.cnf</code></p></li><li><p>日志存放位置 : 配置时，给定了文件名但是没有指定路径，日志默认写入Mysql的数据目录。</p></li></ol></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">配置开启binlog日志， 日志的文件前缀为mysqlbin</span></span><br><span class="line"><span class="meta">#</span><span class="bash">生成的文件名如 mysqlbin.000001,mysqlbin.000002</span></span><br><span class="line">log_bin=mysqlbin</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">配置二进制日志的格式</span></span><br><span class="line">binlog_format=STATEMENT</span><br></pre></td></tr></table></figure><h4 id="2-1-日志格式"><a href="#2-1-日志格式" class="headerlink" title="2.1 日志格式"></a>2.1 日志格式</h4><h5 id="STATEMENT"><a href="#STATEMENT" class="headerlink" title="STATEMENT"></a>STATEMENT</h5><blockquote><p><code>该日志格式在日志文件中记录的都是SQL语句（statement）</code>，每一条对数据进行修改的SQL都会记录在日志文件中，通过Mysql提供的mysqlbinlog工具，可以清晰的查看到每条语句的文本。主从复制的时候，从库（slave）会将日志解析为原文本，并在从库重新执行一次。</p></blockquote><h5 id="ROW"><a href="#ROW" class="headerlink" title="ROW"></a>ROW</h5><blockquote><p><code>该日志格式在日志文件中记录的是每一行的数据变更，而不是记录SQL语句。</code>比如，<code>执行SQL语句 ： update tb_book set status=&#39;1&#39; , 如果是STATEMENT 日志格式，在日志中会记录一行SQL文件； 如果是ROW，由于是对全表进行更新，也就是每一行记录都会发生变更，ROW 格式的日志中会记录每一行的数据变更。</code></p></blockquote><h5 id="MIXED"><a href="#MIXED" class="headerlink" title="MIXED"></a>MIXED</h5><blockquote><p>这是目前MySQL默认的日志格式，即混合了STATEMENT 和 ROW两种格式。<code>默认情况下采用STATEMENT，但是在一些特殊情况下采用ROW来进行记录。</code>MIXED 格式能尽量利用两种模式的优点，而避开他们的缺点。</p></blockquote><h4 id="2-2-日志读取"><a href="#2-2-日志读取" class="headerlink" title="2.2 日志读取"></a>2.2 日志读取</h4><blockquote><p><code>由于日志以二进制方式存储，不能直接读取，需要用mysqlbinlog工具来查看</code></p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">语法如下 </span></span><br><span class="line">mysqlbinlog log-file；</span><br></pre></td></tr></table></figure><h5 id="查看STATEMENT格式日志"><a href="#查看STATEMENT格式日志" class="headerlink" title="查看STATEMENT格式日志"></a>查看STATEMENT格式日志</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 执行插入语句 </span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> city <span class="keyword">values</span>(<span class="number">66</span>,<span class="string">'河南'</span>,<span class="number">55</span>);</span><br></pre></td></tr></table></figure><blockquote><p> 查看日志文件 ：</p></blockquote><p><img src="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/image-20200731111434308.png" alt="image-20200731111434308"> </p><blockquote><ol><li><p><code>mysqlbin.index : 该文件是日志索引文件 ， 记录日志的文件名；</code></p></li><li><p><code>mysqlbing.000001 ：日志文件</code></p></li></ol></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">查看日志内容 ：</span></span><br><span class="line">mysqlbinlog mysqlbing.000001；</span><br></pre></td></tr></table></figure><p><img src="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/image-20200731111656035.png" alt="image-20200731111656035"> </p><h5 id="查看ROW格式日志"><a href="#查看ROW格式日志" class="headerlink" title="查看ROW格式日志"></a>查看ROW格式日志</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">配置开启binlog日志， 日志的文件前缀为 mysqlbin</span></span><br><span class="line"><span class="meta">#</span><span class="bash">生成的文件名如 : mysqlbin.000001,mysqlbin.000002</span></span><br><span class="line">log_bin=mysqlbin</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">配置二进制日志的格式</span></span><br><span class="line">binlog_format=ROW</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 插入数据 :</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> city <span class="keyword">values</span>(<span class="number">67</span>,<span class="string">'周口'</span>,<span class="number">55</span>);</span><br></pre></td></tr></table></figure><blockquote><p><code>如果日志格式是 ROW , 直接查看数据 , 是查看不懂的 ; 可以在mysqlbinlog 后面加上参数 -vv</code>  </p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqlbinlog -vv mysqlbin.000002</span><br></pre></td></tr></table></figure><p><img src="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/image-20200731112017880.png" alt="image-20200731112017880"> </p><h4 id="2-3-日志删除"><a href="#2-3-日志删除" class="headerlink" title="2.3 日志删除"></a>2.3 日志删除</h4><blockquote><p>对于比较繁忙的系统，由于每天生成日志量大 ，这些日志如果长时间不清楚，将会占用大量的磁盘空间。下面我们将会讲解几种删除日志的常见方法 </p></blockquote><h5 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a><strong>方式一</strong></h5><blockquote><p><code>通过 Reset Master 指令删除全部 binlog 日志</code>，删除之后，日志编号，将从 xxxx.000001重新开始 。</p><p>查询之前 ，先查询下日志文件 ： </p></blockquote><p><img src="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/1554118609489.png" alt="1554118609489">   </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">执行删除日志指令</span></span><br><span class="line">Reset Master</span><br></pre></td></tr></table></figure><blockquote><p>执行之后， 查看日志文件 </p></blockquote><p><img src="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/1554118675264.png" alt="1554118675264"> </p><h5 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h5><blockquote><p>执行指令 <code>purge  master logs to &#39;mysqlbin.******&#39;</code> ，该命令将删除  <code>******</code> 编号之前的所有日志。 </p></blockquote><h5 id="方式三"><a href="#方式三" class="headerlink" title="方式三"></a>方式三</h5><blockquote><p>执行指令 <code>purge master logs before &#39;yyyy-mm-dd hh24:mi:ss&#39;</code> ，<code>该命令将删除日志为 &quot;yyyy-mm-dd hh24:mi:ss&quot; 之前产生的所有日志 。</code></p></blockquote><h5 id="方式四"><a href="#方式四" class="headerlink" title="方式四"></a>方式四</h5><blockquote><p>设置参数 –expire_logs_days=# ，此参数的含义是设置日志的过期天数， 过了指定的天数后日志将会被自动删除，这样将<code>有利于减少DBA 管理日志的工作量。</code></p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">配置如下 </span></span><br><span class="line">log_bin=mysqlbin</span><br><span class="line">binlog_format=ROW</span><br><span class="line">--expire_logs_days=3</span><br></pre></td></tr></table></figure><h3 id="3-查询日志"><a href="#3-查询日志" class="headerlink" title="3. 查询日志"></a>3. 查询日志</h3><blockquote><p>查询日志中记录了客户端的所有操作语句，而二进制日志不包含查询数据的SQL语句。</p><p>默认情况下， 查询日志是未开启的。如果需要开启查询日志，可以<code>在 mysql 的配置文件 /usr/my.cnf 中配置如下内容 ：</code> </p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">该选项用来开启查询日志 ， 可选值 ： 0 或者 1 ； 0 代表关闭， 1 代表开启 </span></span><br><span class="line">general_log=1</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">设置日志的文件名 ， 如果没有指定， 默认的文件名为 host_name.log </span></span><br><span class="line">general_log_file=mysql_query.log</span><br></pre></td></tr></table></figure><blockquote><p>配置完毕之后，在数据库执行以下操作 ：</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> city;</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> city <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">66</span>;</span><br></pre></td></tr></table></figure><blockquote><p>执行完毕之后， 再次来查询日志文件 ： </p></blockquote><p><img src="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/image-20200731113058933.png" alt="image-20200731113058933"></p><h3 id="4-慢查询日志"><a href="#4-慢查询日志" class="headerlink" title="4. 慢查询日志"></a>4. 慢查询日志</h3><blockquote><p>慢查询日志记录了所有执行时间超过参数 long_query_time 设置值并且扫描记录数不小于 min_examined_row_limit 的所有的SQL语句的日志。<code>long_query_time 默认为 10 秒，最小为 0， 精度可以到微秒。</code></p></blockquote><h4 id="4-1-文件位置和格式"><a href="#4-1-文件位置和格式" class="headerlink" title="4.1 文件位置和格式"></a>4.1 文件位置和格式</h4><blockquote><p>慢查询日志默认是关闭的 。可以通过两个参数来控制慢查询日志 ：</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 该参数用来控制慢查询日志是否开启， 可取值： 1 和 0 ， 1 代表开启， 0 代表关闭</span></span><br><span class="line">slow_query_log=1 </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 该参数用来指定慢查询日志的文件名</span></span><br><span class="line">slow_query_log_file=slow_query.log</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 该选项用来配置查询的时间限制， 超过这个时间将认为值慢查询， 将需要进行日志记录， 默认10s</span></span><br><span class="line">long_query_time=10</span><br></pre></td></tr></table></figure><h4 id="4-2-日志的读取"><a href="#4-2-日志的读取" class="headerlink" title="4.2 日志的读取"></a>4.2 日志的读取</h4><blockquote><p>和错误日志、查询日志一样，慢查询日志记录的格式也是纯文本，可以被直接读取。</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询long_query_time 的值。</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">'long%'</span>;</span><br></pre></td></tr></table></figure><p><img src="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/image-20200731113609223.png" alt="image-20200731113609223"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 执行查询操作</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> tb_user_dm;</span><br></pre></td></tr></table></figure><p><img src="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/image-20200731113723922.png" alt="image-20200731113723922"></p><blockquote><p>由于该语句执行时间很短，为0.69s ， 所以不会记录在慢查询日志中。</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> tb_user_dm <span class="keyword">limit</span> <span class="number">900000</span>,<span class="number">10</span>;</span><br></pre></td></tr></table></figure><p><img src="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/image-20200731113846295.png" alt="image-20200731113846295"> </p><blockquote><p>该SQL语句 ， 执行时长为 4.79s ，超过2s ， 所以会记录在慢查询日志文件中。</p><p>查看慢查询日志文件</p><ul><li><code>直接通过cat 指令查询该日志文件 ：</code> </li></ul></blockquote><p><img src="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/image-20200731113954392.png" alt="image-20200731113954392"> </p><blockquote><p>如果慢查询日志内容很多， 直接查看文件，比较麻烦， <code>这个时候可以借助于mysql自带的 mysqldumpslow 工具， 来对慢查询日志进行分类汇总。</code> </p></blockquote><h2 id="☆"><a href="#☆" class="headerlink" title="☆"></a>☆</h2>]]></content>
    
    
    <summary type="html">&lt;p&gt;生怕离怀别苦，多少事、欲说还休。新来瘦，非干病酒，不是悲秋。&lt;/p&gt;
&lt;p align=&quot;right&quot;&gt;——李清照《凤凰台上忆吹箫》&lt;/p&gt;</summary>
    
    
    
    <category term="MySql高级" scheme="http://www.itbuild.cn/categories/MySql%E9%AB%98%E7%BA%A7/"/>
    
    
  </entry>
  
  <entry>
    <title>MySql高级/15.MySql高级之常用SQL技巧☆</title>
    <link href="http://www.itbuild.cn/2020/12/19/MySql%E9%AB%98%E7%BA%A7/15.MySql%E9%AB%98%E7%BA%A7%E4%B9%8B%E5%B8%B8%E7%94%A8SQL%E6%8A%80%E5%B7%A7%E2%98%86/"/>
    <id>http://www.itbuild.cn/2020/12/19/MySql%E9%AB%98%E7%BA%A7/15.MySql%E9%AB%98%E7%BA%A7%E4%B9%8B%E5%B8%B8%E7%94%A8SQL%E6%8A%80%E5%B7%A7%E2%98%86/</id>
    <published>2020-12-19T13:45:41.709Z</published>
    <updated>2020-12-19T14:02:52.014Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>惜别伤离方寸乱，忘了临行，酒盏深和浅。</p><p align="right">——李清照《蝶恋花》</p><a id="more"></a>## MySql高级之常用SQL技巧☆<h3 id="1-SQL执行顺序"><a href="#1-SQL执行顺序" class="headerlink" title="1. SQL执行顺序"></a>1. SQL执行顺序</h3><blockquote><p>编写顺序</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span></span><br><span class="line">&lt;<span class="keyword">select</span> <span class="keyword">list</span>&gt;</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">&lt;left_table&gt; &lt;join_type&gt;</span><br><span class="line"><span class="keyword">join</span> </span><br><span class="line">&lt;right_table&gt; <span class="keyword">ON</span> &lt;join_condition&gt;</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">&lt;where_condition&gt;</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">&lt;group_by_list&gt;</span><br><span class="line"><span class="keyword">having</span></span><br><span class="line">&lt;having_condition&gt;</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span></span><br><span class="line">&lt;order_by_condition&gt;</span><br><span class="line"><span class="keyword">limit</span></span><br><span class="line">&lt;limit_params&gt;</span><br></pre></td></tr></table></figure><blockquote><p><code>执行顺序</code></p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">from &lt;left_table&gt;</span><br><span class="line">on &lt;join_condition&gt;</span><br><span class="line">&lt;join_type&gt;join&lt;right_table&gt;</span><br><span class="line">where&lt;where_condition&gt;</span><br><span class="line">group by &lt;group_by_list&gt;</span><br><span class="line">having&lt;having_condition&gt;</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span>&lt;<span class="keyword">select</span> <span class="keyword">list</span>&gt;</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> &lt;order_by_condition&gt;</span><br><span class="line"><span class="keyword">limit</span> &lt;limit_params&gt;</span><br></pre></td></tr></table></figure><h3 id="2-正则表达式使用"><a href="#2-正则表达式使用" class="headerlink" title="2. 正则表达式使用"></a>2. 正则表达式使用</h3><blockquote><p><code>正则表达式（Regular Expression）是指一个用来描述或者匹配一系列符合某个句法规则的字符串的单个字符串。</code></p></blockquote><table><thead><tr><th>符号</th><th>含义</th></tr></thead><tbody><tr><td><code>^</code></td><td><code>在字符串开始处进行匹配</code></td></tr><tr><td><code>$</code></td><td><code>在字符串末尾处进行匹配</code></td></tr><tr><td><code>.</code></td><td><code>匹配任意单个字符, 包括换行符</code></td></tr><tr><td><code>[...]</code></td><td><code>匹配出括号内的任意字符</code></td></tr><tr><td><code>[^...]</code></td><td><code>匹配不出括号内的任意字符</code></td></tr><tr><td>a*</td><td>匹配零个或者多个a(包括空串)</td></tr><tr><td>a+</td><td>匹配一个或者多个a(不包括空串)</td></tr><tr><td>a?</td><td>匹配零个或者一个a</td></tr><tr><td>a1|a2</td><td>匹配a1或a2</td></tr><tr><td>a(m)</td><td>匹配m个a</td></tr><tr><td>a(m,)</td><td>至少匹配m个a</td></tr><tr><td>a(m,n)</td><td>匹配m个a 到 n个a</td></tr><tr><td>a(,n)</td><td>匹配0到n个a</td></tr><tr><td>(…)</td><td>将模式元素组成单一元素</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> <span class="keyword">name</span> regexp <span class="string">'^T'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> <span class="keyword">name</span> regexp <span class="string">'2$'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> <span class="keyword">name</span> regexp <span class="string">'[uvw]'</span>;</span><br></pre></td></tr></table></figure><h3 id="3-MySQL-常用函数"><a href="#3-MySQL-常用函数" class="headerlink" title="3. MySQL 常用函数"></a>3. MySQL 常用函数</h3><h4 id="3-1-数字函数"><a href="#3-1-数字函数" class="headerlink" title="3.1 数字函数"></a>3.1 数字函数</h4><table><thead><tr><th>函数名称</th><th>作 用</th></tr></thead><tbody><tr><td><code>ABS</code></td><td><code>求绝对值</code></td></tr><tr><td><code>SQRT</code></td><td><code>求二次方根</code></td></tr><tr><td><code>MOD</code></td><td><code>求余数</code></td></tr><tr><td><code>CEIL 和 CEILING</code></td><td><code>两个函数功能相同，都是返回不小于参数的最小整数，即向上取整</code></td></tr><tr><td><code>FLOOR</code></td><td><code>向下取整，返回值转化为一个BIGINT</code></td></tr><tr><td><code>RAND</code></td><td><code>生成一个0~1之间的随机数，传入整数参数是，用来产生重复序列</code></td></tr><tr><td><code>ROUND</code></td><td><code>对所传参数进行四舍五入</code></td></tr><tr><td>SIGN</td><td>返回参数的符号</td></tr><tr><td>POW 和 POWER</td><td>两个函数的功能相同，都是所传参数的次方的结果值</td></tr><tr><td>SIN</td><td>求正弦值</td></tr><tr><td>ASIN</td><td>求反正弦值，与函数 SIN 互为反函数</td></tr><tr><td>COS</td><td>求余弦值</td></tr><tr><td>ACOS</td><td>求反余弦值，与函数 COS 互为反函数</td></tr><tr><td>TAN</td><td>求正切值</td></tr><tr><td>ATAN</td><td>求反正切值，与函数 TAN 互为反函数</td></tr><tr><td>COT</td><td>求余切值</td></tr></tbody></table><h4 id="3-2-字符串函数"><a href="#3-2-字符串函数" class="headerlink" title="3.2 字符串函数"></a>3.2 字符串函数</h4><table><thead><tr><th>函数名称</th><th>作 用</th></tr></thead><tbody><tr><td><code>LENGTH</code></td><td><code>计算字符串长度函数，返回字符串的字节长度</code></td></tr><tr><td><code>CONCAT</code></td><td><code>合并字符串函数，返回结果为连接参数产生的字符串，参数可以使一个或多个</code></td></tr><tr><td><code>INSERT</code></td><td><code>替换字符串函数</code></td></tr><tr><td><code>LOWER</code></td><td><code>将字符串中的字母转换为小写</code></td></tr><tr><td><code>UPPER</code></td><td><code>将字符串中的字母转换为大写</code></td></tr><tr><td><code>LEFT</code></td><td><code>从左侧字截取符串，返回字符串左边的若干个字符</code></td></tr><tr><td><code>RIGHT</code></td><td><code>从右侧字截取符串，返回字符串右边的若干个字符</code></td></tr><tr><td><code>TRIM</code></td><td><code>删除字符串左右两侧的空格</code></td></tr><tr><td>REPLACE</td><td>字符串替换函数，返回替换后的新字符串</td></tr><tr><td>SUBSTRING</td><td>截取字符串，返回从指定位置开始的指定长度的字符换</td></tr><tr><td>REVERSE</td><td>字符串反转（逆序）函数，返回与原始字符串顺序相反的字符串</td></tr></tbody></table><h4 id="3-3-日期函数"><a href="#3-3-日期函数" class="headerlink" title="3.3 日期函数"></a>3.3 日期函数</h4><table><thead><tr><th>函数名称</th><th>作 用</th></tr></thead><tbody><tr><td>CURDATE 和 CURRENT_DATE</td><td>两个函数作用相同，返回当前系统的日期值</td></tr><tr><td>CURTIME 和 CURRENT_TIME</td><td>两个函数作用相同，返回当前系统的时间值</td></tr><tr><td><code>NOW 和  SYSDATE</code></td><td><code>两个函数作用相同，返回当前系统的日期和时间值</code></td></tr><tr><td><code>MONTH</code></td><td><code>获取指定日期中的月份</code></td></tr><tr><td>MONTHNAME</td><td>获取指定日期中的月份英文名称</td></tr><tr><td>DAYNAME</td><td>获取指定曰期对应的星期几的英文名称</td></tr><tr><td>DAYOFWEEK</td><td>获取指定日期对应的一周的索引位置值</td></tr><tr><td>WEEK</td><td>获取指定日期是一年中的第几周，返回值的范围是否为 0〜52 或 1〜53</td></tr><tr><td>DAYOFYEAR</td><td>获取指定曰期是一年中的第几天，返回值范围是1~366</td></tr><tr><td>DAYOFMONTH</td><td>获取指定日期是一个月中是第几天，返回值范围是1~31</td></tr><tr><td>YEAR</td><td>获取年份，返回值范围是 1970〜2069</td></tr><tr><td>TIME_TO_SEC</td><td>将时间参数转换为秒数</td></tr><tr><td>SEC_TO_TIME</td><td>将秒数转换为时间，与TIME_TO_SEC 互为反函数</td></tr><tr><td>DATE_ADD 和 ADDDATE</td><td>两个函数功能相同，都是向日期添加指定的时间间隔</td></tr><tr><td>DATE_SUB 和 SUBDATE</td><td>两个函数功能相同，都是向日期减去指定的时间间隔</td></tr><tr><td>ADDTIME</td><td>时间加法运算，在原始时间上添加指定的时间</td></tr><tr><td>SUBTIME</td><td>时间减法运算，在原始时间上减去指定的时间</td></tr><tr><td>DATEDIFF</td><td>获取两个日期之间间隔，返回参数 1 减去参数 2 的值</td></tr><tr><td>DATE_FORMAT</td><td>格式化指定的日期，根据参数返回指定格式的值</td></tr><tr><td>WEEKDAY</td><td>获取指定日期在一周内的对应的工作日索引</td></tr></tbody></table><h4 id="3-4-聚合函数"><a href="#3-4-聚合函数" class="headerlink" title="3.4 聚合函数"></a>3.4 聚合函数</h4><table><thead><tr><th>函数名称</th><th>作用</th></tr></thead><tbody><tr><td><code>MAX</code></td><td><code>查询指定列的最大值</code></td></tr><tr><td><code>MIN</code></td><td><code>查询指定列的最小值</code></td></tr><tr><td><code>COUNT</code></td><td><code>统计查询结果的行数</code></td></tr><tr><td><code>SUM</code></td><td><code>求和，返回指定列的总和</code></td></tr><tr><td><code>AVG</code></td><td><code>求平均值，返回指定列数据的平均值</code></td></tr></tbody></table><h2 id="☆"><a href="#☆" class="headerlink" title="☆"></a>☆</h2>]]></content>
    
    
    <summary type="html">&lt;p&gt;惜别伤离方寸乱，忘了临行，酒盏深和浅。&lt;/p&gt;
&lt;p align=&quot;right&quot;&gt;——李清照《蝶恋花》&lt;/p&gt;</summary>
    
    
    
    <category term="MySql高级" scheme="http://www.itbuild.cn/categories/MySql%E9%AB%98%E7%BA%A7/"/>
    
    
  </entry>
  
  <entry>
    <title>MySql高级/14.MySql高级之锁问题</title>
    <link href="http://www.itbuild.cn/2020/12/19/MySql%E9%AB%98%E7%BA%A7/14.MySql%E9%AB%98%E7%BA%A7%E4%B9%8B%E9%94%81%E9%97%AE%E9%A2%98/"/>
    <id>http://www.itbuild.cn/2020/12/19/MySql%E9%AB%98%E7%BA%A7/14.MySql%E9%AB%98%E7%BA%A7%E4%B9%8B%E9%94%81%E9%97%AE%E9%A2%98/</id>
    <published>2020-12-19T13:45:41.707Z</published>
    <updated>2020-12-19T14:02:51.918Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>休对故人思故国，且将新火试新茶。诗酒趁年华。</p><p align="right">——苏轼《望江南》</p><a id="more"></a>## MySql高级之锁问题<h4 id="1-锁概述"><a href="#1-锁概述" class="headerlink" title="1. 锁概述"></a>1. 锁概述</h4><blockquote><p><font size='16px' color='#90ee90'>锁</font>是计算机协调多个进程或线程并发访问某一资源的机制（避免争抢）。</p><p><code>在数据库中，除传统的计算资源（如 CPU、RAM、I/O 等）的争用以外，数据也是一种供许多用户共享的资源。</code>如何保证数据并发访问的一致性、有效性是所有数据库必须解决的一个问题，<code>锁冲突也是影响数据库并发访问性能的一个重要因素。从这个角度来说，锁对数据库而言显得尤其重要，也更加复杂。</code></p></blockquote><h4 id="2-锁分类"><a href="#2-锁分类" class="headerlink" title="2. 锁分类"></a>2. 锁分类</h4><blockquote><p>从对数据操作的粒度分 ： </p><ol><li>表锁：操作时，会锁定整个表。</li><li>行锁：操作时，会锁定当前操作行。</li></ol><p>从对数据操作的类型分：</p><ol><li><code>读锁（共享锁）：针对同一份数据，多个读操作可以同时进行而不会互相影响。</code></li><li><code>写锁（排它锁）：当前操作没有完成之前，它会阻断其他写锁和读锁。</code></li></ol></blockquote><h4 id="3-Mysql-锁"><a href="#3-Mysql-锁" class="headerlink" title="3. Mysql 锁"></a>3. Mysql 锁</h4><p>相对其他数据库而言，MySQL的锁机制比较简单，其最显著的特点是不同的存储引擎支持不同的锁机制。下表中罗列出了各存储引擎对锁的支持情况：</p><table><thead><tr><th>存储引擎</th><th>表级锁</th><th>行级锁</th><th>页面锁</th></tr></thead><tbody><tr><td>MyISAM</td><td><code>支持</code></td><td>不支持</td><td>不支持</td></tr><tr><td>InnoDB</td><td><code>支持</code></td><td><code>支持</code></td><td>不支持</td></tr><tr><td>MEMORY</td><td><code>支持</code></td><td>不支持</td><td>不支持</td></tr><tr><td>BDB</td><td><code>支持</code></td><td>不支持</td><td><code>支持</code></td></tr></tbody></table><blockquote><p>MySQL这3种锁的特性可大致归纳如下 ：</p></blockquote><table><thead><tr><th>锁类型</th><th>特点</th></tr></thead><tbody><tr><td>表级锁</td><td>偏向MyISAM 存储引擎，开销小，加锁快；不会出现死锁；锁定粒度大，发生锁冲突的概率最高,并发度最低。</td></tr><tr><td>行级锁</td><td>偏向InnoDB 存储引擎，开销大，加锁慢；<code>会出现死锁</code>；锁定粒度最小，发生锁冲突的概率最低,并发度也最高。</td></tr><tr><td>页面锁</td><td>开销和加锁时间界于表锁和行锁之间；会出现死锁；锁定粒度界于表锁和行锁之间，并发度一般。</td></tr></tbody></table><blockquote><p>从上述特点可见，很难笼统地说哪种锁更好，只能就具体应用的特点来说哪种锁更合适！<code>仅从锁的角度来说：表级锁更适合于以查询为主，只有少量按索引条件更新数据的应用，如Web 应用；而行级锁则更适合于有大量按索引条件并发更新少量不同数据，同时又有并查询的应用，如一些在线事务处理（OLTP）系统。</code></p></blockquote><h4 id="4-MyISAM-表锁"><a href="#4-MyISAM-表锁" class="headerlink" title="4. MyISAM 表锁"></a>4. MyISAM 表锁</h4><blockquote><p>MyISAM 存储引擎<code>只支持表锁</code>，这也是MySQL开始几个版本中唯一支持的锁类型。</p></blockquote><h5 id="4-1-如何加表锁"><a href="#4-1-如何加表锁" class="headerlink" title="4.1 如何加表锁"></a>4.1 如何加表锁</h5><blockquote><p>MyISAM 在执行查询语句（SELECT）前，会自动给涉及的所有表加读锁，在执行更新操作（UPDATE、DELETE、INSERT 等）前，会自动给涉及的表加写锁，这个过程并不需要用户干预，因此，用户一般不需要直接用 LOCK TABLE 命令给 MyISAM 表显式加锁。</p><p>显示加表锁语法：</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">加读锁 ： <span class="keyword">lock</span> <span class="keyword">table</span> table_name <span class="keyword">read</span>;</span><br><span class="line">加写锁 ： <span class="keyword">lock</span> <span class="keyword">table</span> table_name write；</span><br></pre></td></tr></table></figure><h5 id="4-2-读锁案例"><a href="#4-2-读锁案例" class="headerlink" title="4.2 读锁案例"></a>4.2 读锁案例</h5><blockquote><p>准备环境</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`tb_book`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">INT</span>(<span class="number">11</span>) auto_increment,</span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`publish_time`</span> <span class="built_in">DATE</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`status`</span> <span class="built_in">CHAR</span>(<span class="number">1</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=myisam <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8 ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tb_book (<span class="keyword">id</span>, <span class="keyword">name</span>, publish_time, <span class="keyword">status</span>) <span class="keyword">VALUES</span>(<span class="literal">NULL</span>,<span class="string">'java编程思想'</span>,<span class="string">'2088-08-01'</span>,<span class="string">'1'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tb_book (<span class="keyword">id</span>, <span class="keyword">name</span>, publish_time, <span class="keyword">status</span>) <span class="keyword">VALUES</span>(<span class="literal">NULL</span>,<span class="string">'solr编程思想'</span>,<span class="string">'2088-08-08'</span>,<span class="string">'0'</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`tb_user`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">INT</span>(<span class="number">11</span>) auto_increment,</span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=myisam <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8 ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tb_user (<span class="keyword">id</span>, <span class="keyword">name</span>) <span class="keyword">VALUES</span>(<span class="literal">NULL</span>,<span class="string">'令狐冲'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tb_user (<span class="keyword">id</span>, <span class="keyword">name</span>) <span class="keyword">VALUES</span>(<span class="literal">NULL</span>,<span class="string">'田伯光'</span>);</span><br></pre></td></tr></table></figure><h6 id="客户端-一"><a href="#客户端-一" class="headerlink" title="客户端 一"></a>客户端 一</h6><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 获得tb_book 表的读锁 </span></span><br><span class="line"><span class="keyword">lock</span> <span class="keyword">table</span> tb_book <span class="keyword">read</span>;</span><br><span class="line"><span class="comment">-- 执行查询操作</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> tb_book;</span><br></pre></td></tr></table></figure><p><img src="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/1553906896564.png" alt="1553906896564"> </p><blockquote><p>可以正常执行 ， 查询出数据。</p></blockquote><h6 id="客户端-二"><a href="#客户端-二" class="headerlink" title="客户端 二"></a>客户端 二</h6><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 执行查询操作,同样能查到</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> tb_book;</span><br></pre></td></tr></table></figure><p><img src="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/1553907044500.png" alt="1553907044500"> </p><h6 id="客户端-一-1"><a href="#客户端-一-1" class="headerlink" title="客户端 一"></a>客户端 一</h6><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询未锁定的表</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">name</span> <span class="keyword">from</span> tb_seller;</span><br></pre></td></tr></table></figure><p><img src="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/1553908913515.png" alt="1553908913515"> </p><h6 id="客户端-二-1"><a href="#客户端-二-1" class="headerlink" title="客户端 二"></a>客户端 二</h6><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询未锁定的表</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">name</span> <span class="keyword">from</span> tb_seller;</span><br></pre></td></tr></table></figure><p><img src="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/1553908973840.png" alt="1553908973840"> </p><blockquote><p>可以正常查询出未锁定的表；</p></blockquote><h6 id="客户端-一-2"><a href="#客户端-一-2" class="headerlink" title="客户端 一"></a>客户端 一</h6><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 执行插入操作 </span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_book <span class="keyword">values</span>(<span class="literal">null</span>,<span class="string">'Mysql高级'</span>,<span class="string">'2088-01-01'</span>,<span class="string">'1'</span>);</span><br></pre></td></tr></table></figure><p><img src="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/1553907198462.png" alt="1553907198462"> </p><blockquote><p><code>执行插入， 直接报错 ， 由于当前tb_book 获得的是 读锁， 不能执行更新操作。</code></p></blockquote><h6 id="客户端-二-2"><a href="#客户端-二-2" class="headerlink" title="客户端 二"></a>客户端 二</h6><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 执行插入操作 </span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_book <span class="keyword">values</span>(<span class="literal">null</span>,<span class="string">'Mysql高级'</span>,<span class="string">'2088-01-01'</span>,<span class="string">'1'</span>);</span><br></pre></td></tr></table></figure><p><img src="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/1553907403957.png" alt="1553907403957"> </p><blockquote><p><code>当在客户端一中释放锁指令 unlock tables  后 ， 客户端二中的 inesrt 语句 ， 立即执行 ；</code></p></blockquote><h5 id="4-3-写锁案例"><a href="#4-3-写锁案例" class="headerlink" title="4.3 写锁案例"></a>4.3 写锁案例</h5><h6 id="客户端-一-3"><a href="#客户端-一-3" class="headerlink" title="客户端 一"></a>客户端 一</h6><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 获得tb_book 表的写锁 </span></span><br><span class="line"><span class="keyword">lock</span> <span class="keyword">table</span> tb_book write ;</span><br><span class="line"><span class="comment">-- 执行查询操作</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> tb_book ;</span><br></pre></td></tr></table></figure><p><img src="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/1553907849829.png" alt="1553907849829"> </p><blockquote><p>查询操作执行成功；</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 执行更新操作</span></span><br><span class="line"><span class="keyword">update</span> tb_book <span class="keyword">set</span> <span class="keyword">name</span> = <span class="string">'java编程思想（第二版）'</span> <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p><img src="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/1553907875221.png" alt="1553907875221"> </p><blockquote><p>更新操作执行成功 ；</p></blockquote><h6 id="客户端-二-3"><a href="#客户端-二-3" class="headerlink" title="客户端 二"></a>客户端 二</h6><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 执行查询操作</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> tb_book ;</span><br></pre></td></tr></table></figure><p><img src="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/1553908019755.png" alt="1553908019755"> </p><blockquote><p>当在客户端一中释放锁指令 unlock tables  后 ， 客户端二中的 select 语句 ， 立即执行 ；</p></blockquote><p><img src="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/1553908131373.png" alt="1553908131373"> </p><h5 id="4-4-结论"><a href="#4-4-结论" class="headerlink" title="4.4 结论"></a>4.4 结论</h5><p>锁模式的相互兼容性如表中所示：</p><p><img src="./https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/1553905621992.png" alt="1553905621992"> </p><blockquote><ol><li><p>对MyISAM 表的读操作，不会阻塞其他用户对同一表的读请求，但会阻塞对同一表的写请求；</p></li><li><p>对MyISAM 表的写操作，则会阻塞其他用户对同一表的读和写操作；</p></li></ol><p>简而言之，就是<code>读锁会阻塞写，但是不会阻塞读。而写锁，则既会阻塞读，又会阻塞写。</code></p></blockquote><p>此外，<code>MyISAM 的读写锁调度是写优先，这也是MyISAM不适合做写为主的表的存储引擎的原因</code>。因为写锁后，其他线程不能做任何操作，大量的更新会使查询很难得到锁，从而造成永远阻塞。</p><h5 id="4-5-查看锁的争用情况"><a href="#4-5-查看锁的争用情况" class="headerlink" title="4.5 查看锁的争用情况"></a>4.5 查看锁的争用情况</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show open tables；</span><br></pre></td></tr></table></figure><p><img src="/https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/1556443073322.png" alt="1556443073322"> </p><blockquote><p><code>In_user : 表当前被查询使用的次数。如果该数为零，则表是打开的，但是当前没有被使用。</code></p><p><code>Name_locked：表名称是否被锁定。名称锁定用于取消表或对表进行重命名等操作。</code></p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">status</span> <span class="keyword">like</span> <span class="string">'Table_locks%'</span>;</span><br></pre></td></tr></table></figure><p><img src="/https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/1556443170082.png" alt="1556443170082"> </p><blockquote><p><code>Table_locks_immediate ：</code> 指的是能够立即获得表级锁的次数，每立即获取锁，值加1。</p><p><code>Table_locks_waited ：</code> 指的是不能立即获取表级锁而需要等待的次数，每等待一次，该值加1，此值高说明存在着较为严重的表级锁争用情况。</p></blockquote><h4 id="5-InnoDB-行锁"><a href="#5-InnoDB-行锁" class="headerlink" title="5. InnoDB 行锁"></a>5. InnoDB 行锁</h4><h5 id="5-1-行锁介绍"><a href="#5-1-行锁介绍" class="headerlink" title="5.1 行锁介绍"></a>5.1 行锁介绍</h5><blockquote><ol><li><code>行锁特点 ：偏向InnoDB 存储引擎，开销大，加锁慢；会出现死锁；锁定粒度最小，发生锁冲突的概率最低,并发度也最高。</code></li><li>InnoDB 与 MyISAM 的最大不同有两点：一是支持事务；二是采用了行级锁。</li></ol></blockquote><h5 id="5-2-背景知识"><a href="#5-2-背景知识" class="headerlink" title="5.2 背景知识"></a>5.2 背景知识</h5><blockquote><p><a href="https://blog.csdn.net/weixin_45267102/article/details/100642265" target="_blank" rel="noopener">数据库事务详解</a></p></blockquote><h5 id="5-3-InnoDB-的行锁模式"><a href="#5-3-InnoDB-的行锁模式" class="headerlink" title="5.3 InnoDB 的行锁模式"></a>5.3 InnoDB 的行锁模式</h5><blockquote><p>InnoDB  实现了以下两种类型的行锁。</p><ul><li><code>共享锁（S）：</code>又称为读锁，简称S锁，共享锁就是多个事务对于同一数据可以共享一把锁，都能访问到数据，但是只能读不能修改。</li><li><code>排他锁（X）：</code>又称为写锁，简称X锁，排他锁就是不能与其他锁并存，如一个事务获取了一个数据行的排他锁，其他事务就不能再获取该行的其他锁，包括共享锁和排他锁，但是获取排他锁的事务是可以对数据就行读取和修改。</li></ul><p><code>对于UPDATE、DELETE和INSERT语句，InnoDB会自动给涉及数据集加排他锁（X)；</code></p><p>对于普通SELECT语句，InnoDB不会加任何锁；</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 可以通过以下语句显示给记录集加共享锁或排他锁 。</span></span><br><span class="line"><span class="comment">-- 共享锁（S）：</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> table_naem <span class="keyword">where</span> ... <span class="keyword">lock</span> <span class="keyword">in</span> <span class="keyword">share</span> <span class="keyword">mode</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 排他锁（X) ：</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> table_name <span class="keyword">where</span> ... <span class="keyword">for</span> <span class="keyword">update</span></span><br></pre></td></tr></table></figure><h5 id="5-4-案例准备工作"><a href="#5-4-案例准备工作" class="headerlink" title="5.4 案例准备工作"></a>5.4 案例准备工作</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> test_innodb_lock(</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">int</span>(<span class="number">11</span>),</span><br><span class="line"><span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">16</span>),</span><br><span class="line">sex <span class="built_in">varchar</span>(<span class="number">1</span>)</span><br><span class="line">)<span class="keyword">engine</span> = <span class="keyword">innodb</span> <span class="keyword">default</span> <span class="keyword">charset</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> test_innodb_lock <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">'100'</span>,<span class="string">'1'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> test_innodb_lock <span class="keyword">values</span>(<span class="number">3</span>,<span class="string">'3'</span>,<span class="string">'1'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> test_innodb_lock <span class="keyword">values</span>(<span class="number">4</span>,<span class="string">'400'</span>,<span class="string">'0'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> test_innodb_lock <span class="keyword">values</span>(<span class="number">5</span>,<span class="string">'500'</span>,<span class="string">'1'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> test_innodb_lock <span class="keyword">values</span>(<span class="number">6</span>,<span class="string">'600'</span>,<span class="string">'0'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> test_innodb_lock <span class="keyword">values</span>(<span class="number">7</span>,<span class="string">'700'</span>,<span class="string">'0'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> test_innodb_lock <span class="keyword">values</span>(<span class="number">8</span>,<span class="string">'800'</span>,<span class="string">'1'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> test_innodb_lock <span class="keyword">values</span>(<span class="number">9</span>,<span class="string">'900'</span>,<span class="string">'1'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> test_innodb_lock <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">'200'</span>,<span class="string">'0'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> idx_test_innodb_lock_id <span class="keyword">on</span> test_innodb_lock(<span class="keyword">id</span>);</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> idx_test_innodb_lock_name <span class="keyword">on</span> test_innodb_lock(<span class="keyword">name</span>);</span><br></pre></td></tr></table></figure><h5 id="5-5-行锁基本演示"><a href="#5-5-行锁基本演示" class="headerlink" title="5.5 行锁基本演示"></a>5.5 行锁基本演示</h5><table><thead><tr><th>Session-1</th><th>客户端二</th></tr></thead><tbody><tr><td><img src="file://E:/%E5%A4%A7%E6%95%B0%E6%8D%AE/%E8%B5%84%E6%96%99-MySQL%E9%AB%98%E7%BA%A7%E6%95%99%E7%A8%8B/MySQL%20%E9%AB%98%E7%BA%A7%20-%20day-03/%E6%96%87%E6%A1%A3/https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/1554354615030.png?lastModify=1596097307" alt="1554354615030">      关闭自动提交功能</td><td><img src="file://E:/%E5%A4%A7%E6%95%B0%E6%8D%AE/%E8%B5%84%E6%96%99-MySQL%E9%AB%98%E7%BA%A7%E6%95%99%E7%A8%8B/MySQL%20%E9%AB%98%E7%BA%A7%20-%20day-03/%E6%96%87%E6%A1%A3/https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/1554354601867.png?lastModify=1596097307" alt="1554354601867">  关闭自动提交功能</td></tr><tr><td><img src="file://E:/%E5%A4%A7%E6%95%B0%E6%8D%AE/%E8%B5%84%E6%96%99-MySQL%E9%AB%98%E7%BA%A7%E6%95%99%E7%A8%8B/MySQL%20%E9%AB%98%E7%BA%A7%20-%20day-03/%E6%96%87%E6%A1%A3/https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/1554354713628.png?lastModify=1596097307" alt="1554354713628"> 可以正常的查询出全部的数据</td><td><img src="file://E:/%E5%A4%A7%E6%95%B0%E6%8D%AE/%E8%B5%84%E6%96%99-MySQL%E9%AB%98%E7%BA%A7%E6%95%99%E7%A8%8B/MySQL%20%E9%AB%98%E7%BA%A7%20-%20day-03/%E6%96%87%E6%A1%A3/https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/1554354717336.png?lastModify=1596097307" alt="1554354717336"> 可以正常的查询出全部的数据</td></tr><tr><td><img src="file://E:/%E5%A4%A7%E6%95%B0%E6%8D%AE/%E8%B5%84%E6%96%99-MySQL%E9%AB%98%E7%BA%A7%E6%95%99%E7%A8%8B/MySQL%20%E9%AB%98%E7%BA%A7%20-%20day-03/%E6%96%87%E6%A1%A3/https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/1554354830589.png?lastModify=1596097307" alt="1554354830589">查询id 为3的数据 ；</td><td><img src="file://E:/%E5%A4%A7%E6%95%B0%E6%8D%AE/%E8%B5%84%E6%96%99-MySQL%E9%AB%98%E7%BA%A7%E6%95%99%E7%A8%8B/MySQL%20%E9%AB%98%E7%BA%A7%20-%20day-03/%E6%96%87%E6%A1%A3/https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/1554354832708.png?lastModify=1596097307" alt="1554354832708">获取id为3的数据 ；</td></tr><tr><td><img src="file://E:/%E5%A4%A7%E6%95%B0%E6%8D%AE/%E8%B5%84%E6%96%99-MySQL%E9%AB%98%E7%BA%A7%E6%95%99%E7%A8%8B/MySQL%20%E9%AB%98%E7%BA%A7%20-%20day-03/%E6%96%87%E6%A1%A3/https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/1554382789984.png?lastModify=1596097307" alt="1554382789984"> 更新id为3的数据，但是不提交；</td><td><img src="file://E:/%E5%A4%A7%E6%95%B0%E6%8D%AE/%E8%B5%84%E6%96%99-MySQL%E9%AB%98%E7%BA%A7%E6%95%99%E7%A8%8B/MySQL%20%E9%AB%98%E7%BA%A7%20-%20day-03/%E6%96%87%E6%A1%A3/https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/1554382905352.png?lastModify=1596097307" alt="1554382905352"> 更新id为3 的数据， 出于等待状态</td></tr><tr><td><img src="file://E:/%E5%A4%A7%E6%95%B0%E6%8D%AE/%E8%B5%84%E6%96%99-MySQL%E9%AB%98%E7%BA%A7%E6%95%99%E7%A8%8B/MySQL%20%E9%AB%98%E7%BA%A7%20-%20day-03/%E6%96%87%E6%A1%A3/https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/1554382977653.png?lastModify=1596097307" alt="1554382977653"> 通过commit， 提交事务</td><td><img src="file://E:/%E5%A4%A7%E6%95%B0%E6%8D%AE/%E8%B5%84%E6%96%99-MySQL%E9%AB%98%E7%BA%A7%E6%95%99%E7%A8%8B/MySQL%20%E9%AB%98%E7%BA%A7%20-%20day-03/%E6%96%87%E6%A1%A3/https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/1554383044542.png?lastModify=1596097307" alt="1554383044542"> 解除阻塞，更新正常进行</td></tr><tr><td>以上， 操作的都是同一行的数据，接下来，演示不同行的数据 ：</td><td></td></tr><tr><td><img src="file://E:/%E5%A4%A7%E6%95%B0%E6%8D%AE/%E8%B5%84%E6%96%99-MySQL%E9%AB%98%E7%BA%A7%E6%95%99%E7%A8%8B/MySQL%20%E9%AB%98%E7%BA%A7%20-%20day-03/%E6%96%87%E6%A1%A3/https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/1554385220580.png?lastModify=1596097307" alt="1554385220580"> 更新id为3数据，正常的获取到行锁 ， 执行更新 ；</td><td><img src="file://E:/%E5%A4%A7%E6%95%B0%E6%8D%AE/%E8%B5%84%E6%96%99-MySQL%E9%AB%98%E7%BA%A7%E6%95%99%E7%A8%8B/MySQL%20%E9%AB%98%E7%BA%A7%20-%20day-03/%E6%96%87%E6%A1%A3/https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/1554385236768.png?lastModify=1596097307" alt="1554385236768"> 由于与客户端操作不是同一行，获取当前行锁，执行更新；</td></tr></tbody></table><h5 id="5-6-无索引行锁升级为表锁☆"><a href="#5-6-无索引行锁升级为表锁☆" class="headerlink" title="5.6 无索引行锁升级为表锁☆"></a>5.6 无索引行锁升级为表锁☆</h5><blockquote><p>如果不通过索引条件检索数据，那么InnoDB将对表中的所有记录加锁，实际效果跟表锁一样。</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查看当前表的索引</span></span><br><span class="line"><span class="keyword">show</span>  <span class="keyword">index</span>  <span class="keyword">from</span> test_innodb_lock;</span><br></pre></td></tr></table></figure><p><img src="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/1554385956215.png" alt="1554385956215"></p><table><thead><tr><th>客户端一</th><th>客户端二</th></tr></thead><tbody><tr><td>关闭事务的自动提交<img src="file://E:/%E5%A4%A7%E6%95%B0%E6%8D%AE/%E8%B5%84%E6%96%99-MySQL%E9%AB%98%E7%BA%A7%E6%95%99%E7%A8%8B/MySQL%20%E9%AB%98%E7%BA%A7%20-%20day-03/%E6%96%87%E6%A1%A3/https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/1554386287454.png?lastModify=1596097614" alt="1554386287454"></td><td>关闭事务的自动提交<img src="file://E:/%E5%A4%A7%E6%95%B0%E6%8D%AE/%E8%B5%84%E6%96%99-MySQL%E9%AB%98%E7%BA%A7%E6%95%99%E7%A8%8B/MySQL%20%E9%AB%98%E7%BA%A7%20-%20day-03/%E6%96%87%E6%A1%A3/https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/1554386312524.png?lastModify=1596097614" alt="1554386312524"></td></tr><tr><td>执行更新语句 ：<img src="file://E:/%E5%A4%A7%E6%95%B0%E6%8D%AE/%E8%B5%84%E6%96%99-MySQL%E9%AB%98%E7%BA%A7%E6%95%99%E7%A8%8B/MySQL%20%E9%AB%98%E7%BA%A7%20-%20day-03/%E6%96%87%E6%A1%A3/https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/1554386654793.png?lastModify=1596097614" alt="1554386654793"></td><td>执行更新语句， 但处于阻塞状态：<img src="file://E:/%E5%A4%A7%E6%95%B0%E6%8D%AE/%E8%B5%84%E6%96%99-MySQL%E9%AB%98%E7%BA%A7%E6%95%99%E7%A8%8B/MySQL%20%E9%AB%98%E7%BA%A7%20-%20day-03/%E6%96%87%E6%A1%A3/https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/1554386685610.png?lastModify=1596097614" alt="1554386685610"></td></tr><tr><td>提交事务：<img src="file://E:/%E5%A4%A7%E6%95%B0%E6%8D%AE/%E8%B5%84%E6%96%99-MySQL%E9%AB%98%E7%BA%A7%E6%95%99%E7%A8%8B/MySQL%20%E9%AB%98%E7%BA%A7%20-%20day-03/%E6%96%87%E6%A1%A3/https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/1554386721653.png?lastModify=1596097614" alt="1554386721653"></td><td>解除阻塞，执行更新成功 ：<img src="file://E:/%E5%A4%A7%E6%95%B0%E6%8D%AE/%E8%B5%84%E6%96%99-MySQL%E9%AB%98%E7%BA%A7%E6%95%99%E7%A8%8B/MySQL%20%E9%AB%98%E7%BA%A7%20-%20day-03/%E6%96%87%E6%A1%A3/https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/1554386750004.png?lastModify=1596097614" alt="1554386750004"></td></tr><tr><td></td><td>执行提交操作 ：<img src="file://E:/%E5%A4%A7%E6%95%B0%E6%8D%AE/%E8%B5%84%E6%96%99-MySQL%E9%AB%98%E7%BA%A7%E6%95%99%E7%A8%8B/MySQL%20%E9%AB%98%E7%BA%A7%20-%20day-03/%E6%96%87%E6%A1%A3/https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/1554386804807.png?lastModify=1596097614" alt="1554386804807"></td></tr></tbody></table><blockquote><p><code>由于 执行更新时 ， name字段本来为varchar类型， 我们是作为数组类型使用，存在类型转换，索引失效，最终行锁变为表锁 ；</code></p></blockquote><h5 id="5-7-间隙锁危害"><a href="#5-7-间隙锁危害" class="headerlink" title="5.7 间隙锁危害"></a>5.7 间隙锁危害</h5><blockquote><p>当我们用范围条件，而不是使用相等条件检索数据，并请求共享或排他锁时，InnoDB会给符合条件的已有数据进行加锁； 对于键值在条件范围内但并不存在的记录，叫做 “间隙（GAP）” ， InnoDB也会对这个 “间隙” 加锁，这种锁机制就是所谓的间隙锁（Next-Key锁） 。</p></blockquote><table><thead><tr><th>Session-1</th><th>客户端二</th></tr></thead><tbody><tr><td>关闭事务自动提交 <img src="file://E:/%E5%A4%A7%E6%95%B0%E6%8D%AE/%E8%B5%84%E6%96%99-MySQL%E9%AB%98%E7%BA%A7%E6%95%99%E7%A8%8B/MySQL%20%E9%AB%98%E7%BA%A7%20-%20day-03/%E6%96%87%E6%A1%A3/https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/1554387987130.png?lastModify=1596097703" alt="1554387987130"></td><td>关闭事务自动提交<img src="file://E:/%E5%A4%A7%E6%95%B0%E6%8D%AE/%E8%B5%84%E6%96%99-MySQL%E9%AB%98%E7%BA%A7%E6%95%99%E7%A8%8B/MySQL%20%E9%AB%98%E7%BA%A7%20-%20day-03/%E6%96%87%E6%A1%A3/https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/1554387994533.png?lastModify=1596097703" alt="1554387994533"></td></tr><tr><td>根据id范围更新数据<img src="file://E:/%E5%A4%A7%E6%95%B0%E6%8D%AE/%E8%B5%84%E6%96%99-MySQL%E9%AB%98%E7%BA%A7%E6%95%99%E7%A8%8B/MySQL%20%E9%AB%98%E7%BA%A7%20-%20day-03/%E6%96%87%E6%A1%A3/https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/1554388492478.png?lastModify=1596097703" alt="1554388492478"></td><td></td></tr><tr><td></td><td>插入id为2的记录， 出于阻塞状态<img src="file://E:/%E5%A4%A7%E6%95%B0%E6%8D%AE/%E8%B5%84%E6%96%99-MySQL%E9%AB%98%E7%BA%A7%E6%95%99%E7%A8%8B/MySQL%20%E9%AB%98%E7%BA%A7%20-%20day-03/%E6%96%87%E6%A1%A3/https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/1554388515936.png?lastModify=1596097703" alt="1554388515936"></td></tr><tr><td>提交事务 ；<img src="file://E:/%E5%A4%A7%E6%95%B0%E6%8D%AE/%E8%B5%84%E6%96%99-MySQL%E9%AB%98%E7%BA%A7%E6%95%99%E7%A8%8B/MySQL%20%E9%AB%98%E7%BA%A7%20-%20day-03/%E6%96%87%E6%A1%A3/https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/1554388149305.png?lastModify=1596097703" alt="1554388149305"></td><td></td></tr><tr><td></td><td>解除阻塞 ， 执行插入操作 ：<img src="file://E:/%E5%A4%A7%E6%95%B0%E6%8D%AE/%E8%B5%84%E6%96%99-MySQL%E9%AB%98%E7%BA%A7%E6%95%99%E7%A8%8B/MySQL%20%E9%AB%98%E7%BA%A7%20-%20day-03/%E6%96%87%E6%A1%A3/https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/1554388548562.png?lastModify=1596097703" alt="1554388548562"></td></tr><tr><td></td><td>提交事务 ：</td></tr></tbody></table><h5 id="5-8-InnoDB-行锁争用情况"><a href="#5-8-InnoDB-行锁争用情况" class="headerlink" title="5.8 InnoDB 行锁争用情况"></a>5.8 InnoDB 行锁争用情况</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span>  <span class="keyword">status</span> <span class="keyword">like</span> <span class="string">'innodb_row_lock%'</span>;</span><br></pre></td></tr></table></figure><p><img src="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/1556455943670.png" alt="1556455943670"></p><blockquote><ol><li><p><code>Innodb_row_lock_current_waits: 当前正在等待锁定的数量</code></p></li><li><p><code>Innodb_row_lock_time: 从系统启动到现在锁定总时间长度</code></p></li><li><p><code>Innodb_row_lock_time_avg:每次等待所花平均时长</code></p></li><li><p><code>Innodb_row_lock_time_max:从系统启动到现在等待最长的一次所花的时间</code></p></li><li><p><code>Innodb_row_lock_waits: 系统启动后到现在总共等待的次数</code></p></li></ol><p>当等待的次数很高，而且每次等待的时长也不小的时候，我们就需要分析系统中为什么会有如此多的等待，然后根据分析结果着手制定优化计划。</p></blockquote><h5 id="5-9-总结"><a href="#5-9-总结" class="headerlink" title="5.9 总结"></a>5.9 总结</h5><blockquote><ol><li><p>InnoDB存储引擎由于实现了行级锁定，虽然在锁定机制的实现方面带来了性能损耗可能比表锁会更高一些，但是在整体并发处理能力方面要远远由于MyISAM的表锁的。当系统并发量较高的时候，InnoDB的整体性能和MyISAM相比就会有比较明显的优势。</p></li><li><p>但是，InnoDB的行级锁同样也有其脆弱的一面，当我们使用不当的时候，可能会让InnoDB的整体性能表现不仅不能比MyISAM高，甚至可能会更差。</p></li><li><p>优化建议：</p><ul><li>尽可能让所有数据检索都能通过索引来完成，避免无索引行锁升级为表锁。</li><li>合理设计索引，尽量缩小锁的范围</li><li>尽可能减少索引条件，及索引范围，避免间隙锁</li><li>尽量控制事务大小，减少锁定资源量和时间长度</li><li>尽可使用低级别事务隔离（但是需要业务层面满足需求）</li></ul></li></ol></blockquote><h2 id="☆"><a href="#☆" class="headerlink" title="☆"></a>☆</h2>]]></content>
    
    
    <summary type="html">&lt;p&gt;休对故人思故国，且将新火试新茶。诗酒趁年华。&lt;/p&gt;
&lt;p align=&quot;right&quot;&gt;——苏轼《望江南》&lt;/p&gt;</summary>
    
    
    
    <category term="MySql高级" scheme="http://www.itbuild.cn/categories/MySql%E9%AB%98%E7%BA%A7/"/>
    
    
  </entry>
  
  <entry>
    <title>MySql高级/13.MySql高级之并发参数调整</title>
    <link href="http://www.itbuild.cn/2020/12/19/MySql%E9%AB%98%E7%BA%A7/13.MySql%E9%AB%98%E7%BA%A7%E4%B9%8B%E5%B9%B6%E5%8F%91%E5%8F%82%E6%95%B0%E8%B0%83%E6%95%B4/"/>
    <id>http://www.itbuild.cn/2020/12/19/MySql%E9%AB%98%E7%BA%A7/13.MySql%E9%AB%98%E7%BA%A7%E4%B9%8B%E5%B9%B6%E5%8F%91%E5%8F%82%E6%95%B0%E8%B0%83%E6%95%B4/</id>
    <published>2020-12-19T13:45:41.705Z</published>
    <updated>2020-12-19T14:02:51.798Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>零落成泥碾作尘，只有香如故。</p><p align="right">——陆游《卜算子》</p><a id="more"></a><h2 id="MySql高级之并发参数调整"><a href="#MySql高级之并发参数调整" class="headerlink" title="MySql高级之并发参数调整"></a>MySql高级之并发参数调整</h2><p>从实现上来说，MySQL Server 是多线程结构，包括后台线程和客户服务线程。多线程可以有效利用服务器资源，提高数据库的并发性能。在Mysql中，<code>控制并发连接和线程的主要参数包括 max_connections、back_log、thread_cache_size、table_open_cahce。</code></p><h3 id="1-max-connections"><a href="#1-max-connections" class="headerlink" title="1. max_connections"></a>1. max_connections</h3><blockquote><p>采用max_connections 控制允许连接到MySQL数据库的最大数量，<code>默认值是 151</code>。如果状态变量 connection_errors_max_connections 不为零，并且一直增长，则说明不断有连接请求因数据库连接数已达到允许最大值而失败，这是可以考虑增大max_connections 的值。</p><p><code>Mysql 最大可支持的连接数，取决于很多因素，包括给定操作系统平台的线程库的质量、内存大小、每个连接的负荷、CPU的处理速度，期望的响应时间等。</code>在Linux 平台下，性能好的服务器，<code>支持 500-1000 个连接不是难事</code>，需要根据服务器性能进行评估设定。</p></blockquote><h3 id="2-back-log"><a href="#2-back-log" class="headerlink" title="2. back_log"></a>2. back_log</h3><blockquote><p><code>back_log 参数控制MySQL监听TCP端口时设置的积压请求栈大小。</code>如果MySql的连接数达到max_connections时，新来的请求将会被存在堆栈中，以等待某一连接释放资源，该堆栈的数量即back_log，如果等待连接的数量超过back_log，将不被授予连接资源，将会报错。</p><p><code>5.6.6 版本之前默认值为 50 ， 之后的版本默认为 50 + （max_connections / 5）</code>， 但最大不超过900。</p><p>如果需要数据库在较短的时间内处理大量连接请求， 可以考虑适当增大back_log 的值。</p></blockquote><h3 id="3-table-open-cache"><a href="#3-table-open-cache" class="headerlink" title="3. table_open_cache"></a>3. table_open_cache</h3><blockquote><p>该参数用来控制所有SQL语句执行线程可打开表缓存的数量， 而在执行SQL语句时，每一个SQL执行线程至少要打开 1 个表缓存。该参数的值应该根据设置的最大连接数 max_connections 以及每个连接执行关联查询中涉及的表的最大数量来设定 。</p></blockquote><h3 id="4-thread-cache-size"><a href="#4-thread-cache-size" class="headerlink" title="4. thread_cache_size"></a>4. thread_cache_size</h3><blockquote><p>为了加快连接数据库的速度，MySQL 会缓存一定数量的客户服务线程以备重用，通过参数 <code>thread_cache_size 可控制 MySQL 缓存客户服务线程的数量。</code></p></blockquote><h3 id="5-innodb-lock-wait-timeout"><a href="#5-innodb-lock-wait-timeout" class="headerlink" title="5. innodb_lock_wait_timeout"></a>5. innodb_lock_wait_timeout</h3><blockquote><p><code>该参数是用来设置InnoDB 事务等待行锁的时间，默认值是50ms</code> ， 可以根据需要进行动态设置。对于需要快速反馈的业务系统来说，可以将行锁的等待时间调小，以避免事务长时间挂起； 对于后台运行的批量处理程序来说， 可以将行锁的等待时间调大， 以避免发生大的回滚操作。</p></blockquote><h2 id="☆"><a href="#☆" class="headerlink" title="☆"></a>☆</h2>]]></content>
    
    
    <summary type="html">&lt;p&gt;零落成泥碾作尘，只有香如故。&lt;/p&gt;
&lt;p align=&quot;right&quot;&gt;——陆游《卜算子》&lt;/p&gt;</summary>
    
    
    
    <category term="MySql高级" scheme="http://www.itbuild.cn/categories/MySql%E9%AB%98%E7%BA%A7/"/>
    
    
  </entry>
  
  <entry>
    <title>MySql高级/12.MySql高级之内存管理及优化</title>
    <link href="http://www.itbuild.cn/2020/12/19/MySql%E9%AB%98%E7%BA%A7/12.MySql%E9%AB%98%E7%BA%A7%E4%B9%8B%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E5%8F%8A%E4%BC%98%E5%8C%96/"/>
    <id>http://www.itbuild.cn/2020/12/19/MySql%E9%AB%98%E7%BA%A7/12.MySql%E9%AB%98%E7%BA%A7%E4%B9%8B%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E5%8F%8A%E4%BC%98%E5%8C%96/</id>
    <published>2020-12-19T13:45:41.704Z</published>
    <updated>2020-12-19T14:02:51.688Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>剪不断，理还乱，是离愁。别是一般滋味在心头。</p><p align="right">——李煜《相见欢》</p><a id="more"></a><h2 id="MySql高级之内存管理及优化"><a href="#MySql高级之内存管理及优化" class="headerlink" title="MySql高级之内存管理及优化"></a>MySql高级之内存管理及优化</h2><h4 id="1-内存优化原则"><a href="#1-内存优化原则" class="headerlink" title="1. 内存优化原则"></a>1. 内存优化原则</h4><blockquote><ol><li><p>将尽量多的内存分配给MySQL做缓存，但要给操作系统和其他程序预留足够内存。</p></li><li><p>MyISAM 存储引擎的数据文件读取依赖于操作系统自身的IO缓存，因此，如果有MyISAM表，就要预留更多的内存给操作系统做IO缓存。</p></li><li><p>排序区、连接区等缓存是分配给每个数据库会话（session）专用的，其默认值的设置要根据最大连接数合理分配，如果设置太大，不但浪费资源，而且在并发连接较高时会导致物理内存耗尽。</p></li></ol></blockquote><h4 id="2-MyISAM-内存优化"><a href="#2-MyISAM-内存优化" class="headerlink" title="2. MyISAM 内存优化"></a>2. MyISAM 内存优化</h4><blockquote><p>myisam存储引擎使用 key_buffer 缓存索引块，加速myisam索引的读写速度。对于myisam表的数据块，mysql没有特别的缓存机制，完全依赖于操作系统的IO缓存。</p></blockquote><h6 id="key-buffer-size"><a href="#key-buffer-size" class="headerlink" title="key_buffer_size"></a>key_buffer_size</h6><blockquote><p>key_buffer_size决定MyISAM索引块缓存区的大小，直接影响到MyISAM表的存取效率。可以在MySQL参数文件中设置key_buffer_size的值，对于一般MyISAM数据库，<code>建议至少将1/4可用内存分配给key_buffer_size</code>。</p><p>在<code>/usr/my.cnf</code> 中做如下配置：</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">key_buffer_size=512M</span><br></pre></td></tr></table></figure><h6 id="read-buffer-size"><a href="#read-buffer-size" class="headerlink" title="read_buffer_size"></a>read_buffer_size</h6><blockquote><p>如果需要经常顺序扫描myisam表，可以通过增大read_buffer_size的值来改善性能。但需要注意的是<code>read_buffer_size是每个session独占的，如果默认值设置太大，就会造成内存浪费。</code></p></blockquote><h6 id="read-rnd-buffer-size"><a href="#read-rnd-buffer-size" class="headerlink" title="read_rnd_buffer_size"></a>read_rnd_buffer_size</h6><blockquote><p>对于需要做排序的myisam表的查询，如带有order by子句的sql，适当增加 read_rnd_buffer_size 的值，可以改善此类的sql性能。但需要注意的是 <code>read_rnd_buffer_size 是每个session独占的，如果默认值设置太大，就会造成内存浪费。</code></p></blockquote><h4 id="3-InnoDB-内存优化"><a href="#3-InnoDB-内存优化" class="headerlink" title="3. InnoDB 内存优化"></a>3. InnoDB 内存优化</h4><blockquote><p><code>innodb用一块内存区做IO缓存池，该缓存池不仅用来缓存innodb的索引块，而且也用来缓存innodb的数据块。</code></p></blockquote><h6 id="innodb-buffer-pool-size"><a href="#innodb-buffer-pool-size" class="headerlink" title="innodb_buffer_pool_size"></a>innodb_buffer_pool_size</h6><blockquote><p>该变量决定了 innodb 存储引擎表数据和索引数据的最大缓存区大小。在保证操作系统及其他程序有足够内存可用的情况下，<code>innodb_buffer_pool_size 的值越大，缓存命中率越高，访问InnoDB表需要的磁盘I/O 就越少，性能也就越高。</code></p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">innodb_buffer_pool_size=512M</span><br></pre></td></tr></table></figure><h6 id="innodb-log-buffer-size"><a href="#innodb-log-buffer-size" class="headerlink" title="innodb_log_buffer_size"></a>innodb_log_buffer_size</h6><blockquote><p>决定了innodb重做日志缓存的大小，对于可能产生大量更新记录的大事务，<code>增加innodb_log_buffer_size的大小，可以避免innodb在事务提交前就执行不必要的日志写入磁盘操作。</code></p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">innodb_log_buffer_size=10M</span><br></pre></td></tr></table></figure><h2 id="☆"><a href="#☆" class="headerlink" title="☆"></a>☆</h2>]]></content>
    
    
    <summary type="html">&lt;p&gt;剪不断，理还乱，是离愁。别是一般滋味在心头。&lt;/p&gt;
&lt;p align=&quot;right&quot;&gt;——李煜《相见欢》&lt;/p&gt;</summary>
    
    
    
    <category term="MySql高级" scheme="http://www.itbuild.cn/categories/MySql%E9%AB%98%E7%BA%A7/"/>
    
    
  </entry>
  
  <entry>
    <title>MySql高级/11.MySql高级之查询缓存优化</title>
    <link href="http://www.itbuild.cn/2020/12/19/MySql%E9%AB%98%E7%BA%A7/11.MySql%E9%AB%98%E7%BA%A7%E4%B9%8B%E6%9F%A5%E8%AF%A2%E7%BC%93%E5%AD%98%E4%BC%98%E5%8C%96/"/>
    <id>http://www.itbuild.cn/2020/12/19/MySql%E9%AB%98%E7%BA%A7/11.MySql%E9%AB%98%E7%BA%A7%E4%B9%8B%E6%9F%A5%E8%AF%A2%E7%BC%93%E5%AD%98%E4%BC%98%E5%8C%96/</id>
    <published>2020-12-19T13:45:41.702Z</published>
    <updated>2020-12-19T14:02:51.594Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>胡未灭，鬓先秋，泪空流。此生谁料，心在天山，身老沧洲。</p><p align="right">——陆游《诉衷情》</p><a id="more"></a>## MySql高级之查询缓存优化<blockquote><p>开启Mysql的查询缓存，当执行完全相同的SQL语句的时候，服务器就会直接从缓存中读取结果，当数据被修改，之前的缓存会失效，修改比较频繁的表不适合做查询缓存。</p></blockquote><h4 id="1-操作流程"><a href="#1-操作流程" class="headerlink" title="1. 操作流程"></a>1. 操作流程</h4><p> <img src="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/20180919131632347.png" alt="20180919131632347"> </p><blockquote><ol><li>客户端发送一条查询给服务器；</li><li>服务器先会检查查询缓存，如果<code>命中</code>了缓存，则立即返回存储在缓存中的结果。否则进入下一阶段；</li><li>服务器端进行SQL解析、预处理，再由优化器生成对应的执行计划；</li><li>MySQL根据优化器生成的执行计划，调用存储引擎的API来执行查询；</li><li>将结果返回给客户端。</li></ol></blockquote><h4 id="2-查询缓存配置"><a href="#2-查询缓存配置" class="headerlink" title="2. 查询缓存配置"></a>2. 查询缓存配置</h4><h6 id="查看当前的MySQL数据库是否支持查询缓存"><a href="#查看当前的MySQL数据库是否支持查询缓存" class="headerlink" title="查看当前的MySQL数据库是否支持查询缓存"></a>查看当前的MySQL数据库是否支持查询缓存</h6><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">'have_query_cache'</span>;</span><br></pre></td></tr></table></figure><p> <img src="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/image-20200729233736186.png" alt="image-20200729233736186"></p><h6 id="查看当前MySQL是否开启了查询缓存-："><a href="#查看当前MySQL是否开启了查询缓存-：" class="headerlink" title="查看当前MySQL是否开启了查询缓存 ："></a>查看当前MySQL是否开启了查询缓存 ：</h6><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">'query_cache_type'</span>;</span><br></pre></td></tr></table></figure><p><img src="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/image-20200729233817807.png" alt="image-20200729233817807"> </p><h6 id="查看查询缓存的占用大小-："><a href="#查看查询缓存的占用大小-：" class="headerlink" title="查看查询缓存的占用大小 ："></a>查看查询缓存的占用大小 ：</h6><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">'query_cache_size'</span>;</span><br><span class="line"><span class="comment">-- 1048576/1024/1024=1</span></span><br></pre></td></tr></table></figure><p><img src="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/image-20200729233900085.png" alt="image-20200729233900085">      </p><h6 id="查看查询缓存的状态变量："><a href="#查看查询缓存的状态变量：" class="headerlink" title="查看查询缓存的状态变量："></a>查看查询缓存的状态变量：</h6><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">status</span> <span class="keyword">like</span> <span class="string">'Qcache%'</span>;</span><br></pre></td></tr></table></figure><p><img src="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/image-20200729234049805.png" alt="image-20200729234049805"> </p><blockquote><p>各个变量的含义如下：</p></blockquote><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td><code>Qcache_free_blocks</code></td><td>查询缓存中的可用内存块数</td></tr><tr><td><code>Qcache_free_memory</code></td><td>查询缓存的可用内存量</td></tr><tr><td><code>Qcache_hits</code></td><td>查询缓存命中数</td></tr><tr><td><code>Qcache_inserts</code></td><td>添加到查询缓存的查询数</td></tr><tr><td><code>Qcache_lowmen_prunes</code></td><td>由于内存不足而从查询缓存中删除的查询数</td></tr><tr><td><code>Qcache_not_cached</code></td><td>非缓存查询的数量（由于 query_cache_type 设置而无法缓存或未缓存）</td></tr><tr><td><code>Qcache_queries_in_cache</code></td><td>查询缓存中注册的查询数</td></tr><tr><td><code>Qcache_total_blocks</code></td><td>查询缓存中的块总数</td></tr></tbody></table><h4 id="3-开启查询缓存"><a href="#3-开启查询缓存" class="headerlink" title="3. 开启查询缓存"></a>3. 开启查询缓存</h4><blockquote><p>MySQL的查询缓存默认是关闭的，需要手动配置参数 query_cache_type ， 来开启查询缓存。</p><p><code>query_cache_type 该参数的可取值有三个 ：</code></p></blockquote><table><thead><tr><th>值</th><th>含义</th></tr></thead><tbody><tr><td>OFF 或 0</td><td>查询缓存功能关闭</td></tr><tr><td>ON 或 1</td><td>查询缓存功能打开，SELECT的结果符合缓存条件即会缓存，否则，不予缓存，显式指定 SQL_NO_CACHE，不予缓存</td></tr><tr><td>DEMAND 或 2</td><td>查询缓存功能按需进行，显式指定 SQL_CACHE 的SELECT语句才会缓存；其它均不予缓存</td></tr></tbody></table><blockquote><p><code>在 /usr/my.cnf 配置中，增加以下配置 ：</code> </p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">query_cache_type=1</span><br></pre></td></tr></table></figure><blockquote><p>配置完毕之后，重启服务既可生效 ；</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service mysql restart;</span><br></pre></td></tr></table></figure><blockquote><p>然后就可以在命令行执行SQL语句进行验证 ，执行一条比较耗时的SQL语句，然后再多执行几次，查看后面几次的执行时间；获取通过查看查询缓存的缓存命中数，来判定是否走查询缓存。</p></blockquote><p><img src="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/image-20200729234700841.png" alt="image-20200729234700841"></p><h4 id="4-查询缓存SELECT选项"><a href="#4-查询缓存SELECT选项" class="headerlink" title="4. 查询缓存SELECT选项"></a>4. 查询缓存SELECT选项</h4><blockquote><p>可以在 select 语句中指定两个与查询缓存相关的选项 ：</p><ol><li><code>SQL_CACHE :</code> 如果查询结果是可缓存的，并且 query_cache_type 系统变量的值为ON或 DEMAND ，则缓存查询结果 。</li><li><code>SQL_NO_CACHE :</code> 服务器不使用查询缓存。它既不检查查询缓存，也不检查结果是否已缓存，也不缓存查询结果。</li></ol></blockquote><p>例子：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">SQL_CACHE</span> * <span class="keyword">from</span> tb_user_md <span class="keyword">limit</span> <span class="number">1000000</span>,<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> SQL_NO_CACHE * <span class="keyword">from</span> tb_user_md <span class="keyword">limit</span> <span class="number">1000000</span>,<span class="number">10</span>;</span><br></pre></td></tr></table></figure><h4 id="5-查询缓存失效的情况"><a href="#5-查询缓存失效的情况" class="headerlink" title="5. 查询缓存失效的情况"></a>5. 查询缓存失效的情况</h4><blockquote><p>SQL 语句不一致的情况， 要想命中查询缓存，<code>查询的SQL语句必须一致。</code></p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SQL1 : <span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> tb_item;</span><br><span class="line">SQL2 : <span class="keyword">Select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> tb_item;</span><br></pre></td></tr></table></figure><blockquote><p>当查询语句中有一些不确定的时，则不会缓存。如 ： <code>now() , current_date() , curdate() , curtime() , rand() , uuid() , user() , database()</code></p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SQL1 : <span class="keyword">select</span> * <span class="keyword">from</span> tb_item <span class="keyword">where</span> updatetime &lt; <span class="keyword">now</span>() <span class="keyword">limit</span> <span class="number">1</span>;</span><br><span class="line">SQL2 : <span class="keyword">select</span> <span class="keyword">user</span>();</span><br><span class="line">SQL3 : <span class="keyword">select</span> <span class="keyword">database</span>();</span><br></pre></td></tr></table></figure><blockquote><p>不使用任何表查询语句。</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="string">'A'</span>;</span><br></pre></td></tr></table></figure><blockquote><p><code>查询 mysql， information_schema 或  performance_schema 数据库中的表时，不会走查询缓存。</code></p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> information_schema.engines;</span><br></pre></td></tr></table></figure><blockquote><p>在存储的函数，触发器或事件的主体内执行的查询。</p><p>如果表更改，则使用该表的所有高速缓存查询都将变为无效并从高速缓存中删除。这包括使用<code>MERGE</code>映射到已更改表的表的查询。一个表可以被许多类型的语句，如被改变 INSERT， UPDATE， DELETE， TRUNCATE TABLE， ALTER TABLE， DROP TABLE，或 DROP DATABASE 。</p></blockquote><h2 id="☆"><a href="#☆" class="headerlink" title="☆"></a>☆</h2>]]></content>
    
    
    <summary type="html">&lt;p&gt;胡未灭，鬓先秋，泪空流。此生谁料，心在天山，身老沧洲。&lt;/p&gt;
&lt;p align=&quot;right&quot;&gt;——陆游《诉衷情》&lt;/p&gt;</summary>
    
    
    
    <category term="MySql高级" scheme="http://www.itbuild.cn/categories/MySql%E9%AB%98%E7%BA%A7/"/>
    
    
  </entry>
  
  <entry>
    <title>MySql高级/10.MySql高级之应用优化</title>
    <link href="http://www.itbuild.cn/2020/12/19/MySql%E9%AB%98%E7%BA%A7/10.MySql%E9%AB%98%E7%BA%A7%E4%B9%8B%E5%BA%94%E7%94%A8%E4%BC%98%E5%8C%96/"/>
    <id>http://www.itbuild.cn/2020/12/19/MySql%E9%AB%98%E7%BA%A7/10.MySql%E9%AB%98%E7%BA%A7%E4%B9%8B%E5%BA%94%E7%94%A8%E4%BC%98%E5%8C%96/</id>
    <published>2020-12-19T13:45:41.700Z</published>
    <updated>2020-12-19T14:02:51.488Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>大江东去，浪淘尽，千古风流人物。</p><p align="right">——苏轼《念奴娇》</p><a id="more"></a>## MySql高级之应用优化<blockquote><p>前面我们学习了很多数据库的优化措施。但是在实际生产环境中，由于数据库本身的性能局限，就必须要对前台的应用进行一些优化，来降低数据库的访问压力。</p></blockquote><h4 id="1-连接池"><a href="#1-连接池" class="headerlink" title="1. 连接池"></a>1. 连接池</h4><blockquote><p>对于访问数据库来说，<code>建立连接的代价是比较昂贵的</code>，因为我们频繁的创建关闭连接，是比较耗费资源的，我们有必要建立<code>数据库连接池</code>，以提高访问的性能。</p></blockquote><h4 id="2-减少对MySQL的访问"><a href="#2-减少对MySQL的访问" class="headerlink" title="2. 减少对MySQL的访问"></a>2. 减少对MySQL的访问</h4><h5 id="2-1-避免对数据进行重复检索"><a href="#2-1-避免对数据进行重复检索" class="headerlink" title="2.1 避免对数据进行重复检索"></a>2.1 避免对数据进行重复检索</h5><blockquote><p>在编写应用代码时，需要能够理清对数据库的访问逻辑。能够一次连接就获取到结果的，就不用两次连接，这样可以大大减少对数据库无用的重复请求。</p></blockquote><blockquote><p>比如 ，需要获取书籍的id 和name字段 ， 则查询如下： </p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">id</span>,<span class="keyword">name</span> <span class="keyword">from</span> tb_book;</span><br></pre></td></tr></table></figure><blockquote><p>之后，在业务逻辑中有需要获取到书籍状态信息， 则查询如下：</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">id</span>,<span class="keyword">status</span> <span class="keyword">from</span> tb_book;</span><br></pre></td></tr></table></figure><blockquote><p>这样，就需要向数据库提交两次请求，数据库就要做两次查询操作。其实完全可以用一条SQL语句得到想要的结果。</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">id</span>,<span class="keyword">name</span>,<span class="keyword">status</span> <span class="keyword">from</span> tb_book;</span><br></pre></td></tr></table></figure><h5 id="2-2-增加cache层"><a href="#2-2-增加cache层" class="headerlink" title="2.2 增加cache层"></a>2.2 增加cache层</h5><blockquote><p>在应用中，我们可以在应用中增加 缓存 层来达到减轻数据库负担的目的。缓存层有很多种，也有很多实现方式，只要能达到降低数据库的负担又能满足应用需求就可以。</p><p>因此可以部分数据从数据库中抽取出来放到应用端以文本方式存储， 或者使用框架(Mybatis, Hibernate)提供的一级缓存/二级缓存，或者使用redis数据库来缓存数据 。</p></blockquote><h4 id="3-负载均衡"><a href="#3-负载均衡" class="headerlink" title="3. 负载均衡"></a>3. 负载均衡</h4><blockquote><p>负载均衡是应用中使用非常普遍的一种优化方法，它的机制就是利用某种均衡算法，将固定的负载量分布到不同的服务器上， 以此来降低单台服务器的负载，达到优化的效果。</p></blockquote><h5 id="3-1-利用MySQL复制分流查询"><a href="#3-1-利用MySQL复制分流查询" class="headerlink" title="3.1 利用MySQL复制分流查询"></a>3.1 利用MySQL复制分流查询</h5><blockquote><p>通过MySQL的<code>主从复制</code>，实现读写分离，使增删改操作走主节点，查询操作走从节点，从而可以降低单台服务器的读写压力。</p></blockquote><p><img src="/https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/1.jpg" alt="1"> </p><h5 id="3-2-采用分布式数据库架构"><a href="#3-2-采用分布式数据库架构" class="headerlink" title="3.2 采用分布式数据库架构"></a>3.2 采用分布式数据库架构</h5><blockquote><p>分布式数据库架构适合大数据量、负载高的情况，它有良好的拓展性和高可用性。通过在多台服务器之间分布数据，可以实现在多台服务器之间的负载均衡，提高访问效率。</p></blockquote><h2 id="☆"><a href="#☆" class="headerlink" title="☆"></a>☆</h2>]]></content>
    
    
    <summary type="html">&lt;p&gt;大江东去，浪淘尽，千古风流人物。&lt;/p&gt;
&lt;p align=&quot;right&quot;&gt;——苏轼《念奴娇》&lt;/p&gt;</summary>
    
    
    
    <category term="MySql高级" scheme="http://www.itbuild.cn/categories/MySql%E9%AB%98%E7%BA%A7/"/>
    
    
  </entry>
  
  <entry>
    <title>MySql高级/9.MySql高级之SQL优化</title>
    <link href="http://www.itbuild.cn/2020/12/19/MySql%E9%AB%98%E7%BA%A7/9.MySql%E9%AB%98%E7%BA%A7%E4%B9%8BSQL%E4%BC%98%E5%8C%96/"/>
    <id>http://www.itbuild.cn/2020/12/19/MySql%E9%AB%98%E7%BA%A7/9.MySql%E9%AB%98%E7%BA%A7%E4%B9%8BSQL%E4%BC%98%E5%8C%96/</id>
    <published>2020-12-19T13:45:41.698Z</published>
    <updated>2020-12-19T14:02:53.163Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>老夫聊发少年狂，左牵黄，右擎苍，锦帽貂裘，千骑卷平冈。</p><p align="right">——苏轼《江城子》</p><a id="more"></a><h2 id="MySql高级之SQL优化"><a href="#MySql高级之SQL优化" class="headerlink" title="MySql高级之SQL优化"></a>MySql高级之SQL优化</h2><h3 id="1-大批量插入数据"><a href="#1-大批量插入数据" class="headerlink" title="1. 大批量插入数据"></a>1. 大批量插入数据</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 环境准备</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`tb_user_dm`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`username`</span> <span class="built_in">varchar</span>(<span class="number">45</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`password`</span> <span class="built_in">varchar</span>(<span class="number">96</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">45</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`birthday`</span> datetime <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`sex`</span> <span class="built_in">char</span>(<span class="number">1</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`email`</span> <span class="built_in">varchar</span>(<span class="number">45</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`phone`</span> <span class="built_in">varchar</span>(<span class="number">45</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`qq`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`status`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'用户状态'</span>,</span><br><span class="line">  <span class="string">`create_time`</span> datetime <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`update_time`</span> datetime <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>),</span><br><span class="line">  <span class="keyword">UNIQUE</span> <span class="keyword">KEY</span> <span class="string">`unique_user_username`</span> (<span class="string">`username`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8 ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`tb_user_md`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`username`</span> <span class="built_in">varchar</span>(<span class="number">45</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`password`</span> <span class="built_in">varchar</span>(<span class="number">96</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">45</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`birthday`</span> datetime <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`sex`</span> <span class="built_in">char</span>(<span class="number">1</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`email`</span> <span class="built_in">varchar</span>(<span class="number">45</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`phone`</span> <span class="built_in">varchar</span>(<span class="number">45</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`qq`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`status`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'用户状态'</span>,</span><br><span class="line">  <span class="string">`create_time`</span> datetime <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`update_time`</span> datetime <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>),</span><br><span class="line">  <span class="keyword">UNIQUE</span> <span class="keyword">KEY</span> <span class="string">`unique_user_username`</span> (<span class="string">`username`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8 ;</span><br></pre></td></tr></table></figure><blockquote><p>当使用<code>load 命令</code>导入数据的时候，适当的设置可以提高导入的效率。</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--环境准备 ： </span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`tb_user_2`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`username`</span> <span class="built_in">varchar</span>(<span class="number">45</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`password`</span> <span class="built_in">varchar</span>(<span class="number">96</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">45</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`birthday`</span> datetime <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`sex`</span> <span class="built_in">char</span>(<span class="number">1</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`email`</span> <span class="built_in">varchar</span>(<span class="number">45</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`phone`</span> <span class="built_in">varchar</span>(<span class="number">45</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`qq`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`status`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'用户状态'</span>,</span><br><span class="line">  <span class="string">`create_time`</span> datetime <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`update_time`</span> datetime <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>),</span><br><span class="line">  <span class="keyword">UNIQUE</span> <span class="keyword">KEY</span> <span class="string">`unique_user_username`</span> (<span class="string">`username`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8 ;</span><br></pre></td></tr></table></figure><p>当使用load 命令导入数据的时候，适当的设置可以提高导入的效率。</p><p><img src="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/1556269346488.png" alt="1556269346488"> </p><p><code>对于 InnoDB 类型的表，有以下几种方式可以提高导入的效率：</code></p><h5 id="1-1-主键顺序插入"><a href="#1-1-主键顺序插入" class="headerlink" title="1.1 主键顺序插入"></a>1.1 主键顺序插入</h5><p>因为InnoDB类型的表是按照主键的顺序保存的，所以将导入的数据按照主键的顺序排列，可以有效的提高导入数据的效率。如果InnoDB表没有主键，那么系统会自动默认创建一个内部列作为主键，所以如果可以给表创建一个主键，将可以利用这点，来提高导入数据的效率。</p><blockquote><p>脚本文件介绍 :</p><ul><li><a href="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/mysql_senior/sql1.log" target="_blank" rel="noopener">sql1.log</a>  —-&gt; 主键有序</li><li><a href="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/mysql_senior/sql2.log" target="_blank" rel="noopener">sql2.log</a>  —-&gt; 主键无序</li></ul></blockquote><h6 id="插入ID顺序排列数据"><a href="#插入ID顺序排列数据" class="headerlink" title="插入ID顺序排列数据"></a>插入ID顺序排列数据</h6><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">load</span> <span class="keyword">data</span> <span class="keyword">local</span> <span class="keyword">infile</span> <span class="string">'/opt/module/data/sql1.log'</span> <span class="keyword">into</span> <span class="keyword">table</span> tb_user_dm </span><br><span class="line"><span class="keyword">fields</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">','</span> </span><br><span class="line"><span class="keyword">lines</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">'\n'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> tb_user_dm;</span><br></pre></td></tr></table></figure><p><img src="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/image-20200729123930032.png" alt="image-20200729123930032"></p><h6 id="插入ID无序排列数据"><a href="#插入ID无序排列数据" class="headerlink" title="插入ID无序排列数据"></a>插入ID无序排列数据</h6><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">load</span> <span class="keyword">data</span> <span class="keyword">local</span> <span class="keyword">infile</span> <span class="string">'/opt/module/data/sql2.log'</span> <span class="keyword">into</span> <span class="keyword">table</span> tb_user_md</span><br><span class="line"><span class="keyword">fields</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">','</span> </span><br><span class="line"><span class="keyword">lines</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">'\n'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> tb_user_md;</span><br></pre></td></tr></table></figure><p><img src="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/image-20200729124438159.png" alt="image-20200729124438159"></p><h5 id="1-2-关闭唯一性校验"><a href="#1-2-关闭唯一性校验" class="headerlink" title="1.2 关闭唯一性校验"></a>1.2 关闭唯一性校验</h5><p>在导入数据前执行 <code>SET UNIQUE_CHECKS=0，</code>关闭唯一性校验，在导入结束后执行<code>SET UNIQUE_CHECKS=1</code>，恢复唯一性校验，可以提高导入的效率。 </p><h5 id="1-3-手动提交事务"><a href="#1-3-手动提交事务" class="headerlink" title="1.3 手动提交事务"></a>1.3 手动提交事务</h5><blockquote><p><code>如果应用使用自动提交的方式，建议在导入前执行 SET AUTOCOMMIT=0，关闭自动提交，导入结束后再执行 SET AUTOCOMMIT=1，打开自动提交，也可以提高导入的效率。</code></p></blockquote><h3 id="2-优化insert语句"><a href="#2-优化insert语句" class="headerlink" title="2. 优化insert语句"></a>2. 优化insert语句</h3><p>当进行数据的insert操作的时候，可以考虑采用以下几种优化方案。</p><ul><li><p><code>如果需要同时对一张表插入很多行数据时，</code>应该尽量使用多个值表的insert语句，这种方式将大大的缩减客户端与数据库之间的连接、关闭等消耗。使得效率比分开执行的单个insert语句快。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 原始方式为：</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">'Tom'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">'Cat'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">3</span>,<span class="string">'Jerry'</span>);</span><br><span class="line"><span class="comment">-- 优化后的方案为 ： </span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">'Tom'</span>),(<span class="number">2</span>,<span class="string">'Cat'</span>)，(<span class="number">3</span>,<span class="string">'Jerry'</span>);</span><br></pre></td></tr></table></figure></li><li><p><code>在事务中进行数据插入。</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">start</span> <span class="keyword">transaction</span>;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">'Tom'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">'Cat'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">3</span>,<span class="string">'Jerry'</span>);</span><br><span class="line"><span class="keyword">commit</span>;</span><br></pre></td></tr></table></figure></li><li><p><code>数据有序插入</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">4</span>,<span class="string">'Tim'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">'Tom'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">3</span>,<span class="string">'Jerry'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">5</span>,<span class="string">'Rose'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">'Cat'</span>);</span><br></pre></td></tr></table></figure><blockquote><p>优化后</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">'Tom'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">'Cat'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">3</span>,<span class="string">'Jerry'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">4</span>,<span class="string">'Tim'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">5</span>,<span class="string">'Rose'</span>);</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-优化order-by语句"><a href="#3-优化order-by语句" class="headerlink" title="3. 优化order by语句"></a>3. 优化order by语句</h3><h5 id="3-1-环境准备"><a href="#3-1-环境准备" class="headerlink" title="3.1 环境准备"></a>3.1 环境准备</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`emp`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`age`</span> <span class="built_in">int</span>(<span class="number">3</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`salary`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span>  <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`emp`</span> (<span class="string">`id`</span>, <span class="string">`name`</span>, <span class="string">`age`</span>, <span class="string">`salary`</span>) <span class="keyword">values</span>(<span class="string">'1'</span>,<span class="string">'Tom'</span>,<span class="string">'25'</span>,<span class="string">'2300'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`emp`</span> (<span class="string">`id`</span>, <span class="string">`name`</span>, <span class="string">`age`</span>, <span class="string">`salary`</span>) <span class="keyword">values</span>(<span class="string">'2'</span>,<span class="string">'Jerry'</span>,<span class="string">'30'</span>,<span class="string">'3500'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`emp`</span> (<span class="string">`id`</span>, <span class="string">`name`</span>, <span class="string">`age`</span>, <span class="string">`salary`</span>) <span class="keyword">values</span>(<span class="string">'3'</span>,<span class="string">'Luci'</span>,<span class="string">'25'</span>,<span class="string">'2800'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`emp`</span> (<span class="string">`id`</span>, <span class="string">`name`</span>, <span class="string">`age`</span>, <span class="string">`salary`</span>) <span class="keyword">values</span>(<span class="string">'4'</span>,<span class="string">'Jay'</span>,<span class="string">'36'</span>,<span class="string">'3500'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`emp`</span> (<span class="string">`id`</span>, <span class="string">`name`</span>, <span class="string">`age`</span>, <span class="string">`salary`</span>) <span class="keyword">values</span>(<span class="string">'5'</span>,<span class="string">'Tom2'</span>,<span class="string">'21'</span>,<span class="string">'2200'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`emp`</span> (<span class="string">`id`</span>, <span class="string">`name`</span>, <span class="string">`age`</span>, <span class="string">`salary`</span>) <span class="keyword">values</span>(<span class="string">'6'</span>,<span class="string">'Jerry2'</span>,<span class="string">'31'</span>,<span class="string">'3300'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`emp`</span> (<span class="string">`id`</span>, <span class="string">`name`</span>, <span class="string">`age`</span>, <span class="string">`salary`</span>) <span class="keyword">values</span>(<span class="string">'7'</span>,<span class="string">'Luci2'</span>,<span class="string">'26'</span>,<span class="string">'2700'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`emp`</span> (<span class="string">`id`</span>, <span class="string">`name`</span>, <span class="string">`age`</span>, <span class="string">`salary`</span>) <span class="keyword">values</span>(<span class="string">'8'</span>,<span class="string">'Jay2'</span>,<span class="string">'33'</span>,<span class="string">'3500'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`emp`</span> (<span class="string">`id`</span>, <span class="string">`name`</span>, <span class="string">`age`</span>, <span class="string">`salary`</span>) <span class="keyword">values</span>(<span class="string">'9'</span>,<span class="string">'Tom3'</span>,<span class="string">'23'</span>,<span class="string">'2400'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`emp`</span> (<span class="string">`id`</span>, <span class="string">`name`</span>, <span class="string">`age`</span>, <span class="string">`salary`</span>) <span class="keyword">values</span>(<span class="string">'10'</span>,<span class="string">'Jerry3'</span>,<span class="string">'32'</span>,<span class="string">'3100'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`emp`</span> (<span class="string">`id`</span>, <span class="string">`name`</span>, <span class="string">`age`</span>, <span class="string">`salary`</span>) <span class="keyword">values</span>(<span class="string">'11'</span>,<span class="string">'Luci3'</span>,<span class="string">'26'</span>,<span class="string">'2900'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`emp`</span> (<span class="string">`id`</span>, <span class="string">`name`</span>, <span class="string">`age`</span>, <span class="string">`salary`</span>) <span class="keyword">values</span>(<span class="string">'12'</span>,<span class="string">'Jay3'</span>,<span class="string">'37'</span>,<span class="string">'4500'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> idx_emp_age_salary <span class="keyword">on</span> emp(age,salary);</span><br></pre></td></tr></table></figure><h5 id="3-2-两种排序方式"><a href="#3-2-两种排序方式" class="headerlink" title="3.2 两种排序方式"></a>3.2 两种排序方式</h5><blockquote><p>第一种是通过对返回数据进行排序，也就是通常说的 filesort 排序，所有不是通过索引直接返回排序结果的排序都叫 FileSort 排序。</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> age <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure><p><img src="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/image-20200729141354439.png" alt="image-20200729141354439"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> age <span class="keyword">asc</span>;</span><br></pre></td></tr></table></figure><p><img src="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/image-20200729141808788.png" alt="image-20200729141808788"></p><blockquote><p>第二种通过有序索引顺序扫描直接返回有序数据，<code>这种情况即为 using index，不需要额外排序，操作效率高。</code></p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> age <span class="keyword">asc</span>;</span><br></pre></td></tr></table></figure><p><img src="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/image-20200729142124645.png" alt="image-20200729142124645"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> <span class="keyword">id</span>,age <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> age <span class="keyword">asc</span>;</span><br></pre></td></tr></table></figure><p><img src="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/image-20200729142211784.png" alt="image-20200729142211784"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> <span class="keyword">id</span>,age,salary <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> age <span class="keyword">asc</span>;</span><br></pre></td></tr></table></figure><p><img src="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/image-20200729142653410.png" alt="image-20200729142653410"></p><blockquote><p>多字段排序</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> <span class="keyword">id</span>,age,salary <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> age,salary;</span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> <span class="keyword">id</span>,age,salary <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> age <span class="keyword">desc</span>,salary <span class="keyword">desc</span>;</span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> <span class="keyword">id</span>,age,salary <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> salary <span class="keyword">desc</span>,age <span class="keyword">desc</span>;</span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> <span class="keyword">id</span>,age,salary <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> age <span class="keyword">desc</span> ,salary <span class="keyword">asc</span>;</span><br></pre></td></tr></table></figure><p><img src="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/image-20200729143431541.png" alt="image-20200729143431541"></p><blockquote><p>了解了MySQL的排序方式，优化目标就清晰了：</p><ul><li>尽量减少额外的排序，通过索引直接返回有序数据。where 条件和Order by 使用相同的索引，并且Order By 的顺序和索引顺序相同， 并且Order  by 的字段都是升序，或者都是降序。否则肯定需要额外的操作，这样就会出现FileSort。</li></ul></blockquote><h5 id="3-3-Filesort-的优化"><a href="#3-3-Filesort-的优化" class="headerlink" title="3.3 Filesort 的优化"></a>3.3 Filesort 的优化</h5><blockquote><p>通过创建合适的索引，能够减少 Filesort 的出现，但是在某些情况下，条件限制不能让Filesort消失，那就需要加快 Filesort的排序操作。对于Filesort ， MySQL 有两种排序算法：</p><ol><li><p>两次扫描算法 ：MySQL4.1 之前，使用该方式排序。首先根据条件取出排序字段和行指针信息，然后在排序区 sort buffer 中排序，如果sort buffer不够，则在临时表 temporary table 中存储排序结果。完成排序之后，再根据行指针回表读取记录，该操作可能会导致大量随机I/O操作。</p></li><li><p>一次扫描算法：一次性取出满足条件的所有字段，然后在排序区 sort  buffer 中排序后直接输出结果集。排序时内存开销较大，但是排序效率比两次扫描算法要高。</p></li></ol><p>MySQL 通过比较系统变量 max_length_for_sort_data 的大小和Query语句取出的字段总大小， 来判定是否那种排序算法<code>，如果max_length_for_sort_data 更大，那么使用第二种优化之后的算法；否则使用第一种。</code></p><p><code>可以适当提高 sort_buffer_size  和 max_length_for_sort_data  系统变量，来增大排序区的大小，提高排序的效率。</code></p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">'max_length_for_sort_data'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">'sort_buffer_size'</span>;</span><br></pre></td></tr></table></figure><p><img src="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/image-20200729144553353.png" alt="image-20200729144553353"> </p><h3 id="4-优化group-by-语句"><a href="#4-优化group-by-语句" class="headerlink" title="4. 优化group by 语句"></a>4. 优化group by 语句</h3><p>由于group by 实际上也同样会进行排序操作，而且与order by 相比，group by 主要只是多了排序之后的分组操作。当然，如果在分组的时候还使用了其他的一些聚合函数，那么还需要一些聚合函数的计算。所以，在group by 的实现过程中，与 order by 一样也可以利用到索引。</p><p>如果查询包含 group by 但是用户想要避免排序结果的消耗， 则可以<code>执行order by null 禁止排序</code>。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">index</span> idx_emp_age_salary <span class="keyword">on</span> emp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> age,<span class="keyword">count</span>(*) <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> age;</span><br></pre></td></tr></table></figure><p><img src="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/image-20200729145001701.png" alt="image-20200729145001701">  </p><p>优化后</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> age,<span class="keyword">count</span>(*) <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> age <span class="keyword">order</span> <span class="keyword">by</span> <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><p><img src="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/1556339633161.png" alt="1556339633161">  </p><blockquote><p><code>从上面的例子可以看出，第一个SQL语句需要进行&quot;filesort&quot;，而第二个SQL由于order  by  null 不需要进行 &quot;filesort&quot;， 而上文提过Filesort往往非常耗费时间。</code></p></blockquote><p>创建索引 ：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> idx_emp_age_salary <span class="keyword">on</span> emp(age,salary);</span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> age,<span class="keyword">count</span>(*) <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> age <span class="keyword">order</span> <span class="keyword">by</span> <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><p><img src="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/image-20200729145306817.png" alt="image-20200729145306817"> </p><h3 id="5-优化嵌套查询"><a href="#5-优化嵌套查询" class="headerlink" title="5. 优化嵌套查询"></a>5. 优化嵌套查询</h3><p><code>Mysql4.1版本</code>之后，开始支持SQL的子查询。这个技术可以使用SELECT语句来创建一个单列的查询结果，然后把这个结果作为过滤条件用在另一个查询中。使用子查询可以一次性的完成很多逻辑上需要多个步骤才能完成的SQL操作，同时也可以避免事务或者表锁死，并且写起来也很容易。但是，<code>有些情况下，子查询是可以被更高效的连接（JOIN）替代。</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查找有角色的所有的用户信息 : </span></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> t_user <span class="keyword">where</span> <span class="keyword">id</span> <span class="keyword">in</span> (<span class="keyword">select</span> user_id <span class="keyword">from</span> user_role );</span><br></pre></td></tr></table></figure><blockquote><p>执行计划为 : </p></blockquote><p><img src="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/image-20200729145812592.png" alt="image-20200729145812592">   </p><blockquote><p>优化后 :</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> t_user u , user_role ur <span class="keyword">where</span> u.id = ur.user_id;</span><br></pre></td></tr></table></figure><p><img src="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/image-20200729145842138.png" alt="image-20200729145842138">   </p><blockquote><p><code>连接(Join)查询之所以更有效率一些 ，是因为MySQL不需要在内存中创建临时表来完成这个逻辑上需要两个步骤的查询工作</code>。</p></blockquote><h3 id="6-优化OR条件"><a href="#6-优化OR条件" class="headerlink" title="6. 优化OR条件"></a>6. 优化OR条件</h3><p>对于包含OR的查询子句，如果要利用索引，则OR之间的每个条件列都必须用到索引 ， 而且不能使用到复合索引； 如果没有索引，则应该考虑增加索引。</p><p>获取 emp 表中的所有的索引 ： </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">index</span> <span class="keyword">from</span> emp;</span><br></pre></td></tr></table></figure><p><img src="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/image-20200729150036520.png" alt="image-20200729150036520"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">1</span> <span class="keyword">or</span> age = <span class="number">30</span>;</span><br></pre></td></tr></table></figure><p><img src="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/1556354887509.png" alt="1556354887509"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">1</span> <span class="keyword">or</span> <span class="keyword">id</span> = <span class="number">10</span>\G;</span><br></pre></td></tr></table></figure><p><img src="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/1556354920964.png" alt="1556354920964">  </p><p>建议使用 union 替换 or ： </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">1</span> <span class="keyword">union</span> <span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">10</span>;</span><br></pre></td></tr></table></figure><p><img src="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/1556355027728.png" alt="1556355027728"> </p><blockquote><p>我们来比较下重要指标，发现主要差别是 type 和 ref 这两项</p><p>type 显示的是访问类型，是较为重要的一个指标，<code>结果值从好到坏依次是：system &gt; const &gt; eq_ref &gt; ref &gt; fulltext &gt; ref_or_null  &gt; index_merge &gt; unique_subquery &gt; index_subquery &gt; range &gt; index &gt; ALL</code></p><ul><li><code>UNION 语句的 type 值为 ref，OR 语句的 type 值为 range</code>，可以看到这是一个很明显的差距</li><li>UNION 语句的 ref 值为 const，OR 语句的 type 值为 null，const 表示是常量值引用，非常快</li></ul><p>这两项的差距就说明了 UNION 要优于 OR 。</p></blockquote><h3 id="7-优化分页查询"><a href="#7-优化分页查询" class="headerlink" title="7. 优化分页查询"></a>7. 优化分页查询</h3><blockquote><p><code>一般分页查询时，通过创建覆盖索引能够比较好地提高性能。一个常见又非常头疼的问题就是 limit 2000000,10  ，此时需要MySQL排序前2000010 记录，仅仅返回2000000 - 2000010 的记录，其他记录丢弃，查询排序的代价非常大 。</code></p></blockquote><p><img src="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/1556361314783.png" alt="1556361314783"> </p><h5 id="7-1-优化思路一"><a href="#7-1-优化思路一" class="headerlink" title="7.1 优化思路一"></a>7.1 优化思路一</h5><blockquote><p>在索引上完成排序分页操作，最后根据主键关联回原表查询所需要的其他列内容。</p></blockquote><p>![1556416102800](../../../../../大数据/资料-MySQL高级教程/MySQL 高级 - day-02/文档/<a href="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql高级/1556416102800.png" target="_blank" rel="noopener">https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql高级/1556416102800.png</a>) </p><h5 id="7-2-优化思路二"><a href="#7-2-优化思路二" class="headerlink" title="7.2 优化思路二"></a>7.2 优化思路二</h5><blockquote><p>该方案适用于主键自增的表，可以把Limit 查询转换成某个位置的查询 。</p></blockquote><p><img src="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/1556363928151.png" alt="1556363928151"> </p><h3 id="8-使用SQL提示"><a href="#8-使用SQL提示" class="headerlink" title="8. 使用SQL提示"></a>8. 使用SQL提示</h3><blockquote><p>SQL提示，是优化数据库的一个重要手段，简单来说，就是在SQL语句中加入一些人为的提示来达到优化操作的目的。</p></blockquote><h5 id="8-1-USE-INDEX"><a href="#8-1-USE-INDEX" class="headerlink" title="8.1  USE INDEX"></a>8.1  USE INDEX</h5><p>在查询语句中表名的后面，添加 use index 来提供希望MySQL去参考的索引列表，就可以让MySQL不再考虑其他可用的索引。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">create index idx_seller_name_sta_add on tb_seller(name,status,address);</span><br><span class="line">create index idx_seller_name on tb_seller(name);</span><br><span class="line"></span><br><span class="line">explain select * from tb_seller where name &#x3D; &#39;小米科技&#39;;</span><br><span class="line">explain select * from tb_seller use index(inx_seller_name) where name &#x3D; &#39;小米科技&#39;;</span><br></pre></td></tr></table></figure><p><img src="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/1556370971576-1596006821111.png" alt="1556370971576"> </p><h5 id="8-2-IGNORE-INDEX"><a href="#8-2-IGNORE-INDEX" class="headerlink" title="8.2 IGNORE INDEX"></a>8.2 IGNORE INDEX</h5><p>如果用户只是单纯的想让MySQL忽略一个或者多个索引，则可以使用 ignore index 作为 hint 。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain select * from tb_seller ignore index(idx_seller_name) where name &#x3D; &#39;小米科技&#39;;</span><br></pre></td></tr></table></figure><p><img src="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/1556371004594.png" alt="1556371004594"> </p><h5 id="8-3-FORCE-INDEX"><a href="#8-3-FORCE-INDEX" class="headerlink" title="8.3 FORCE INDEX"></a>8.3 FORCE INDEX</h5><p>为强制MySQL使用一个特定的索引，可在查询中使用 force index 作为hint 。 </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> idx_seller_address <span class="keyword">on</span> tb_seller(address);</span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">where</span> address=<span class="string">'北京市'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">use</span> <span class="keyword">index</span>(idx_seller_address) <span class="keyword">where</span> address=<span class="string">'北京市'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">force</span> <span class="keyword">index</span>(idx_seller_address) <span class="keyword">where</span> address=<span class="string">'北京市'</span>;</span><br></pre></td></tr></table></figure><p><img src="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/1556371355788.png" alt="1556371355788"> </p><h2 id="☆"><a href="#☆" class="headerlink" title="☆"></a>☆</h2>]]></content>
    
    
    <summary type="html">&lt;p&gt;老夫聊发少年狂，左牵黄，右擎苍，锦帽貂裘，千骑卷平冈。&lt;/p&gt;
&lt;p align=&quot;right&quot;&gt;——苏轼《江城子》&lt;/p&gt;</summary>
    
    
    
    <category term="MySql高级" scheme="http://www.itbuild.cn/categories/MySql%E9%AB%98%E7%BA%A7/"/>
    
    
  </entry>
  
  <entry>
    <title>MySql高级/8.MySql高级之索引的使用</title>
    <link href="http://www.itbuild.cn/2020/12/19/MySql%E9%AB%98%E7%BA%A7/8.MySql%E9%AB%98%E7%BA%A7%E4%B9%8B%E7%B4%A2%E5%BC%95%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://www.itbuild.cn/2020/12/19/MySql%E9%AB%98%E7%BA%A7/8.MySql%E9%AB%98%E7%BA%A7%E4%B9%8B%E7%B4%A2%E5%BC%95%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
    <published>2020-12-19T13:45:41.696Z</published>
    <updated>2020-12-19T14:02:53.070Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>有悲欢离合，月有阴晴圆缺，此事古难全。</p><p align="right">——苏轼《水调歌头》</p><a id="more"></a><h2 id="MySql高级之索引的使用"><a href="#MySql高级之索引的使用" class="headerlink" title="MySql高级之索引的使用"></a>MySql高级之索引的使用</h2><blockquote><p><code>索引是数据库优化最常用也是最重要的手段之一, 通过索引通常可以帮助用户解决大多数的MySQL的性能优化问题。</code></p></blockquote><h4 id="1-验证索引提升查询效率"><a href="#1-验证索引提升查询效率" class="headerlink" title="1. 验证索引提升查询效率"></a>1. 验证索引提升查询效率</h4><blockquote><p>在我们准备的表结构<code>tb_item</code> 中， 一共存储了 300 万记录；</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 根据ID查询 </span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> tb_item <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">1999</span>\G;</span><br></pre></td></tr></table></figure><img src="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql高级/clip_image002.jpg" alt="img" style="zoom:150%;" /><blockquote><p> 查询速度很快， 接近0s ， 主要的原因是因为id为主键， 有索引；</p></blockquote><img src="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql高级/clip_image004.jpg" alt="img" style="zoom:150%;" /><blockquote><p>根据 title 进行精确查询</p></blockquote> <img src="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql高级/image-20200728150734243.png" alt="image-20200728150734243" style="zoom:150%;" /><blockquote><p>查看SQL语句的执行计划 ：</p></blockquote><img src="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql高级/clip_image008.jpg" alt="img" style="zoom:150%;" /><blockquote><p>处理方案 ， 针对title字段， 创建索引 ：</p></blockquote> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> idx_item_title <span class="keyword">on</span> tb_item(title);</span><br></pre></td></tr></table></figure><blockquote><p>索引创建完成之后，再次进行查询 ：</p></blockquote><p> More Actions<img src="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql高级/clip_image012.jpg" alt="img" style="zoom:150%;" /></p><blockquote><p>通过explain ， 查看执行计划，执行SQL时使用了刚才创建的索引</p></blockquote><img src="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql高级/clip_image014.jpg" alt="img" style="zoom:150%;" /><h4 id="2-索引的使用"><a href="#2-索引的使用" class="headerlink" title="2. 索引的使用"></a>2. 索引的使用</h4><h5 id="2-1-准备环境"><a href="#2-1-准备环境" class="headerlink" title="2.1 准备环境"></a>2.1 准备环境</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="string">`tb_seller`</span> (</span><br><span class="line"><span class="string">`sellerid`</span> <span class="built_in">varchar</span> (<span class="number">100</span>),</span><br><span class="line"><span class="string">`name`</span> <span class="built_in">varchar</span> (<span class="number">100</span>),</span><br><span class="line"><span class="string">`nickname`</span> <span class="built_in">varchar</span> (<span class="number">50</span>),</span><br><span class="line"><span class="string">`password`</span> <span class="built_in">varchar</span> (<span class="number">60</span>),</span><br><span class="line"><span class="string">`status`</span> <span class="built_in">varchar</span> (<span class="number">1</span>),</span><br><span class="line"><span class="string">`address`</span> <span class="built_in">varchar</span> (<span class="number">100</span>),</span><br><span class="line"><span class="string">`createtime`</span> datetime,</span><br><span class="line">    primary <span class="keyword">key</span>(<span class="string">`sellerid`</span>)</span><br><span class="line">)<span class="keyword">engine</span>=<span class="keyword">innodb</span> <span class="keyword">default</span> <span class="keyword">charset</span>=utf8mb4; </span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`tb_seller`</span> (<span class="string">`sellerid`</span>, <span class="string">`name`</span>, <span class="string">`nickname`</span>, <span class="string">`password`</span>, <span class="string">`status`</span>, <span class="string">`address`</span>, <span class="string">`createtime`</span>) <span class="keyword">values</span>(<span class="string">'alibaba'</span>,<span class="string">'阿里巴巴'</span>,<span class="string">'阿里小店'</span>,<span class="string">'e10adc3949ba59abbe56e057f20f883e'</span>,<span class="string">'1'</span>,<span class="string">'北京市'</span>,<span class="string">'2088-01-01 12:00:00'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`tb_seller`</span> (<span class="string">`sellerid`</span>, <span class="string">`name`</span>, <span class="string">`nickname`</span>, <span class="string">`password`</span>, <span class="string">`status`</span>, <span class="string">`address`</span>, <span class="string">`createtime`</span>) <span class="keyword">values</span>(<span class="string">'baidu'</span>,<span class="string">'百度科技有限公司'</span>,<span class="string">'百度小店'</span>,<span class="string">'e10adc3949ba59abbe56e057f20f883e'</span>,<span class="string">'1'</span>,<span class="string">'北京市'</span>,<span class="string">'2088-01-01 12:00:00'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`tb_seller`</span> (<span class="string">`sellerid`</span>, <span class="string">`name`</span>, <span class="string">`nickname`</span>, <span class="string">`password`</span>, <span class="string">`status`</span>, <span class="string">`address`</span>, <span class="string">`createtime`</span>) <span class="keyword">values</span>(<span class="string">'huawei'</span>,<span class="string">'华为科技有限公司'</span>,<span class="string">'华为小店'</span>,<span class="string">'e10adc3949ba59abbe56e057f20f883e'</span>,<span class="string">'0'</span>,<span class="string">'北京市'</span>,<span class="string">'2088-01-01 12:00:00'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`tb_seller`</span> (<span class="string">`sellerid`</span>, <span class="string">`name`</span>, <span class="string">`nickname`</span>, <span class="string">`password`</span>, <span class="string">`status`</span>, <span class="string">`address`</span>, <span class="string">`createtime`</span>) <span class="keyword">values</span>(<span class="string">'itcast'</span>,<span class="string">'传智播客教育科技有限公司'</span>,<span class="string">'传智播客'</span>,<span class="string">'e10adc3949ba59abbe56e057f20f883e'</span>,<span class="string">'1'</span>,<span class="string">'北京市'</span>,<span class="string">'2088-01-01 12:00:00'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`tb_seller`</span> (<span class="string">`sellerid`</span>, <span class="string">`name`</span>, <span class="string">`nickname`</span>, <span class="string">`password`</span>, <span class="string">`status`</span>, <span class="string">`address`</span>, <span class="string">`createtime`</span>) <span class="keyword">values</span>(<span class="string">'itheima'</span>,<span class="string">'黑马程序员'</span>,<span class="string">'黑马程序员'</span>,<span class="string">'e10adc3949ba59abbe56e057f20f883e'</span>,<span class="string">'0'</span>,<span class="string">'北京市'</span>,<span class="string">'2088-01-01 12:00:00'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`tb_seller`</span> (<span class="string">`sellerid`</span>, <span class="string">`name`</span>, <span class="string">`nickname`</span>, <span class="string">`password`</span>, <span class="string">`status`</span>, <span class="string">`address`</span>, <span class="string">`createtime`</span>) <span class="keyword">values</span>(<span class="string">'luoji'</span>,<span class="string">'罗技科技有限公司'</span>,<span class="string">'罗技小店'</span>,<span class="string">'e10adc3949ba59abbe56e057f20f883e'</span>,<span class="string">'1'</span>,<span class="string">'北京市'</span>,<span class="string">'2088-01-01 12:00:00'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`tb_seller`</span> (<span class="string">`sellerid`</span>, <span class="string">`name`</span>, <span class="string">`nickname`</span>, <span class="string">`password`</span>, <span class="string">`status`</span>, <span class="string">`address`</span>, <span class="string">`createtime`</span>) <span class="keyword">values</span>(<span class="string">'oppo'</span>,<span class="string">'OPPO科技有限公司'</span>,<span class="string">'OPPO官方旗舰店'</span>,<span class="string">'e10adc3949ba59abbe56e057f20f883e'</span>,<span class="string">'0'</span>,<span class="string">'北京市'</span>,<span class="string">'2088-01-01 12:00:00'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`tb_seller`</span> (<span class="string">`sellerid`</span>, <span class="string">`name`</span>, <span class="string">`nickname`</span>, <span class="string">`password`</span>, <span class="string">`status`</span>, <span class="string">`address`</span>, <span class="string">`createtime`</span>) <span class="keyword">values</span>(<span class="string">'ourpalm'</span>,<span class="string">'掌趣科技股份有限公司'</span>,<span class="string">'掌趣小店'</span>,<span class="string">'e10adc3949ba59abbe56e057f20f883e'</span>,<span class="string">'1'</span>,<span class="string">'北京市'</span>,<span class="string">'2088-01-01 12:00:00'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`tb_seller`</span> (<span class="string">`sellerid`</span>, <span class="string">`name`</span>, <span class="string">`nickname`</span>, <span class="string">`password`</span>, <span class="string">`status`</span>, <span class="string">`address`</span>, <span class="string">`createtime`</span>) <span class="keyword">values</span>(<span class="string">'qiandu'</span>,<span class="string">'千度科技'</span>,<span class="string">'千度小店'</span>,<span class="string">'e10adc3949ba59abbe56e057f20f883e'</span>,<span class="string">'2'</span>,<span class="string">'北京市'</span>,<span class="string">'2088-01-01 12:00:00'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`tb_seller`</span> (<span class="string">`sellerid`</span>, <span class="string">`name`</span>, <span class="string">`nickname`</span>, <span class="string">`password`</span>, <span class="string">`status`</span>, <span class="string">`address`</span>, <span class="string">`createtime`</span>) <span class="keyword">values</span>(<span class="string">'sina'</span>,<span class="string">'新浪科技有限公司'</span>,<span class="string">'新浪官方旗舰店'</span>,<span class="string">'e10adc3949ba59abbe56e057f20f883e'</span>,<span class="string">'1'</span>,<span class="string">'北京市'</span>,<span class="string">'2088-01-01 12:00:00'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`tb_seller`</span> (<span class="string">`sellerid`</span>, <span class="string">`name`</span>, <span class="string">`nickname`</span>, <span class="string">`password`</span>, <span class="string">`status`</span>, <span class="string">`address`</span>, <span class="string">`createtime`</span>) <span class="keyword">values</span>(<span class="string">'xiaomi'</span>,<span class="string">'小米科技'</span>,<span class="string">'小米官方旗舰店'</span>,<span class="string">'e10adc3949ba59abbe56e057f20f883e'</span>,<span class="string">'1'</span>,<span class="string">'西安市'</span>,<span class="string">'2088-01-01 12:00:00'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`tb_seller`</span> (<span class="string">`sellerid`</span>, <span class="string">`name`</span>, <span class="string">`nickname`</span>, <span class="string">`password`</span>, <span class="string">`status`</span>, <span class="string">`address`</span>, <span class="string">`createtime`</span>) <span class="keyword">values</span>(<span class="string">'yijia'</span>,<span class="string">'宜家家居'</span>,<span class="string">'宜家家居旗舰店'</span>,<span class="string">'e10adc3949ba59abbe56e057f20f883e'</span>,<span class="string">'1'</span>,<span class="string">'北京市'</span>,<span class="string">'2088-01-01 12:00:00'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建复合索引</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> idx_seller_name_sta_addr <span class="keyword">on</span> tb_seller(<span class="keyword">name</span>,<span class="keyword">status</span>,address);</span><br></pre></td></tr></table></figure><h5 id="2-2-避免索引失效"><a href="#2-2-避免索引失效" class="headerlink" title="2.2 避免索引失效"></a>2.2 避免索引失效</h5><h6 id="全值匹配-，对索引中所有列都指定具体值。"><a href="#全值匹配-，对索引中所有列都指定具体值。" class="headerlink" title="全值匹配 ，对索引中所有列都指定具体值。"></a>全值匹配 ，对索引中所有列都指定具体值。</h6><blockquote><p>该情况下，索引生效，执行效率高。</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">'小米科技'</span> <span class="keyword">and</span> <span class="keyword">status</span>=<span class="string">'1'</span> <span class="keyword">and</span> address=<span class="string">'北京市'</span>\G;</span><br></pre></td></tr></table></figure><p><img src="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/1556170997921.png" alt="1556170997921"> </p><h6 id="最左前缀法则"><a href="#最左前缀法则" class="headerlink" title="最左前缀法则"></a>最左前缀法则</h6><blockquote><p>如果索引了多列，要遵守最左前缀法则。指的是查询从索引的最左前列开始，并且不跳过索引中的列。</p><p>匹配最左前缀法则，走索引：</p></blockquote><p><img src="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/1556171348995.png" alt="1556171348995">  </p><blockquote><p>违法最左前缀法则 ， 索引失效：</p></blockquote><p><img src="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/1556171428140.png" alt="1556171428140"> </p><blockquote><p>如果符合最左法则，但是出现跳跃某一列，只有最左列索引生效：</p></blockquote><p><img src="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/1556171662203.png" alt="1556171662203"> </p><blockquote><p>范围查询右边的列，不能使用索引 。</p></blockquote><p><img src="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/1556172256791.png" alt="1556172256791"> </p><blockquote><p>根据前面的两个字段name ， status 查询是走索引的， 但是最后一个条件address 没有用到索引。</p></blockquote><h6 id="不要在索引列上进行运算操作，-索引将失效。"><a href="#不要在索引列上进行运算操作，-索引将失效。" class="headerlink" title="不要在索引列上进行运算操作， 索引将失效。"></a>不要在索引列上进行运算操作， 索引将失效。</h6><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">where</span> <span class="keyword">substring</span>(<span class="keyword">name</span>,<span class="number">3</span>,<span class="number">2</span>) = <span class="string">'科技'</span>;</span><br></pre></td></tr></table></figure><p><img src="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/1556172813715.png" alt="1556172813715"> </p><h6 id="字符串不加单引号，造成索引失效。"><a href="#字符串不加单引号，造成索引失效。" class="headerlink" title="字符串不加单引号，造成索引失效。"></a>字符串不加单引号，造成索引失效。</h6><p><img src="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/1556172967493.png" alt="1556172967493"> </p><blockquote><p>由于，在查询是，没有对字符串加单引号，MySQL的查询优化器，会自动的进行类型转换，造成索引失效。</p></blockquote><h6 id="尽量使用覆盖索引，避免select"><a href="#尽量使用覆盖索引，避免select" class="headerlink" title="尽量使用覆盖索引，避免select *"></a>尽量使用覆盖索引，避免select *</h6><blockquote><p><code>尽量使用覆盖索引（只访问索引的查询（索引列完全包含查询列）），减少select * 。</code></p></blockquote><p><img src="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/1556173928299.png" alt="1556173928299"> </p><blockquote><p>如果查询列，超出索引列，也会降低性能。</p></blockquote><p><img src="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/1556173986068.png" alt="1556173986068"> </p><blockquote><ul><li><p><code>using index ：使用覆盖索引的时候就会出现</code></p></li><li><p><code>using where：在查找使用索引的情况下，需要回表去查询所需的数据</code></p></li><li><p><code>using index condition：查找使用了索引，但是需要回表查询数据</code></p></li><li><p><code>using index ; using where：查找使用了索引，但是需要的数据都在索引列中能找到，所以不需要回表查询数据</code></p></li></ul></blockquote><h6 id="慎用or"><a href="#慎用or" class="headerlink" title="慎用or"></a>慎用or</h6><blockquote><ol><li>用or分割开的条件， 如果or前的条件中的列有索引，而后面的列中没有索引，那么涉及的索引都不会被用到。</li><li>示例，name字段是索引列 ， 而createtime不是索引列，中间是or进行连接是不走索引的 ： </li></ol></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">'黑马程序员'</span> <span class="keyword">or</span> createtime = <span class="string">'2088-01-01 12:00:00'</span>\G;</span><br></pre></td></tr></table></figure><p><img src="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/1556174994440.png" alt="1556174994440"> </p><h6 id="以-开头的Like模糊查询，索引失效。"><a href="#以-开头的Like模糊查询，索引失效。" class="headerlink" title="以%开头的Like模糊查询，索引失效。"></a>以%开头的Like模糊查询，索引失效。</h6><blockquote><p>如果仅仅是尾部模糊匹配，索引不会失效。如果是头部模糊匹配，索引失效。</p></blockquote><p><img src="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/1556175114369.png" alt="1556175114369"> </p><blockquote><p><code>解决方案 ： 通过覆盖索引来解决</code> </p></blockquote><p><img src="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/1556247686483.png" alt="1556247686483"> </p><h6 id="如果MySQL评估使用索引比全表更慢，则不使用索引。"><a href="#如果MySQL评估使用索引比全表更慢，则不使用索引。" class="headerlink" title="如果MySQL评估使用索引比全表更慢，则不使用索引。"></a>如果MySQL评估使用索引比全表更慢，则不使用索引。</h6><p><img src="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/1556175445210.png" alt="1556175445210"> </p><h6 id="is-NULL-，-is-NOT-NULL-有时索引失效。"><a href="#is-NULL-，-is-NOT-NULL-有时索引失效。" class="headerlink" title="is  NULL ， is NOT NULL  有时索引失效。"></a>is  NULL ， is NOT NULL  <font color='red'>有时</font>索引失效。</h6><p><img src="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/1556180634889.png" alt="1556180634889">  </p><h6 id="in-走索引，-not-in-索引失效。"><a href="#in-走索引，-not-in-索引失效。" class="headerlink" title="in 走索引， not in 索引失效。"></a>in 走索引， not in 索引失效。</h6><p><img src="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/1556249602732.png" alt="1556249602732">  </p><h5 id="2-3-单列索引和复合索引。"><a href="#2-3-单列索引和复合索引。" class="headerlink" title="2.3 单列索引和复合索引。"></a>2.3 单列索引和复合索引。</h5><blockquote><p><code>尽量使用复合索引，而少使用单列索引 。</code></p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> idx_name_sta_address <span class="keyword">on</span> tb_seller(<span class="keyword">name</span>, <span class="keyword">status</span>, address);</span><br><span class="line"><span class="comment">-- 创建复合索引，就相当于创建了三个索引 ： </span></span><br><span class="line">name</span><br><span class="line">name + status</span><br><span class="line">name + status + address</span><br></pre></td></tr></table></figure><blockquote><p>创建单列索引 </p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> idx_seller_name <span class="keyword">on</span> tb_seller(<span class="keyword">name</span>);</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> idx_seller_status <span class="keyword">on</span> tb_seller(<span class="keyword">status</span>);</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> idx_seller_address <span class="keyword">on</span> tb_seller(address);</span><br></pre></td></tr></table></figure><blockquote><p><code>数据库会选择一个最优的索引（辨识度最高索引）来使用，并不会使用全部索引 。</code></p></blockquote><h4 id="3-查看索引使用情况"><a href="#3-查看索引使用情况" class="headerlink" title="3. 查看索引使用情况"></a>3. 查看索引使用情况</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">status</span> <span class="keyword">like</span> <span class="string">'Handler_read%'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">global</span> <span class="keyword">status</span> <span class="keyword">like</span> <span class="string">'Handler_read%'</span>;</span><br></pre></td></tr></table></figure><p><img src="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/1552885364563.png" alt="1552885364563"> </p><blockquote><ul><li><code>Handler_read_first：</code>索引中第一条被读的次数。如果较高，表示服务器正执行大量全索引扫描（这个值越低越好）。</li><li><code>Handler_read_key：</code>如果索引正在工作，这个值代表一个行被索引值读的次数，如果值越低，表示索引得到的性能改善不高，因为索引不经常使用（这个值越高越好）。</li><li><code>Handler_read_next ：</code>按照键顺序读下一行的请求数。如果你用范围约束或如果执行索引扫描来查询索引列，该值增加。</li><li><code>Handler_read_prev：</code>按照键顺序读前一行的请求数。该读方法主要用于优化ORDER BY … DESC。</li><li><code>Handler_read_rnd ：</code>根据固定位置读一行的请求数。如果你正执行大量查询并需要对结果进行排序该值较高。你可能使用了大量需要MySQL扫描整个表的查询或你的连接没有正确使用键。这个值较高，意味着运行效率低，应该建立索引来补救。</li><li><code>Handler_read_rnd_next：</code>在数据文件中读下一行的请求数。如果你正进行大量的表扫描，该值较高。通常说明你的表索引不正确或写入的查询没有利用索引。</li></ul></blockquote><h2 id="☆"><a href="#☆" class="headerlink" title="☆"></a>☆</h2>]]></content>
    
    
    <summary type="html">&lt;p&gt;有悲欢离合，月有阴晴圆缺，此事古难全。&lt;/p&gt;
&lt;p align=&quot;right&quot;&gt;——苏轼《水调歌头》&lt;/p&gt;</summary>
    
    
    
    <category term="MySql高级" scheme="http://www.itbuild.cn/categories/MySql%E9%AB%98%E7%BA%A7/"/>
    
    
  </entry>
  
  <entry>
    <title>MySql高级/7.MySql高级之优化SQL步骤</title>
    <link href="http://www.itbuild.cn/2020/12/19/MySql%E9%AB%98%E7%BA%A7/7.MySql%E9%AB%98%E7%BA%A7%E4%B9%8B%E4%BC%98%E5%8C%96SQL%E6%AD%A5%E9%AA%A4/"/>
    <id>http://www.itbuild.cn/2020/12/19/MySql%E9%AB%98%E7%BA%A7/7.MySql%E9%AB%98%E7%BA%A7%E4%B9%8B%E4%BC%98%E5%8C%96SQL%E6%AD%A5%E9%AA%A4/</id>
    <published>2020-12-19T13:45:41.694Z</published>
    <updated>2020-12-19T14:02:52.977Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>和羞走，倚门回首，却把青梅嗅。</p><p align="right">——李清照《点绛唇》</p><a id="more"></a>## MySql高级之优化SQL步骤<blockquote><ol><li>在应用的的开发过程中，由于初期数据量小，开发人员写 SQL 语句时更重视功能上的实现，但是当应用系统正式上线后，随着生产数据量的急剧增长，很多 SQL 语句开始逐渐显露出性能问题，对生产的影响也越来越大，此时这些有问题的 SQL 语句就成为整个系统性能的瓶颈。</li><li>因此我们必须要对它们进行优化，本文将介绍在 MySQL 中优化 SQL 语句的方法。</li><li>当面对一个有 SQL 性能问题的数据库时，我们应该从何处入手来进行系统的分析，使得能够尽快定位问题 SQL 并尽快解决问题。</li></ol></blockquote><h4 id="1-查看SQL执行频率"><a href="#1-查看SQL执行频率" class="headerlink" title="1. 查看SQL执行频率"></a>1. 查看SQL执行频率</h4><blockquote><ol><li>MySQL 客户端连接成功后，通过 <code>show [session|global] status 命令</code>可以提供服务器状态信息。</li><li><code>show [session|global] status 可以根据需要加上参数“session”或者“global”来显示 session 级（当前连接）的计结果和 global 级（自数据库上次启动至今）的统计结果。如果不写，默认使用参数是“session”。</code></li></ol></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 显示了当前 session 中所有统计参数的值：</span></span><br><span class="line"><span class="comment">-- 注意是7个_</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">status</span> <span class="keyword">like</span> <span class="string">'Com_______'</span>;</span><br></pre></td></tr></table></figure><p><img src="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/1552487172501.png" alt="1552487172501">  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show status like &#39;Innodb_rows_%&#39;;</span><br></pre></td></tr></table></figure><p><img src="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/image-20200727230000252.png" alt="image-20200727230000252"></p><blockquote><p><code>Com_xxx 表示每个 xxx 语句执行的次数</code>，我们通常比较关心的是以下几个统计参数。</p></blockquote><table><thead><tr><th align="left">参数</th><th>含义</th></tr></thead><tbody><tr><td align="left">Com_select</td><td>执行 select 操作的次数，一次查询只累加 1。</td></tr><tr><td align="left">Com_insert</td><td>执行 INSERT 操作的次数，对于批量插入的 INSERT 操作，只累加一次。</td></tr><tr><td align="left">Com_update</td><td>执行 UPDATE 操作的次数。</td></tr><tr><td align="left">Com_delete</td><td>执行 DELETE 操作的次数。</td></tr><tr><td align="left">Innodb_rows_read</td><td>select 查询返回的行数。</td></tr><tr><td align="left">Innodb_rows_inserted</td><td>执行 INSERT 操作插入的行数。</td></tr><tr><td align="left">Innodb_rows_updated</td><td>执行 UPDATE 操作更新的行数。</td></tr><tr><td align="left">Innodb_rows_deleted</td><td>执行 DELETE 操作删除的行数。</td></tr><tr><td align="left">Connections</td><td>试图连接 MySQL 服务器的次数。</td></tr><tr><td align="left">Uptime</td><td>服务器工作时间。</td></tr><tr><td align="left">Slow_queries</td><td>慢查询的次数。</td></tr></tbody></table><blockquote><ul><li><code>Com_***      :</code>  这些参数对于所有存储引擎的表操作都会进行累计。</li><li><code>Innodb_*** :</code>  这几个参数只是针对InnoDB 存储引擎的，累加的算法也略有不同。</li></ul></blockquote><h4 id="2-定位低效率执行SQL"><a href="#2-定位低效率执行SQL" class="headerlink" title="2. 定位低效率执行SQL"></a>2. 定位低效率执行SQL</h4><blockquote><p>可以通过以下两种方式定位执行效率较低的 SQL 语句。</p><ul><li><p><code>慢查询日志 :</code> 通过慢查询日志定位那些执行效率较低的 SQL 语句，用<code>--log-slow-queries[=file_name]选项启动时</code>，mysqld 写一个包含所有执行时间超过 long_query_time 秒的 SQL 语句的日志文件。</p></li><li><p><code>show processlist  :</code> 慢查询日志在查询结束以后才纪录，所以在应用反映执行效率出现问题的时候查询慢查询日志并不能定位问题，可以<code>使用show processlist命令查看当前MySQL在进行的线程，包括线程的状态、是否锁表等，可以实时地查看 SQL 的执行情况，同时对一些锁表操作进行优化。</code></p></li><li><p><img src="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/image-20200727231536379.png" alt="image-20200727231536379"></p><ul><li>id列，用户登录mysql时，系统分配的”connection_id”。</li><li>user列，显示当前用户。如果不是root，这个命令就只显示用户权限范围的sql语句。</li><li>host列，显示这个语句是从哪个<code>ip</code>的哪个端口上发的，可以用来跟踪出现问题语句的用户</li><li>db列，显示这个进程目前连接的是哪个数据库</li><li>command列，显示当前连接的执行的命令，一般取值为休眠（sleep），查询（query），连接（connect）等</li><li>time列，显示这个状态持续的时间，单位是秒</li><li><code>state列，</code>显示使用当前连接的<code>sql</code>语句的状态，很重要的列。<code>一个sql语句，以查询为例，可能需要经过copying to tmp table、sorting result、sending data等状态才可以完成。</code></li><li>info列，显示这个<code>sql</code>语句，是判断问题语句的一个重要依据。</li></ul></li></ul></blockquote><h4 id="3-explain分析执行计划☆"><a href="#3-explain分析执行计划☆" class="headerlink" title="3. explain分析执行计划☆"></a>3. explain分析执行计划☆</h4><p>通过以上步骤查询到效率低的 SQL 语句后，可以<code>通过  explain 或者 desc 命令获取 mysql 如何执行 select 语句的信息，包括在 select 语句执行过程中表如何连接和连接的顺序。</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询SQL语句的执行计划 ： </span></span><br><span class="line"><span class="keyword">explain</span>/<span class="keyword">desc</span> <span class="keyword">select</span> * <span class="keyword">from</span> tb_item <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p><img src="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/1552487489859.png" alt="1552487489859"></p><table><thead><tr><th>字段</th><th>含义</th></tr></thead><tbody><tr><td><code>id</code></td><td><code>select查询的序列号，是一组数字，表示的是查询中执行select子句或者是操作表的顺序。</code></td></tr><tr><td><code>select_type</code></td><td><code>表示 SELECT 的类型，常见的取值有 SIMPLE（简单表，即不使用表连接或者子查询）、PRIMARY（主查询，即外层的查询）、UNION（UNION 中的第二个或者后面的查询语句）、SUBQUERY（子查询中的第一个 SELECT）等</code></td></tr><tr><td><code>table</code></td><td><code>输出结果集的表</code></td></tr><tr><td><code>type</code>☆</td><td><code>表示表的连接类型，性能由好到差的连接类型为( system  ---&gt;  const  -----&gt;  eq_ref  ------&gt;  ref  -------&gt;  ref_or_null----&gt;  index_merge  ---&gt;  index_subquery  -----&gt;  range  -----&gt;  index  ------&gt; all )</code></td></tr><tr><td><code>possible_keys</code></td><td><code>表示查询时，可能使用的索引</code></td></tr><tr><td><code>key</code>☆</td><td><code>表示实际使用的索引</code></td></tr><tr><td><code>key_len</code>☆</td><td><code>索引字段的长度</code></td></tr><tr><td><code>rows</code>☆</td><td><code>扫描行的数量</code></td></tr><tr><td><code>extra</code></td><td><code>执行情况的说明和描述</code></td></tr></tbody></table><h5 id="3-1-环境准备"><a href="#3-1-环境准备" class="headerlink" title="3.1 环境准备"></a>3.1 环境准备</h5><blockquote><p><a href="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/mysql_senior/%E7%B4%A2%E5%BC%95%E4%BC%98%E5%8C%96%E6%AD%A5%E9%AA%A4%E5%BB%BA%E8%A1%A8%E8%AF%AD%E5%8F%A5.sql" target="_blank" rel="noopener">建表语句…</a></p></blockquote><p><img src="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/1556122799330.png" alt="1556122799330"> </p><h5 id="3-2-explain-之-id"><a href="#3-2-explain-之-id" class="headerlink" title="3.2 explain 之 id"></a>3.2 explain 之 id</h5><blockquote><p>id 字段是 select查询的序列号，是一组数字，表示的是查询中执行select子句或者是操作表的顺序。id 情况有三种 </p><ol><li><code>id 相同表示加载表的顺序是从上到下。</code></li></ol></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">explain </span><br><span class="line">select * from t_role r, t_user u, user_role ur </span><br><span class="line">where r.id &#x3D; ur.role_id </span><br><span class="line">and u.id &#x3D; ur.user_id;</span><br></pre></td></tr></table></figure><p><img src="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/image-20200728111527099.png" alt="image-20200728111527099"></p><blockquote><ol start="2"><li><code>id 不同id值越大，优先级越高，越先被执行。</code> </li></ol></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * </span><br><span class="line"><span class="keyword">from</span> t_role </span><br><span class="line"><span class="keyword">where</span> <span class="keyword">id</span> = (<span class="keyword">select</span> role_id <span class="keyword">from</span> user_role <span class="keyword">where</span> user_id = (</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">from</span> t_user <span class="keyword">where</span> username = <span class="string">'stu1'</span></span><br><span class="line">))</span><br></pre></td></tr></table></figure><p><img src="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/image-20200728111839258.png" alt="image-20200728111839258"> </p><blockquote><ol start="3"><li>id 有相同，也有不同，同时存在。<code>id相同的可以认为是一组，从上往下顺序执行；</code>在所有的组中，id的值越大，优先级越高，越先执行。</li></ol></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> t_role r,(</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> user_role ur <span class="keyword">where</span> ur.user_id =<span class="string">'2'</span></span><br><span class="line">)a</span><br><span class="line"><span class="keyword">where</span> r.id = a.role_id;</span><br></pre></td></tr></table></figure><p><img src="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/image-20200728112425577.png" alt="image-20200728112425577"> </p><h5 id="3-3-explain-之-select-type"><a href="#3-3-explain-之-select-type" class="headerlink" title="3.3 explain 之 select_type"></a>3.3 explain 之 select_type</h5><p><strong><font color='green' > 表示 SELECT 的类型，常见的取值,由上到下效率依次变低</font></strong></p><table><thead><tr><th><code>select_type</code></th><th><code>含义</code></th></tr></thead><tbody><tr><td><code>SIMPLE</code></td><td><code>简单的select查询，查询中不包含子查询或者UNION</code></td></tr><tr><td><code>PRIMARY</code></td><td><code>查询中若包含任何复杂的子查询，最外层查询标记为该标识</code></td></tr><tr><td><code>SUBQUERY</code></td><td><code>在SELECT 或 WHERE 列表中包含了子查询</code></td></tr><tr><td><code>DERIVED</code></td><td><code>在FROM 列表中包含的子查询，被标记为 DERIVED（衍生） MYSQL会递归执行这些子查询，把结果放在临时表中</code></td></tr><tr><td><code>UNION</code></td><td><code>若第二个SELECT出现在UNION之后，则标记为UNION ； 若UNION包含在FROM子句的子查询中，外层SELECT将被标记为 ： DERIVED</code></td></tr><tr><td><code>UNION RESULT</code></td><td><code>从UNION表获取结果的SELECT</code></td></tr></tbody></table><h5 id="3-4-explain-之-table"><a href="#3-4-explain-之-table" class="headerlink" title="3.4 explain 之 table"></a>3.4 explain 之 table</h5><blockquote><p>展示这一行的数据是关于哪一张表的 </p></blockquote><h5 id="3-5-explain-之-type"><a href="#3-5-explain-之-type" class="headerlink" title="3.5 explain 之 type"></a>3.5 explain 之 type</h5><blockquote><p>type 显示的是访问类型，是较为重要的一个指标</p></blockquote><table><thead><tr><th>type</th><th>含义</th></tr></thead><tbody><tr><td>NULL</td><td>MySQL不访问任何表，索引，直接返回结果</td></tr><tr><td>system</td><td>表只有一行记录(等于系统表)，这是const类型的特例，一般不会出现</td></tr><tr><td><code>const</code></td><td><code>表示通过索引一次就找到了，const 用于比较primary key 或者 unique 索引。因为只匹配一行数据，所以很快。如将主键置于where列表中，MySQL 就能将该查询转换为一个常亮。const于将 &quot;主键&quot; 或 &quot;唯一&quot; 索引的所有部分与常量值进行比较</code></td></tr><tr><td><code>eq_ref</code></td><td>类似ref，<code>区别在于使用的是唯一索引</code>，使用主键的关联查询，关联查询出的记录只有一条。常见于主键或唯一索引扫描</td></tr><tr><td><code>ref</code></td><td><code>非唯一性索引扫描，返回匹配某个单独值的所有行。本质上也是一种索引访问，返回所有匹配某个单独值的所有行（多个）</code></td></tr><tr><td><code>range</code></td><td><code>只检索给定返回的行，使用一个索引来选择行。 where 之后出现 between ， &lt; , &gt; , in 等操作。</code></td></tr><tr><td>index</td><td>index 与 ALL的区别为  index 类型只是遍历了索引树， 通常比ALL 快， ALL 是遍历数据文件。</td></tr><tr><td><code>all</code></td><td><code>将遍历全表以找到匹配的行</code></td></tr></tbody></table><blockquote><p>结果值从最好到最坏以此是：</p><ol><li><code>NULL &gt; system &gt; const &gt; eq_ref &gt; ref &gt; fulltext &gt; ref_or_null &gt; index_merge &gt; unique_subquery &gt; index_subquery &gt; range &gt; index &gt; ALL</code></li><li>``system &gt; const &gt; eq_ref &gt; ref &gt; range &gt; index &gt; ALL`</li><li>==一般来说， 我们需要保证查询至少达到 range 级别， 最好达到ref 。==</li></ol></blockquote><h5 id="3-6-explain-之-key"><a href="#3-6-explain-之-key" class="headerlink" title="3.6 explain 之  key"></a>3.6 explain 之  key</h5><blockquote><ol><li><code>possible_keys :</code> 显示可能应用在这张表的索引， 一个或多个。 </li><li><code>key ：</code> 实际使用的索引， 如果为NULL， 则没有使用索引。</li><li><code>key_len :</code> 表示索引中使用的字节数， 该值为索引字段最大可能长度，并非实际使用长度，<code>在不损失精确性的前提下， 长度越短越好 。</code></li></ol></blockquote><h5 id="3-7-explain-之-rows"><a href="#3-7-explain-之-rows" class="headerlink" title="3.7 explain 之 rows"></a>3.7 explain 之 rows</h5><blockquote><p>扫描行的数量。</p></blockquote><h5 id="3-8-explain-之-extra"><a href="#3-8-explain-之-extra" class="headerlink" title="3.8 explain 之 extra"></a>3.8 explain 之 extra</h5><p>其他的额外的执行计划信息，在该列展示 。</p><table><thead><tr><th>extra</th><th>含义</th></tr></thead><tbody><tr><td>using  filesort</td><td>说明mysql会对数据使用一个外部的索引排序，而不是按照表内的索引顺序进行读取， 称为 “文件排序”, 效率低。</td></tr><tr><td>using  temporary</td><td>使用了临时表保存中间结果，MySQL在对查询结果排序时使用临时表。常见于 order by 和 group by； 效率低</td></tr><tr><td><code>using  index</code></td><td><code>表示相应的select操作使用了覆盖索引， 避免访问表的数据行， 效率不错。</code></td></tr></tbody></table><h4 id="4-show-profile分析SQL"><a href="#4-show-profile分析SQL" class="headerlink" title="4. show profile分析SQL"></a>4. show profile分析SQL</h4><blockquote><p>Mysql从5.0.37版本开始增加了对 show profiles 和 show profile 语句的支持。show profiles 能够在做SQL优化时帮助我们了解时间都耗费到哪里去了。</p><p>通过 @@have_profiling 参数，能够看到当前MySQL是否支持profile：</p></blockquote><p><img src="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/image-20200728142729100.png" alt="image-20200728142729100"> </p><blockquote><p>默认@@profiling是关闭的，可以通过set语句在Session级别开启profiling：</p></blockquote><p><img src="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/image-20200728142825140.png" alt="image-20200728142825140"> </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 开启profiling 开关</span></span><br><span class="line"><span class="keyword">set</span> profiling=<span class="number">1</span>;</span><br></pre></td></tr></table></figure><blockquote><p>通过profile，我们能够更清楚地了解SQL执行的过程。</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 首先，我们可以执行一系列的操作</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">databases</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> mysql_senior;</span><br><span class="line"></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">tables</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> tb_seller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> tb_seller;</span><br></pre></td></tr></table></figure><blockquote><p>执行完上述命令之后，<code>再执行show profiles 指令</code>， 来查看SQL语句执行的耗时：</p></blockquote><p><img src="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/image-20200728143236741.png" alt="image-20200728143236741">  </p><blockquote><p><code>通过show  profile for  query  query_id 语句</code>可以查看到该SQL执行过程中每个线程的状态和消耗的时间：</p></blockquote><p><img src="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/image-20200728143350998.png" alt="image-20200728143350998"> </p><blockquote><p><code>Sending data 状态表示MySQL线程开始访问数据行并把结果返回给客户端，而不仅仅是返回个客户端。由于在Sending data状态下，MySQL线程往往需要做大量的磁盘读取操作，所以经常是整各查询中耗时最长的状态。</code></p><p>在获取到最消耗时间的线程状态后，MySQL支持进一步选择all、cpu、block io 、context switch、page faults等明细类型类查看MySQL在使用什么资源上耗费了过高的时间。</p><p>例如，<code>选择查看CPU的耗费时间  ：show profile cpu for query 4;</code></p></blockquote><p><img src="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/image-20200728143540168.png" alt="image-20200728143540168"> </p><table><thead><tr><th>字段</th><th>含义</th></tr></thead><tbody><tr><td>Status</td><td>sql 语句执行的状态</td></tr><tr><td>Duration</td><td>sql 执行过程中每一个步骤的耗时</td></tr><tr><td>CPU_user</td><td>当前用户占有的cpu</td></tr><tr><td>CPU_system</td><td>系统占有的cpu</td></tr></tbody></table><h4 id="5-trace分析优化器执行计划"><a href="#5-trace分析优化器执行计划" class="headerlink" title="5. trace分析优化器执行计划"></a>5. trace分析优化器执行计划</h4><blockquote><p>MySQL5.6提供了对SQL的跟踪trace, 通过trace文件能够进一步了解为什么优化器选择A计划, 而不是选择B计划。</p><p>打开trace ， 设置格式为 JSON，并设置trace最大能够使用的内存大小，避免解析过程中因为默认内存过小而不能够完整展示。</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> optimizer_trace=<span class="string">"enabled=on"</span>,end_markers_in_json=<span class="keyword">on</span>;</span><br><span class="line"><span class="keyword">set</span> optimizer_trace_max_mem_size=<span class="number">1000000</span>;</span><br></pre></td></tr></table></figure><blockquote><p>执行SQL语句 ：</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> tb_seller <span class="keyword">where</span> <span class="keyword">id</span> &lt; <span class="number">4</span>;</span><br></pre></td></tr></table></figure><blockquote><p>最后， 检查information_schema.optimizer_trace就可以知道MySQL是如何执行SQL的 ：</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> information_schema.optimizer_trace\G;</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br></pre></td><td class="code"><pre><span class="line">*************************** 1. row ***************************</span><br><span class="line">QUERY: select * from tb_item where id &lt; 4</span><br><span class="line">TRACE: &#123;</span><br><span class="line">  "steps": [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"join_preparation"</span>: &#123;</span><br><span class="line">        <span class="attr">"select#"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"steps"</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">"expanded_query"</span>: <span class="string">"/* select#1 */ select `tb_item`.`id` AS `id`,`tb_item`.`title` AS `title`,`tb_item`.`price` AS `price`,`tb_item`.`num` AS `num`,`tb_item`.`categoryid` AS `categoryid`,`tb_item`.`status` AS `status`,`tb_item`.`sellerid` AS `sellerid`,`tb_item`.`createtime` AS `createtime`,`tb_item`.`updatetime` AS `updatetime` from `tb_item` where (`tb_item`.`id` &lt; 4)"</span></span><br><span class="line">          &#125;</span><br><span class="line">        ] <span class="comment">/* steps */</span></span><br><span class="line">      &#125; <span class="comment">/* join_preparation */</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"join_optimization"</span>: &#123;</span><br><span class="line">        <span class="attr">"select#"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"steps"</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">"condition_processing"</span>: &#123;</span><br><span class="line">              <span class="attr">"condition"</span>: <span class="string">"WHERE"</span>,</span><br><span class="line">              <span class="attr">"original_condition"</span>: <span class="string">"(`tb_item`.`id` &lt; 4)"</span>,</span><br><span class="line">              <span class="attr">"steps"</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                  <span class="attr">"transformation"</span>: <span class="string">"equality_propagation"</span>,</span><br><span class="line">                  <span class="attr">"resulting_condition"</span>: <span class="string">"(`tb_item`.`id` &lt; 4)"</span></span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                  <span class="attr">"transformation"</span>: <span class="string">"constant_propagation"</span>,</span><br><span class="line">                  <span class="attr">"resulting_condition"</span>: <span class="string">"(`tb_item`.`id` &lt; 4)"</span></span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                  <span class="attr">"transformation"</span>: <span class="string">"trivial_condition_removal"</span>,</span><br><span class="line">                  <span class="attr">"resulting_condition"</span>: <span class="string">"(`tb_item`.`id` &lt; 4)"</span></span><br><span class="line">                &#125;</span><br><span class="line">              ] <span class="comment">/* steps */</span></span><br><span class="line">            &#125; <span class="comment">/* condition_processing */</span></span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">"table_dependencies"</span>: [</span><br><span class="line">              &#123;</span><br><span class="line">                <span class="attr">"table"</span>: <span class="string">"`tb_item`"</span>,</span><br><span class="line">                <span class="attr">"row_may_be_null"</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">"map_bit"</span>: <span class="number">0</span>,</span><br><span class="line">                <span class="attr">"depends_on_map_bits"</span>: [</span><br><span class="line">                ] <span class="comment">/* depends_on_map_bits */</span></span><br><span class="line">              &#125;</span><br><span class="line">            ] <span class="comment">/* table_dependencies */</span></span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">"ref_optimizer_key_uses"</span>: [</span><br><span class="line">            ] <span class="comment">/* ref_optimizer_key_uses */</span></span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">"rows_estimation"</span>: [</span><br><span class="line">              &#123;</span><br><span class="line">                <span class="attr">"table"</span>: <span class="string">"`tb_item`"</span>,</span><br><span class="line">                <span class="attr">"range_analysis"</span>: &#123;</span><br><span class="line">                  <span class="attr">"table_scan"</span>: &#123;</span><br><span class="line">                    <span class="attr">"rows"</span>: <span class="number">9816098</span>,</span><br><span class="line">                    <span class="attr">"cost"</span>: <span class="number">2.04e6</span></span><br><span class="line">                  &#125; <span class="comment">/* table_scan */</span>,</span><br><span class="line">                  <span class="attr">"potential_range_indices"</span>: [</span><br><span class="line">                    &#123;</span><br><span class="line">                      <span class="attr">"index"</span>: <span class="string">"PRIMARY"</span>,</span><br><span class="line">                      <span class="attr">"usable"</span>: <span class="literal">true</span>,</span><br><span class="line">                      <span class="attr">"key_parts"</span>: [</span><br><span class="line">                        <span class="string">"id"</span></span><br><span class="line">                      ] <span class="comment">/* key_parts */</span></span><br><span class="line">                    &#125;</span><br><span class="line">                  ] <span class="comment">/* potential_range_indices */</span>,</span><br><span class="line">                  <span class="attr">"setup_range_conditions"</span>: [</span><br><span class="line">                  ] <span class="comment">/* setup_range_conditions */</span>,</span><br><span class="line">                  <span class="attr">"group_index_range"</span>: &#123;</span><br><span class="line">                    <span class="attr">"chosen"</span>: <span class="literal">false</span>,</span><br><span class="line">                    <span class="attr">"cause"</span>: <span class="string">"not_group_by_or_distinct"</span></span><br><span class="line">                  &#125; <span class="comment">/* group_index_range */</span>,</span><br><span class="line">                  <span class="attr">"analyzing_range_alternatives"</span>: &#123;</span><br><span class="line">                    <span class="attr">"range_scan_alternatives"</span>: [</span><br><span class="line">                      &#123;</span><br><span class="line">                        <span class="attr">"index"</span>: <span class="string">"PRIMARY"</span>,</span><br><span class="line">                        <span class="attr">"ranges"</span>: [</span><br><span class="line">                          <span class="string">"id &lt; 4"</span></span><br><span class="line">                        ] <span class="comment">/* ranges */</span>,</span><br><span class="line">                        <span class="attr">"index_dives_for_eq_ranges"</span>: <span class="literal">true</span>,</span><br><span class="line">                        <span class="attr">"rowid_ordered"</span>: <span class="literal">true</span>,</span><br><span class="line">                        <span class="attr">"using_mrr"</span>: <span class="literal">false</span>,</span><br><span class="line">                        <span class="attr">"index_only"</span>: <span class="literal">false</span>,</span><br><span class="line">                        <span class="attr">"rows"</span>: <span class="number">3</span>,</span><br><span class="line">                        <span class="attr">"cost"</span>: <span class="number">1.6154</span>,</span><br><span class="line">                        <span class="attr">"chosen"</span>: <span class="literal">true</span></span><br><span class="line">                      &#125;</span><br><span class="line">                    ] <span class="comment">/* range_scan_alternatives */</span>,</span><br><span class="line">                    <span class="attr">"analyzing_roworder_intersect"</span>: &#123;</span><br><span class="line">                      <span class="attr">"usable"</span>: <span class="literal">false</span>,</span><br><span class="line">                      <span class="attr">"cause"</span>: <span class="string">"too_few_roworder_scans"</span></span><br><span class="line">                    &#125; <span class="comment">/* analyzing_roworder_intersect */</span></span><br><span class="line">                  &#125; <span class="comment">/* analyzing_range_alternatives */</span>,</span><br><span class="line">                  <span class="attr">"chosen_range_access_summary"</span>: &#123;</span><br><span class="line">                    <span class="attr">"range_access_plan"</span>: &#123;</span><br><span class="line">                      <span class="attr">"type"</span>: <span class="string">"range_scan"</span>,</span><br><span class="line">                      <span class="attr">"index"</span>: <span class="string">"PRIMARY"</span>,</span><br><span class="line">                      <span class="attr">"rows"</span>: <span class="number">3</span>,</span><br><span class="line">                      <span class="attr">"ranges"</span>: [</span><br><span class="line">                        <span class="string">"id &lt; 4"</span></span><br><span class="line">                      ] <span class="comment">/* ranges */</span></span><br><span class="line">                    &#125; <span class="comment">/* range_access_plan */</span>,</span><br><span class="line">                    <span class="attr">"rows_for_plan"</span>: <span class="number">3</span>,</span><br><span class="line">                    <span class="attr">"cost_for_plan"</span>: <span class="number">1.6154</span>,</span><br><span class="line">                    <span class="attr">"chosen"</span>: <span class="literal">true</span></span><br><span class="line">                  &#125; <span class="comment">/* chosen_range_access_summary */</span></span><br><span class="line">                &#125; <span class="comment">/* range_analysis */</span></span><br><span class="line">              &#125;</span><br><span class="line">            ] <span class="comment">/* rows_estimation */</span></span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">"considered_execution_plans"</span>: [</span><br><span class="line">              &#123;</span><br><span class="line">                <span class="attr">"plan_prefix"</span>: [</span><br><span class="line">                ] <span class="comment">/* plan_prefix */</span>,</span><br><span class="line">                <span class="attr">"table"</span>: <span class="string">"`tb_item`"</span>,</span><br><span class="line">                <span class="attr">"best_access_path"</span>: &#123;</span><br><span class="line">                  <span class="attr">"considered_access_paths"</span>: [</span><br><span class="line">                    &#123;</span><br><span class="line">                      <span class="attr">"access_type"</span>: <span class="string">"range"</span>,</span><br><span class="line">                      <span class="attr">"rows"</span>: <span class="number">3</span>,</span><br><span class="line">                      <span class="attr">"cost"</span>: <span class="number">2.2154</span>,</span><br><span class="line">                      <span class="attr">"chosen"</span>: <span class="literal">true</span></span><br><span class="line">                    &#125;</span><br><span class="line">                  ] <span class="comment">/* considered_access_paths */</span></span><br><span class="line">                &#125; <span class="comment">/* best_access_path */</span>,</span><br><span class="line">                <span class="attr">"cost_for_plan"</span>: <span class="number">2.2154</span>,</span><br><span class="line">                <span class="attr">"rows_for_plan"</span>: <span class="number">3</span>,</span><br><span class="line">                <span class="attr">"chosen"</span>: <span class="literal">true</span></span><br><span class="line">              &#125;</span><br><span class="line">            ] <span class="comment">/* considered_execution_plans */</span></span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">"attaching_conditions_to_tables"</span>: &#123;</span><br><span class="line">              <span class="attr">"original_condition"</span>: <span class="string">"(`tb_item`.`id` &lt; 4)"</span>,</span><br><span class="line">              <span class="attr">"attached_conditions_computation"</span>: [</span><br><span class="line">              ] <span class="comment">/* attached_conditions_computation */</span>,</span><br><span class="line">              <span class="attr">"attached_conditions_summary"</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                  <span class="attr">"table"</span>: <span class="string">"`tb_item`"</span>,</span><br><span class="line">                  <span class="attr">"attached"</span>: <span class="string">"(`tb_item`.`id` &lt; 4)"</span></span><br><span class="line">                &#125;</span><br><span class="line">              ] <span class="comment">/* attached_conditions_summary */</span></span><br><span class="line">            &#125; <span class="comment">/* attaching_conditions_to_tables */</span></span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">"refine_plan"</span>: [</span><br><span class="line">              &#123;</span><br><span class="line">                <span class="attr">"table"</span>: <span class="string">"`tb_item`"</span>,</span><br><span class="line">                <span class="attr">"access_type"</span>: <span class="string">"range"</span></span><br><span class="line">              &#125;</span><br><span class="line">            ] <span class="comment">/* refine_plan */</span></span><br><span class="line">          &#125;</span><br><span class="line">        ] <span class="comment">/* steps */</span></span><br><span class="line">      &#125; <span class="comment">/* join_optimization */</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"join_execution"</span>: &#123;</span><br><span class="line">        <span class="attr">"select#"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"steps"</span>: [</span><br><span class="line">        ] <span class="comment">/* steps */</span></span><br><span class="line">      &#125; <span class="comment">/* join_execution */</span></span><br><span class="line">    &#125;</span><br><span class="line">  ] /* steps */</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="☆"><a href="#☆" class="headerlink" title="☆"></a>☆</h2>]]></content>
    
    
    <summary type="html">&lt;p&gt;和羞走，倚门回首，却把青梅嗅。&lt;/p&gt;
&lt;p align=&quot;right&quot;&gt;——李清照《点绛唇》&lt;/p&gt;</summary>
    
    
    
    <category term="MySql高级" scheme="http://www.itbuild.cn/categories/MySql%E9%AB%98%E7%BA%A7/"/>
    
    
  </entry>
  
  <entry>
    <title>MySql高级/6.MySql高级之存储引擎</title>
    <link href="http://www.itbuild.cn/2020/12/19/MySql%E9%AB%98%E7%BA%A7/6.MySql%E9%AB%98%E7%BA%A7%E4%B9%8B%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/"/>
    <id>http://www.itbuild.cn/2020/12/19/MySql%E9%AB%98%E7%BA%A7/6.MySql%E9%AB%98%E7%BA%A7%E4%B9%8B%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/</id>
    <published>2020-12-19T13:45:41.692Z</published>
    <updated>2020-12-19T14:02:52.876Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>何日请缨提锐旅，一鞭直渡清河洛。却归来、再续汉阳游，骑黄鹤。</p><p align="right">——岳飞《满江红》</p><a id="more"></a>## MySql高级之存储引擎<h4 id="1-存储引擎概述"><a href="#1-存储引擎概述" class="headerlink" title="1. 存储引擎概述"></a>1. 存储引擎概述</h4><blockquote><ol><li><p>和大多数的数据库不同, MySQL中有一个存储引擎的概念, 针对不同的存储需求可以选择最优的存储引擎。</p></li><li><p><code>存储引擎就是存储数据，建立索引，更新查询数据等等技术的实现方式 。存储引擎是基于表的，而不是基于库的。所以存储引擎也可被称为表类型。</code></p></li><li><p><code>Oracle，SqlServer等数据库只有一种存储引擎。MySQL提供了插件式的存储引擎架构。</code>所以MySQL存在多种存储引擎，可以根据需要使用相应引擎，或者编写存储引擎。</p></li><li><p><code>MySQL5.0支持的存储引擎包含</code> ： <code>InnoDB 、MyISAM</code> 、BDB、<code>MEMORY、MERGE</code>、EXAMPLE、NDB Cluster、ARCHIVE、CSV、BLACKHOLE、FEDERATED等，其中InnoDB和BDB提供事务安全表，其他存储引擎是非事务安全表。</p></li><li><p>可以通过指定 <code>show engines</code> ， 来查询当前数据库支持的存储引擎 :</p></li></ol></blockquote><p><img src="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/1551186043529.png" alt="1551186043529"> </p><blockquote><p>创建新表时如果不指定存储引擎，那么系统就会使用默认的存储引擎，<code>MySQL5.5之前的默认存储引擎是MyISAM，5.5之后就改为了InnoDB。</code></p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查看Mysql数据库默认的存储引擎，指令</span></span><br><span class="line"> <span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">'%storage_engine%'</span>;</span><br></pre></td></tr></table></figure><p><img src="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/image-20200727215558666.png" alt="image-20200727215558666"></p><h4 id="2-各种存储引擎特性"><a href="#2-各种存储引擎特性" class="headerlink" title="2. 各种存储引擎特性"></a>2. 各种存储引擎特性</h4><blockquote><p>下面重点介绍几种常用的存储引擎， 并对比各个存储引擎之间的区别</p></blockquote><table><thead><tr><th>特点</th><th><code>InnoDB</code></th><th><code>MyISAM</code></th><th>MEMORY</th><th>MERGE</th><th>NDB</th></tr></thead><tbody><tr><td>存储限制</td><td>64TB</td><td>有</td><td>有</td><td>没有</td><td>有</td></tr><tr><td>事务安全</td><td>==支持==</td><td></td><td></td><td></td><td></td></tr><tr><td>锁机制</td><td>==行锁(适合高并发)==</td><td>==表锁==</td><td>表锁</td><td>表锁</td><td>行锁</td></tr><tr><td>B树索引</td><td>支持</td><td>支持</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>哈希索引</td><td></td><td></td><td>支持</td><td></td><td></td></tr><tr><td>全文索引</td><td>支持(5.6版本之后)</td><td>支持</td><td></td><td></td><td></td></tr><tr><td>集群索引</td><td>支持</td><td></td><td></td><td></td><td></td></tr><tr><td>数据索引</td><td>支持</td><td></td><td>支持</td><td></td><td>支持</td></tr><tr><td>索引缓存</td><td>支持</td><td>支持</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>数据可压缩</td><td></td><td>支持</td><td></td><td></td><td></td></tr><tr><td>空间使用</td><td>高</td><td>低</td><td>N/A</td><td>低</td><td>低</td></tr><tr><td>内存使用</td><td>高</td><td>低</td><td>中等</td><td>低</td><td>高</td></tr><tr><td>批量插入速度</td><td>低</td><td>高</td><td>高</td><td>高</td><td>高</td></tr><tr><td>支持外键</td><td>==支持==</td><td></td><td></td><td></td><td></td></tr></tbody></table><p>下面我们将重点<code>介绍最长使用的两种存储引擎： InnoDB、MyISAM</code> ， 另外两种 MEMORY、MERGE ， 了解即可。</p><h5 id="2-1-InnoDB"><a href="#2-1-InnoDB" class="headerlink" title="2.1 InnoDB"></a>2.1 InnoDB</h5><blockquote><p>​    InnoDB存储引擎是Mysql的默认存储引擎。InnoDB存储引擎提供了具有提交、回滚、崩溃恢复能力的事务安全。<code>但是对比MyISAM的存储引擎，InnoDB写的处理效率差一些，并且会占用更多的磁盘空间以保留数据和索引。</code></p><p>InnoDB存储引擎不同于其他存储引擎的特点 ： </p></blockquote><h6 id="事务控制"><a href="#事务控制" class="headerlink" title="事务控制"></a>事务控制</h6><blockquote><p>测试发现在InnoDB中是存在事务的 ；</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> goods_innodb(</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">int</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line"><span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    primary <span class="keyword">key</span>(<span class="keyword">id</span>)</span><br><span class="line">)<span class="keyword">ENGINE</span>=<span class="keyword">innodb</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br></pre></td></tr></table></figure><h6 id="外键约束"><a href="#外键约束" class="headerlink" title="外键约束"></a>外键约束</h6><blockquote><ul><li>MySQL支持外键的存储引擎只有InnoDB ， 在创建外键的时候， 要求父表必须有对应的索引 ， 子表在创建外键的时候， 也会自动的创建对应的索引。</li><li>下面两张表中 ， <code>country_innodb是父表 ， country_id为主键索引，city_innodb表是子表，country_id字段为外键，对应于country_innodb表的主键country_id 。</code></li></ul></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> country_innodb(</span><br><span class="line">country_id <span class="built_in">int</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">    country_name <span class="built_in">varchar</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    primary <span class="keyword">key</span>(country_id)</span><br><span class="line">)<span class="keyword">engine</span>=<span class="keyword">InnoDB</span> <span class="keyword">default</span> <span class="keyword">charset</span>=utf8;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> city_innodb(</span><br><span class="line">city_id <span class="built_in">int</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">    city_name <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    country_id <span class="built_in">int</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    primary <span class="keyword">key</span>(city_id),</span><br><span class="line">    <span class="keyword">key</span> idx_fk_country_id(country_id),</span><br><span class="line">    <span class="keyword">constraint</span> <span class="string">'fk_city_country'</span> <span class="keyword">foreign</span> <span class="keyword">key</span>(country_id) <span class="keyword">references</span></span><br><span class="line">country_innodb(country_id) <span class="keyword">on</span> <span class="keyword">delete</span> restrict <span class="keyword">on</span> <span class="keyword">update</span> <span class="keyword">cascade</span></span><br><span class="line">)<span class="keyword">engine</span>=<span class="keyword">InnoDB</span> <span class="keyword">default</span> <span class="keyword">charset</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> country_innodb <span class="keyword">values</span>(<span class="literal">null</span>,<span class="string">'China'</span>),(<span class="literal">null</span>,<span class="string">'America'</span>),(<span class="literal">null</span>,<span class="string">'Japan'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> city_innodb <span class="keyword">values</span>(<span class="literal">null</span>,<span class="string">'Xian'</span>,<span class="number">1</span>),(<span class="literal">null</span>,<span class="string">'NewYork'</span>,<span class="number">2</span>),(<span class="literal">null</span>,<span class="string">'BeiJing'</span>,<span class="number">1</span>);</span><br></pre></td></tr></table></figure><blockquote><p>在创建索引时， 可以指定在删除、更新父表时，对子表进行的相应操作，包括 restrict、cascade、set null 和 no action。</p><ol><li><p>restrict和no action相同， 是指限制在子表有关联记录的情况下， 父表不能更新；</p></li><li><p>cascade 表示父表在更新或者删除时，更新或者删除子表对应的记录；</p></li><li><p>set null 则表示父表在更新或者删除的时候，子表的对应字段被set null。</p></li></ol><p><code>针对上面创建的两个表， 子表的外键指定是on delete restrict on update cascade 方式的， 那么在主表删除记录的时候， 如果子表有对应记录， 则不允许删除， 主表在更新记录的时候， 如果子表有对应记录， 则子表对应更新 。</code></p></blockquote><p>表中数据如下图所示 ： </p><p><img src="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/1556087540767.png" alt="1556087540767"> </p><blockquote><p>外键信息可以使用如下两种方式查看 ： </p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> city_innodb;</span><br></pre></td></tr></table></figure><p><img src="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/1556087611295.png" alt="1556087611295">     </p><blockquote><p>删除country_id为1 的country数据</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> country_innodb <span class="keyword">where</span> country_id = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p><img src="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/1556087719145.png" alt="1556087719145"> </p><blockquote><p>更新主表country表的字段 country_id </p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> country_innodb <span class="keyword">set</span> country_id = <span class="number">100</span> <span class="keyword">where</span> country_id = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p><img src="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/1556087759615.png" alt="1556087759615">  </p><blockquote><p>更新后， 子表的数据信息为 </p></blockquote><p><img src="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/1556087793738.png" alt="1556087793738">  </p><h6 id="存储方式"><a href="#存储方式" class="headerlink" title="存储方式"></a>存储方式</h6><p>InnoDB 存储表和索引有以下两种方式 ： </p><ol><li><code>使用共享表空间存储， 这种方式创建的表的表结构保存在.frm文件中， 数据和索引保存在 innodb_data_home_dir 和 innodb_data_file_path定义的表空间中，可以是多个文件。</code></li><li><code>使用多表空间存储， 这种方式创建的表的表结构仍然存在 .frm 文件中，但是每个表的数据和索引单独保存在 .ibd 中。</code></li><li><img src="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/image-20200727223015631.png" alt="image-20200727223015631"></li></ol><h5 id="2-2-MyISAM"><a href="#2-2-MyISAM" class="headerlink" title="2.2 MyISAM"></a>2.2 MyISAM</h5><p>MyISAM 不支持事务、也不支持外键，<code>其优势是访问的速度快</code>，对事务的完整性没有要求或者以SELECT、INSERT为主的应用基本上都可以使用这个引擎来创建表 。有以下两个比较重要的特点： </p><ul><li>不支持事务</li><li>文件存储方式<ul><li>每个MyISAM在磁盘上存储成3个文件，其文件名都和表名相同，但拓展名分别是 ： <ul><li><code>.frm (存储表定义)；</code></li><li><code>.MYD(MYData , 存储数据)；</code></li><li><code>.MYI(MYIndex , 存储索引)；</code></li></ul></li><li><img src="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/1556075073836.png" alt="1556075073836"></li></ul></li></ul><h5 id="2-3-MEMORY"><a href="#2-3-MEMORY" class="headerlink" title="2.3 MEMORY"></a>2.3 MEMORY</h5><blockquote><ol><li>Memory存储引擎<code>将表的数据存放在内存中</code>。<code>每个MEMORY表实际对应一个磁盘文件，格式是.frm ，该文件中只存储表的结构，而其数据文件，都是存储在内存中，</code>这样有利于数据的快速处理，提高整个表的效率。</li><li>MEMORY 类型的表访问非常地快，因为他的数据是存放在内存中的，并且默认使用hash索引 ， <code>但是服务一旦关闭，表中的数据就会丢失。</code></li></ol></blockquote><h5 id="2-4-MERGE"><a href="#2-4-MERGE" class="headerlink" title="2.4 MERGE"></a>2.4 MERGE</h5><blockquote><ol><li>MERGE存储引擎是一组MyISAM表的组合，这些MyISAM表必须结构完全相同，<code>MERGE表本身并没有存储数据</code>，对MERGE类型的表可以进行查询、更新、删除操作，这些操作实际上是对内部的MyISAM表进行的。</li><li>对于MERGE类型表的插入操作，是通过INSERT_METHOD子句定义插入的表，可以有3个不同的值，使用first或 last 值使得插入操作被相应地作用在第一或者最后一个表上，不定义这个子句或者定义为NO，表示不能对这个MERGE表执行插入操作。</li><li><code>可以对MERGE表进行DROP操作，但是这个操作只是删除MERGE表的定义，对内部的表是没有任何影响的。</code></li></ol></blockquote><p><img src="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/1556076359503.png" alt="1556076359503"> </p><h4 id="3-存储引擎的选择"><a href="#3-存储引擎的选择" class="headerlink" title="3. 存储引擎的选择"></a>3. 存储引擎的选择</h4><p>​    在选择存储引擎时，应该<code>根据应用系统的特点选择合适的存储引擎</code>。对于复杂的应用系统，还可以根据实际情况选择多种存储引擎进行组合。以下是几种常用的存储引擎的使用环境。</p><ul><li>InnoDB : 是Mysql的默认存储引擎，用于事务处理应用程序，支持外键。如果应用对事务的完整性有比较高的要求，在并发条件下要求数据的一致性，数据操作除了插入和查询以外，还包含很多的更新、删除操作，那么InnoDB存储引擎是比较合适的选择。InnoDB存储引擎除了有效的降低由于删除和更新导致的锁定， 还可以确保事务的完整提交和回滚，对于类似于计费系统或者财务系统等对数据准确性要求比较高的系统，InnoDB是最合适的选择。</li><li>MyISAM ： 如果应用是以读操作和插入操作为主，只有很少的更新和删除操作，并且对事务的完整性、并发性要求不是很高，那么选择这个存储引擎是非常合适的。</li><li>MEMORY：将所有数据保存在RAM中，在需要快速定位记录和其他类似数据环境下，可以提供几块的访问。MEMORY的缺陷就是对表的大小有限制，太大的表无法缓存在内存中，其次是要确保表的数据可以恢复，数据库异常终止后表中的数据是可以恢复的。MEMORY表通常用于更新不太频繁的小表，用以快速得到访问结果。</li><li>MERGE：用于将一系列等同的MyISAM表以逻辑方式组合在一起，并作为一个对象引用他们。<code>MERGE表的优点在于可以突破对单个MyISAM表的大小限制，并且通过将不同的表分布在多个磁盘上，可以有效的改善MERGE表的访问效率。</code>这对于<code>存储诸如数据仓储等VLDB环境</code>十分合适。</li></ul><h2 id="☆"><a href="#☆" class="headerlink" title="☆"></a>☆</h2>]]></content>
    
    
    <summary type="html">&lt;p&gt;何日请缨提锐旅，一鞭直渡清河洛。却归来、再续汉阳游，骑黄鹤。&lt;/p&gt;
&lt;p align=&quot;right&quot;&gt;——岳飞《满江红》&lt;/p&gt;</summary>
    
    
    
    <category term="MySql高级" scheme="http://www.itbuild.cn/categories/MySql%E9%AB%98%E7%BA%A7/"/>
    
    
  </entry>
  
  <entry>
    <title>MySql高级/5.MySql的体系结构概览</title>
    <link href="http://www.itbuild.cn/2020/12/19/MySql%E9%AB%98%E7%BA%A7/5.MySql%E7%9A%84%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E6%A6%82%E8%A7%88/"/>
    <id>http://www.itbuild.cn/2020/12/19/MySql%E9%AB%98%E7%BA%A7/5.MySql%E7%9A%84%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E6%A6%82%E8%A7%88/</id>
    <published>2020-12-19T13:45:41.691Z</published>
    <updated>2020-12-19T14:02:52.781Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>欲将沉醉换悲凉。清歌莫断肠。</p><p align="right">——晏几道《阮郎归》</p><a id="more"></a>## MySql的体系结构概览<p><img src="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/000001.jpg" alt="171214401286615"> </p><blockquote><p>整个MySQL Server由以下组成</p><ul><li><code>Connection Pool : 连接池组件</code></li><li><code>Management Services &amp; Utilities : 管理服务和工具组件</code></li><li><code>SQL Interface : SQL接口组件</code></li><li><code>Parser : 查询分析器组件</code></li><li><code>Optimizer : 优化器组件</code></li><li><code>Caches &amp; Buffers : 缓冲池组件</code></li><li><code>Pluggable Storage Engines : 存储引擎</code></li><li><code>File System : 文件系统</code></li></ul></blockquote><h4 id="1-连接层"><a href="#1-连接层" class="headerlink" title="1. 连接层"></a>1. 连接层</h4><blockquote><ol><li>最上层是一些客户端和链接服务，包含本地sock 通信和大多数基于客户端/服务端工具实现的类似于 TCP/IP的通信。</li><li>主要完成一些类似于连接处理、授权认证、及相关的安全方案。在该层上引入了线程池的概念，为通过认证安全接入的客户端提供线程。</li><li>同样在该层上可以实现基于SSL的安全链接。服务器也会为安全接入的每个客户端验证它所具有的操作权限。</li></ol></blockquote><h4 id="2-服务层"><a href="#2-服务层" class="headerlink" title="2. 服务层"></a>2. 服务层</h4><blockquote><ol><li>第二层架构主要完成大多数的核心服务功能，如SQL接口，并完成缓存的查询，SQL的分析和优化，部分内置函数的执行。</li><li>所有<code>跨存储引擎的功能也在这一层实现</code>，如 过程、函数等。在该层，服务器会解析查询并创建相应的内部解析树，并对其完成相应的优化如确定表的查询的顺序，是否利用索引等， 最后生成相应的执行操作。</li><li>如果是select语句，服务器还会查询内部的缓存，如果缓存空间足够大，这样在解决大量读操作的环境中能够很好的提升系统的性能。</li></ol></blockquote><h4 id="3-引擎层"><a href="#3-引擎层" class="headerlink" title="3. 引擎层"></a>3. 引擎层</h4><blockquote><ol><li>存储引擎层， 存储引擎真正的负责了MySQL中数据的存储和提取，服务器通过API和存储引擎进行通信。</li><li>不同的存储引擎具有不同的功能，这样我们可以根据自己的需要，来选取合适的存储引擎。</li></ol></blockquote><h4 id="4-存储层"><a href="#4-存储层" class="headerlink" title="4. 存储层"></a>4. 存储层</h4><blockquote><p>数据存储层， 主要是将数据存储在文件系统之上，并完成与存储引擎的交互。</p></blockquote><p><code>和其他数据库相比，MySQL有点与众不同，它的架构可以在多种不同场景中应用并发挥良好作用。主要体现在存储引擎上，插件式的存储引擎架构，将查询处理和其他的系统任务以及数据的存储提取分离。这种架构可以根据业务的需求和实际需要选择合适的存储引擎。</code></p><h2 id="☆"><a href="#☆" class="headerlink" title="☆"></a>☆</h2>]]></content>
    
    
    <summary type="html">&lt;p&gt;欲将沉醉换悲凉。清歌莫断肠。&lt;/p&gt;
&lt;p align=&quot;right&quot;&gt;——晏几道《阮郎归》&lt;/p&gt;</summary>
    
    
    
    <category term="MySql高级" scheme="http://www.itbuild.cn/categories/MySql%E9%AB%98%E7%BA%A7/"/>
    
    
  </entry>
  
  <entry>
    <title>MySql高级/4.MySql高级之触发器</title>
    <link href="http://www.itbuild.cn/2020/12/19/MySql%E9%AB%98%E7%BA%A7/4.MySql%E9%AB%98%E7%BA%A7%E4%B9%8B%E8%A7%A6%E5%8F%91%E5%99%A8/"/>
    <id>http://www.itbuild.cn/2020/12/19/MySql%E9%AB%98%E7%BA%A7/4.MySql%E9%AB%98%E7%BA%A7%E4%B9%8B%E8%A7%A6%E5%8F%91%E5%99%A8/</id>
    <published>2020-12-19T13:45:41.689Z</published>
    <updated>2020-12-19T14:02:52.686Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>渐写到别来，此情深处，红笺为无色。</p><p align="right">——晏几道《思远人》</p><a id="more"></a>## MySql高级之触发器<h4 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1. 介绍"></a>1. 介绍</h4><blockquote><p>触发器是与表有关的数据库对象，指在 <code>insert/update/delete 之前或之后</code>，触发并<code>执行触发器中定义的SQL语句集合</code>。触发器的这种特性可以协助应用在数据库端<code>确保数据的完整性 , 日志记录 , 数据校验等操作 。</code></p><p><code>使用别名 OLD 和 NEW 来引用触发器中发生变化的记录内容，</code>这与其他的数据库是相似的。</p><p><code>现在触发器还只支持行级触发</code>，不支持语句级触发。</p></blockquote><table><thead><tr><th>触发器类型</th><th>NEW 和 OLD的使用</th></tr></thead><tbody><tr><td>INSERT 型触发器</td><td>NEW 表示将要或者已经新增的数据</td></tr><tr><td>UPDATE 型触发器</td><td>OLD 表示修改之前的数据 , NEW 表示将要或已经修改后的数据</td></tr><tr><td>DELETE 型触发器</td><td>OLD 表示将要或者已经删除的数据</td></tr></tbody></table><h4 id="2-创建触发器"><a href="#2-创建触发器" class="headerlink" title="2. 创建触发器"></a>2. 创建触发器</h4><blockquote><p>语法结构 : </p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> trigger_name </span><br><span class="line"></span><br><span class="line"><span class="keyword">before</span>/<span class="keyword">after</span> <span class="keyword">insert</span>/<span class="keyword">update</span>/<span class="keyword">delete</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">on</span> tbl_name </span><br><span class="line"></span><br><span class="line">[ <span class="keyword">for</span> <span class="keyword">each</span> <span class="keyword">row</span> ]  <span class="comment">-- 行级触发器</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"></span><br><span class="line">trigger_stmt ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span>$</span><br></pre></td></tr></table></figure><blockquote><p>需求：<code>通过触发器记录 emp 表的数据变更日志 , 包含增加, 修改 , 删除 ;</code></p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 首先创建一张日志表 : </span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> emp_logs(</span><br><span class="line">  <span class="keyword">id</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">not</span> <span class="literal">null</span> auto_increment,</span><br><span class="line">  operation <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">comment</span> <span class="string">'操作类型, insert/update/delete'</span>,</span><br><span class="line">  operate_time datetime <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">comment</span> <span class="string">'操作时间'</span>,</span><br><span class="line">  operate_id <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">comment</span> <span class="string">'操作表的ID'</span>,</span><br><span class="line">  operate_params <span class="built_in">varchar</span>(<span class="number">500</span>) <span class="keyword">comment</span> <span class="string">'操作参数'</span>,</span><br><span class="line">  primary <span class="keyword">key</span>(<span class="string">`id`</span>)</span><br><span class="line">)<span class="keyword">engine</span>=<span class="keyword">innodb</span> <span class="keyword">default</span> <span class="keyword">charset</span>=utf8;</span><br></pre></td></tr></table></figure><blockquote><p>创建 insert 型触发器，完成插入数据时的日志记录 : </p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> emp_logs_insert_trigger</span><br><span class="line"><span class="keyword">after</span> <span class="keyword">insert</span> </span><br><span class="line"><span class="keyword">on</span> emp </span><br><span class="line"><span class="keyword">for</span> <span class="keyword">each</span> <span class="keyword">row</span> </span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> </span><br><span class="line">emp_logs (<span class="keyword">id</span>,operation,operate_time,operate_id,operate_params)</span><br><span class="line"><span class="keyword">values</span>(<span class="literal">null</span>,<span class="string">'insert'</span>,<span class="keyword">now</span>(),new.id,</span><br><span class="line">       <span class="keyword">concat</span>(<span class="string">'插入后(id:'</span>,new.id,<span class="string">', name:'</span>,new.name,<span class="string">', age:'</span>,new.age,<span class="string">',salary:'</span>,new.salary,<span class="string">')'</span>)</span><br><span class="line">      );</span><br><span class="line"><span class="keyword">end</span>$</span><br></pre></td></tr></table></figure><blockquote><p>创建 update 型触发器，完成更新数据时的日志记录 : </p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> emp_logs_update_trigger</span><br><span class="line"><span class="keyword">after</span> <span class="keyword">update</span> </span><br><span class="line"><span class="keyword">on</span> emp </span><br><span class="line"><span class="keyword">for</span> <span class="keyword">each</span> <span class="keyword">row</span> </span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">insert</span> <span class="keyword">into</span> </span><br><span class="line">  emp_logs (<span class="keyword">id</span>,operation,operate_time,operate_id,operate_params)</span><br><span class="line">  <span class="keyword">values</span>(<span class="literal">null</span>,<span class="string">'update'</span>,<span class="keyword">now</span>(),new.id,</span><br><span class="line">         <span class="keyword">concat</span>(</span><br><span class="line">             <span class="string">'修改前(id:'</span>,old.id,<span class="string">', name:'</span>,old.name,<span class="string">', age:'</span>,old.age,<span class="string">', salary:'</span>,old.salary,<span class="string">') , </span></span><br><span class="line"><span class="string">             修改后(id'</span>,new.id, <span class="string">'name:'</span>,new.name,<span class="string">', age:'</span>,new.age,<span class="string">', salary:'</span>,new.salary,<span class="string">')'</span></span><br><span class="line">         )</span><br><span class="line">        );                                                                      </span><br><span class="line"><span class="keyword">end</span>$</span><br></pre></td></tr></table></figure><blockquote><p>创建delete 行的触发器 , 完成删除数据时的日志记录 : </p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> emp_logs_delete_trigger</span><br><span class="line"><span class="keyword">after</span> <span class="keyword">delete</span> </span><br><span class="line"><span class="keyword">on</span> emp </span><br><span class="line"><span class="keyword">for</span> <span class="keyword">each</span> <span class="keyword">row</span> </span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">insert</span> <span class="keyword">into</span> </span><br><span class="line">  emp_logs (<span class="keyword">id</span>,operation,operate_time,operate_id,operate_params)</span><br><span class="line">  <span class="keyword">values</span>(<span class="literal">null</span>,<span class="string">'delete'</span>,<span class="keyword">now</span>(),old.id,</span><br><span class="line">         <span class="keyword">concat</span>(<span class="string">'删除前(id:'</span>,old.id,<span class="string">', name:'</span>,old.name,<span class="string">', age:'</span>,old.age,<span class="string">', salary:'</span>,old.salary,<span class="string">')'</span>)</span><br><span class="line">        );                                                                      </span><br><span class="line"><span class="keyword">end</span> $</span><br></pre></td></tr></table></figure><blockquote><p>测试：</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> emp(<span class="keyword">id</span>,<span class="keyword">name</span>,age,salary) <span class="keyword">values</span>(<span class="literal">null</span>, <span class="string">'光明右使'</span>,<span class="number">33</span>,<span class="number">3200</span>)$</span><br><span class="line"></span><br><span class="line"><span class="keyword">update</span> emp <span class="keyword">set</span> age = <span class="number">39</span> <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">3</span>$</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> emp <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">7</span>$</span><br></pre></td></tr></table></figure><h4 id="3-删除触发器"><a href="#3-删除触发器" class="headerlink" title="3. 删除触发器"></a>3. 删除触发器</h4><blockquote><p><code>语法结构 :</code> 如果没有指定 schema_name，默认为当前数据库 。</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">trigger</span> [schema_name.]trigger_name</span><br></pre></td></tr></table></figure><h4 id="4-查看触发器"><a href="#4-查看触发器" class="headerlink" title="4. 查看触发器"></a>4. 查看触发器</h4><blockquote><p>可以通过执行 show triggers 命令查看触发器的状态、语法等信息。语法结构 ： </p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">triggers</span>$</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">triggers</span>\G$</span><br></pre></td></tr></table></figure><h2 id="☆"><a href="#☆" class="headerlink" title="☆"></a>☆</h2>]]></content>
    
    
    <summary type="html">&lt;p&gt;渐写到别来，此情深处，红笺为无色。&lt;/p&gt;
&lt;p align=&quot;right&quot;&gt;——晏几道《思远人》&lt;/p&gt;</summary>
    
    
    
    <category term="MySql高级" scheme="http://www.itbuild.cn/categories/MySql%E9%AB%98%E7%BA%A7/"/>
    
    
  </entry>
  
  <entry>
    <title>MySql高级/3.MySql高级之存储过程和函数</title>
    <link href="http://www.itbuild.cn/2020/12/19/MySql%E9%AB%98%E7%BA%A7/3.MySql%E9%AB%98%E7%BA%A7%E4%B9%8B%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E5%92%8C%E5%87%BD%E6%95%B0/"/>
    <id>http://www.itbuild.cn/2020/12/19/MySql%E9%AB%98%E7%BA%A7/3.MySql%E9%AB%98%E7%BA%A7%E4%B9%8B%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E5%92%8C%E5%87%BD%E6%95%B0/</id>
    <published>2020-12-19T13:45:41.687Z</published>
    <updated>2020-12-19T14:02:52.593Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>吴山青，越山青。两岸青山相送迎。谁知离别情？</p><p align="right">——林逋《长相思》</p><a id="more"></a><h2 id="MySql高级之存储过程和函数"><a href="#MySql高级之存储过程和函数" class="headerlink" title="MySql高级之存储过程和函数"></a>MySql高级之存储过程和函数</h2><h4 id="1-存储过程和函数概述"><a href="#1-存储过程和函数概述" class="headerlink" title="1. 存储过程和函数概述"></a>1. 存储过程和函数概述</h4><blockquote><p>存储过程和函数是事先经过编译并存储在数据库中的一段 SQL 语句的集合，调用存储过程和函数可以简化应用开发人员的很多工作，减少数据在数据库和应用服务器之间的传输，对于提高数据处理的效率是有好处的。    </p><p>存储过程和函数的区别在于函数必须有返回值，而存储过程没有。</p><ol><li><p>函数 ： 是一个有返回值的过程 ；</p></li><li><p>过程 ： 是一个没有返回值的函数 ；</p></li></ol></blockquote><h4 id="2-创建存储过程"><a href="#2-创建存储过程" class="headerlink" title="2. 创建存储过程"></a>2. 创建存储过程</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> procedure_name ([proc_parameter[,...]])</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="comment">-- SQL语句</span></span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#示例 ：</span></span><br><span class="line">delimiter $</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> pro_test1()</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">select</span> <span class="string">'Hello Mysql'</span>;</span><br><span class="line"><span class="keyword">end</span>$</span><br></pre></td></tr></table></figure><p><strong><font color="red">知识小贴士</font></strong></p><blockquote><p><code>delimiter</code></p><p>​    该关键字用来声明SQL语句的分隔符 , 告诉 MySQL 解释器，该段命令是否已经结束了，mysql是否可以执行了。<code>默认情况下，delimiter是分号;</code>。在命令行客户端中，如果有一行命令以分号结束，那么回车后，mysql将会执行该命令。</p></blockquote><h4 id="3-调用存储过程"><a href="#3-调用存储过程" class="headerlink" title="3.  调用存储过程"></a>3.  调用存储过程</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">call</span> pro_test1()$</span><br></pre></td></tr></table></figure><h4 id="4-查看存储过程"><a href="#4-查看存储过程" class="headerlink" title="4. 查看存储过程"></a>4. 查看存储过程</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 查询存储过程的状态信息</span><br><span class="line">show procedure status\G$</span><br><span class="line"></span><br><span class="line"># 查询某个存储过程的定义</span><br><span class="line">show create procedure pro_test1 \G$</span><br></pre></td></tr></table></figure><p><img src="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/image-20200727101850538.png" alt="image-20200727101850538"></p><p><img src="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/image-20200727102025580.png" alt="image-20200727102025580"></p><h4 id="5-删除存储过程"><a href="#5-删除存储过程" class="headerlink" title="5. 删除存储过程"></a>5. 删除存储过程</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop procedure if exists pro_test1$</span><br></pre></td></tr></table></figure><h4 id="6-语法"><a href="#6-语法" class="headerlink" title="6. 语法"></a>6. 语法</h4><blockquote><p><code>存储过程是可以编程的，意味着可以使用变量，表达式，控制结构 ， 来完成比较复杂的功能。</code></p></blockquote><h5 id="6-1-变量"><a href="#6-1-变量" class="headerlink" title="6.1 变量"></a>6.1 变量</h5><blockquote><p><code>通过 declare可以定义一个局部变量，该变量的作用范围只能在 begin…end块中。</code></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">declare var_name[,...] type [default value]</span><br><span class="line"># 示例 : </span><br><span class="line">create procedure pro_test2() </span><br><span class="line">begin </span><br><span class="line"> declare num int default 2;</span><br><span class="line"> select num + 9; </span><br><span class="line">end$</span><br></pre></td></tr></table></figure><p><img src="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/image-20200727104732800.png" alt="image-20200727104732800"></p><blockquote><p>直接赋值使用 set，可以赋常量或者赋表达式，具体语法如下：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">set var_name &#x3D; expr [, var_name &#x3D; expr] ...</span><br><span class="line">#示例 : </span><br><span class="line">create procedure pri_test3()</span><br><span class="line">begin </span><br><span class="line">declare name varchar(20);</span><br><span class="line">set name &#x3D; &quot;MySql&quot;;</span><br><span class="line">select name;</span><br><span class="line">end$</span><br></pre></td></tr></table></figure><p><img src="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/image-20200727105742087.png" alt="image-20200727105742087"></p><blockquote><p>也可以通过select … into 方式进行赋值操作 :</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> pro_test4()</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">declare</span> countnum <span class="built_in">int</span>;</span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">into</span> countnum <span class="keyword">from</span> city;</span><br><span class="line">    <span class="keyword">select</span> countnum;</span><br><span class="line"><span class="keyword">end</span>$</span><br></pre></td></tr></table></figure><h5 id="6-2-if条件判断"><a href="#6-2-if条件判断" class="headerlink" title="6.2 if条件判断"></a>6.2 if条件判断</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#语法结构 : </span><br><span class="line">if search_condition then statement_list</span><br><span class="line">[elseif search_condition then statement_list] ...</span><br><span class="line">[else statement_list]</span><br><span class="line">end if;</span><br></pre></td></tr></table></figure><blockquote><p>需求： 根据定义的身高变量，判定当前身高的所属的身材类型 </p><ul><li><code>180 及以上 ----------&gt; 身材高挑</code></li><li><code>170 - 180  ---------&gt; 标准身材</code></li><li><code>170 以下  ----------&gt; 一般身材</code></li></ul></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> pro_test5()</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">declare</span> height <span class="built_in">int</span> <span class="keyword">default</span> <span class="number">175</span>;</span><br><span class="line">    <span class="keyword">declare</span> des <span class="built_in">varchar</span>(<span class="number">20</span>);</span><br><span class="line">    if height &gt;= 180 then</span><br><span class="line">        <span class="keyword">set</span> des = <span class="string">'身材高挑'</span>;</span><br><span class="line">    elseif height &gt;=170 and height &lt; 180 then</span><br><span class="line">        <span class="keyword">set</span> des = <span class="string">'标准身材'</span>;</span><br><span class="line">    else </span><br><span class="line">        <span class="keyword">set</span> des = <span class="string">'一般身材'</span>;</span><br><span class="line">    <span class="keyword">end</span> <span class="keyword">if</span>;</span><br><span class="line">    <span class="keyword">select</span> des;</span><br><span class="line"><span class="keyword">end</span>$</span><br></pre></td></tr></table></figure><p><img src="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/image-20200727111942527.png" alt="image-20200727111942527"></p><h5 id="6-3-传递参数"><a href="#6-3-传递参数" class="headerlink" title="6.3 传递参数"></a>6.3 传递参数</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 语法格式 : </span><br><span class="line">create procedure procedure_name([in&#x2F;out&#x2F;inout] 参数名   参数类型)</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">IN :   该参数可以作为输入，也就是需要调用方传入值 , 默认</span><br><span class="line">OUT:   该参数作为输出，也就是该参数可以作为返回值</span><br><span class="line">INOUT: 既可以作为输入参数，也可以作为输出参数</span><br></pre></td></tr></table></figure><h6 id="IN-输入"><a href="#IN-输入" class="headerlink" title="IN - 输入"></a>IN - 输入</h6><p>需求 :根据定义的身高变量，判定当前身高的所属的身材类型 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#示例</span><br><span class="line">create procedure pro_test6(in height int)</span><br><span class="line">begin</span><br><span class="line">  declare des varchar(50) default &#39;&#39;;</span><br><span class="line">  if height &gt;&#x3D; 180 then</span><br><span class="line">    set des &#x3D;&#39;身材高挑&#39;;</span><br><span class="line">  elseif height &gt;&#x3D; 170 and height &lt; 180 then</span><br><span class="line">    set des &#x3D;&#39;标准身材&#39;;</span><br><span class="line">  else</span><br><span class="line">    set des &#x3D;&#39;一般身材&#39;;</span><br><span class="line">  end if;</span><br><span class="line">  select concat(&#39;身高 &#39;, height , &#39;对应的身材类型为:&#39;,des) as result;</span><br><span class="line">end$</span><br></pre></td></tr></table></figure><p><img src="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/image-20200727112544537.png" alt="image-20200727112544537"></p><h6 id="OUT-输出"><a href="#OUT-输出" class="headerlink" title="OUT-输出"></a>OUT-输出</h6><blockquote><p> 需求 :根据传入的身高变量，获取当前身高的所属的身材类型</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#示例:</span><br><span class="line">create procedure pro_test7(in height int , out des varchar(100))</span><br><span class="line">begin</span><br><span class="line">  if height &gt;&#x3D; 180 then</span><br><span class="line">    set des &#x3D;&#39;身材高挑&#39;;</span><br><span class="line">  elseif height &gt;&#x3D; 170 and height &lt; 180 then</span><br><span class="line">    set des &#x3D;&#39;标准身材&#39;;</span><br><span class="line">  else</span><br><span class="line">    set des &#x3D;&#39;一般身材&#39;;</span><br><span class="line">  end if;</span><br><span class="line">end$</span><br></pre></td></tr></table></figure><blockquote><p>调用</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">call pro_test5(168, @description)$</span><br><span class="line">select @description$</span><br></pre></td></tr></table></figure><p><img src="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/image-20200727112836446.png" alt="image-20200727112836446"></p><p><font color='red'><strong>小知识</strong> </font></p><blockquote><p><code>@description :  这种变量要在变量名称前面加上“@”符号，叫做用户会话变量，代表整个会话过程他都是有作用的，这个类似于全局变量一样。</code></p><p><code>@@global.sort_buffer_size : 这种在变量前加上 &quot;@@&quot; 符号, 叫做 系统变量</code> </p></blockquote><h5 id="6-4-case结构"><a href="#6-4-case结构" class="headerlink" title="6.4 case结构"></a>6.4 case结构</h5><blockquote><p>语法结构 : </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">方式一 : </span><br><span class="line">CASE case_value</span><br><span class="line">  WHEN when_value THEN statement_list</span><br><span class="line">  [WHEN when_value THEN statement_list] ...</span><br><span class="line">  [ELSE statement_list]</span><br><span class="line">END CASE;</span><br><span class="line"></span><br><span class="line">方式二 : </span><br><span class="line">CASE</span><br><span class="line">  WHEN search_condition THEN statement_list</span><br><span class="line">  [WHEN search_condition THEN statement_list] ...</span><br><span class="line">  [ELSE statement_list]</span><br><span class="line">END CASE;</span><br></pre></td></tr></table></figure><blockquote><p>需求:给定一个月份, 然后计算出所在的季度</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#示例  :</span><br><span class="line">create procedure pro_test8(month int)</span><br><span class="line">begin</span><br><span class="line">  declare result varchar(20);</span><br><span class="line">  case </span><br><span class="line">    when month &gt;&#x3D; 1 and month &lt;&#x3D;3 then </span><br><span class="line">      set result &#x3D; &#39;第一季度&#39;;</span><br><span class="line">    when month &gt;&#x3D; 4 and month &lt;&#x3D;6 then </span><br><span class="line">      set result &#x3D; &#39;第二季度&#39;;</span><br><span class="line">    when month &gt;&#x3D; 7 and month &lt;&#x3D;9 then </span><br><span class="line">      set result &#x3D; &#39;第三季度&#39;;</span><br><span class="line">    when month &gt;&#x3D; 10 and month &lt;&#x3D;12 then </span><br><span class="line">      set result &#x3D; &#39;第四季度&#39;;</span><br><span class="line">  end case;</span><br><span class="line">  select concat(&#39;您输入的月份为 :&#39;, month , &#39; , 该月份为 : &#39; , result) as content ;</span><br><span class="line">end$</span><br></pre></td></tr></table></figure><p><img src="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/image-20200727115247463.png" alt="image-20200727115247463"></p><h5 id="6-5-while循环"><a href="#6-5-while循环" class="headerlink" title="6.5 while循环"></a>6.5 while循环</h5><blockquote><p>语法结构: </p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">while search_condition <span class="keyword">do</span></span><br><span class="line">statement_list</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">while</span>;</span><br></pre></td></tr></table></figure><blockquote><p><code>需求:计算从1加到n的值</code></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#示例  : </span><br><span class="line">create procedure pro_test9(n int)</span><br><span class="line">begin</span><br><span class="line">  declare total int default 0;</span><br><span class="line">  declare num int default 1;</span><br><span class="line">  while num&lt;&#x3D;n do</span><br><span class="line">    set total &#x3D; total + num;</span><br><span class="line">set num &#x3D; num + 1;</span><br><span class="line">  end while;</span><br><span class="line">  select total;</span><br><span class="line">end$</span><br></pre></td></tr></table></figure><p><img src="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/image-20200727115640901.png" alt="image-20200727115640901"></p><h5 id="6-6-repeat结构"><a href="#6-6-repeat结构" class="headerlink" title="6.6 repeat结构"></a>6.6 repeat结构</h5><blockquote><p><code>有条件的循环控制语句, 当满足条件的时候退出循环 。while 是满足条件才执行，repeat 是满足条件就退出循环。</code>语法结构 : </p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">repeat</span><br><span class="line">  statement_list</span><br><span class="line">  until search_condition</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">repeat</span>;</span><br></pre></td></tr></table></figure><blockquote><p>需求: 计算从1加到n的值</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#示例</span><br><span class="line">create procedure pro_test10(n int)</span><br><span class="line">begin</span><br><span class="line">  declare total int default 0;</span><br><span class="line">  repeat </span><br><span class="line">    set total &#x3D; total + n;</span><br><span class="line">    set n &#x3D; n - 1;</span><br><span class="line">    until n&#x3D;0  </span><br><span class="line">  end repeat;</span><br><span class="line">  select total ;</span><br><span class="line">  </span><br><span class="line">end$</span><br></pre></td></tr></table></figure><p><img src="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/image-20200727120024840.png" alt="image-20200727120024840"></p><h5 id="6-7-loop语句"><a href="#6-7-loop语句" class="headerlink" title="6.7 loop语句"></a>6.7 loop语句</h5><blockquote><p>LOOP 实现简单的循环，退出循环的条件需要使用其他的语句定义，通常可以使用 LEAVE 语句实现，具体语法如下：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[begin_label:] loop</span><br><span class="line">  statement_list</span><br><span class="line">end loop [end_label]</span><br></pre></td></tr></table></figure><blockquote><p>如果不在 statement_list 中增加退出循环的语句，那么 LOOP 语句可以用来实现简单的死循环。</p></blockquote><h5 id="6-8-leave语句"><a href="#6-8-leave语句" class="headerlink" title="6.8 leave语句"></a>6.8 leave语句</h5><blockquote><p>用来从标注的流程构造中退出，通常和 BEGIN … END 或者循环一起使用。下面是一个使用 LOOP 和 LEAVE 的简单例子 , 退出循环：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">create procedure pro_test11(n int)</span><br><span class="line">begin</span><br><span class="line">declare total int default 0;</span><br><span class="line">ins: loop</span><br><span class="line">if n &lt;&#x3D; 0 then</span><br><span class="line">leave ins;</span><br><span class="line">        end if;</span><br><span class="line">        set total &#x3D; total + n;</span><br><span class="line">        set n &#x3D; n - 1;</span><br><span class="line">    end loop ins;</span><br><span class="line">    </span><br><span class="line">    select total;</span><br><span class="line">end$</span><br></pre></td></tr></table></figure><p><img src="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/image-20200727120757714.png" alt="image-20200727120757714"></p><h5 id="6-9-游标-光标"><a href="#6-9-游标-光标" class="headerlink" title="6.9 游标/光标"></a>6.9 游标/光标</h5><p>游标是用来存储查询结果集的数据类型 , 在存储过程和函数中可以使用光标对结果集进行循环的处理。光标的使用包括光标的声明、OPEN、FETCH 和 CLOSE，其语法分别如下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#声明光标：</span><br><span class="line">declare cursor_name cursor for select_statement;</span><br><span class="line"></span><br><span class="line">#OPEN 光标：</span><br><span class="line">open cursor_name;</span><br><span class="line"></span><br><span class="line">#FETCH 光标：</span><br><span class="line">fetch cursor_name into var_name [, var_name] ...</span><br><span class="line"></span><br><span class="line">#CLOSE 光标：</span><br><span class="line">close cursor_name ;</span><br></pre></td></tr></table></figure><blockquote><p><code>示例 :</code> </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#初始化脚本</span><br><span class="line">create table emp(</span><br><span class="line">  id int(11) not null auto_increment ,</span><br><span class="line">  name varchar(50) not null comment &#39;姓名&#39;,</span><br><span class="line">  age int(11) comment &#39;年龄&#39;,</span><br><span class="line">  salary int(11) comment &#39;薪水&#39;,</span><br><span class="line">  primary key(&#96;id&#96;)</span><br><span class="line">)engine&#x3D;innodb default charset&#x3D;utf8 ;</span><br><span class="line"></span><br><span class="line">insert into emp(id,name,age,salary) values(null,&#39;金毛狮王&#39;,55,3800),(null,&#39;白眉鹰王&#39;,60,4000),(null,&#39;青翼蝠王&#39;,38,2800),(null,&#39;紫衫龙王&#39;,42,1800);</span><br></pre></td></tr></table></figure><blockquote><p><code>查询emp表中数据, 并逐行获取进行展示</code></p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> pro_test12()</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">declare</span> e_id <span class="built_in">int</span>(<span class="number">11</span>);</span><br><span class="line">  <span class="keyword">declare</span> e_name <span class="built_in">varchar</span>(<span class="number">50</span>);</span><br><span class="line">  <span class="keyword">declare</span> e_age <span class="built_in">int</span>(<span class="number">11</span>);</span><br><span class="line">  <span class="keyword">declare</span> e_salary <span class="built_in">int</span>(<span class="number">11</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">declare</span> emp_result <span class="keyword">cursor</span> <span class="keyword">for</span> <span class="keyword">select</span> * <span class="keyword">from</span> emp;</span><br><span class="line">  </span><br><span class="line">  open emp_result;</span><br><span class="line">  </span><br><span class="line">  fetch emp_result into e_id,e_name,e_age,e_salary;</span><br><span class="line">  <span class="keyword">select</span> <span class="keyword">concat</span>(<span class="string">'id='</span>,e_id , <span class="string">', name='</span>,e_name, <span class="string">', age='</span>, e_age, <span class="string">', 薪资为: '</span>,e_salary);</span><br><span class="line">  </span><br><span class="line">  fetch emp_result into e_id,e_name,e_age,e_salary;</span><br><span class="line">  <span class="keyword">select</span> <span class="keyword">concat</span>(<span class="string">'id='</span>,e_id , <span class="string">', name='</span>,e_name, <span class="string">', age='</span>, e_age, <span class="string">', 薪资为: '</span>,e_salary);</span><br><span class="line">  </span><br><span class="line">  fetch emp_result into e_id,e_name,e_age,e_salary;</span><br><span class="line">  <span class="keyword">select</span> <span class="keyword">concat</span>(<span class="string">'id='</span>,e_id , <span class="string">', name='</span>,e_name, <span class="string">', age='</span>, e_age, <span class="string">', 薪资为: '</span>,e_salary);</span><br><span class="line">  </span><br><span class="line">  fetch emp_result into e_id,e_name,e_age,e_salary;</span><br><span class="line">  <span class="keyword">select</span> <span class="keyword">concat</span>(<span class="string">'id='</span>,e_id , <span class="string">', name='</span>,e_name, <span class="string">', age='</span>, e_age, <span class="string">', 薪资为: '</span>,e_salary);</span><br><span class="line">  </span><br><span class="line">  fetch emp_result into e_id,e_name,e_age,e_salary;</span><br><span class="line">  <span class="keyword">select</span> <span class="keyword">concat</span>(<span class="string">'id='</span>,e_id , <span class="string">', name='</span>,e_name, <span class="string">', age='</span>, e_age, <span class="string">', 薪资为: '</span>,e_salary);</span><br><span class="line">  </span><br><span class="line">  close emp_result;</span><br><span class="line"><span class="keyword">end</span>$</span><br></pre></td></tr></table></figure><blockquote><p>通过循环结构 , 获取游标中的数据 : </p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> pro_test13()</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">id</span> <span class="built_in">int</span>(<span class="number">11</span>);</span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">50</span>);</span><br><span class="line"><span class="keyword">declare</span> age <span class="built_in">int</span>(<span class="number">11</span>);</span><br><span class="line"><span class="keyword">declare</span> salary <span class="built_in">int</span>(<span class="number">11</span>);</span><br><span class="line"><span class="keyword">declare</span> has_data <span class="built_in">int</span> <span class="keyword">default</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> emp_result <span class="keyword">cursor</span> <span class="keyword">for</span> <span class="keyword">select</span> * <span class="keyword">from</span> emp;</span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">exit</span> <span class="keyword">handler</span> <span class="keyword">for</span> <span class="keyword">not</span> <span class="keyword">found</span> <span class="keyword">set</span> has_data = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">open emp_result;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">  repeat</span><br><span class="line">    fetch emp_result into id , name , age , salary;</span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">concat</span>(<span class="string">'id为'</span>,<span class="keyword">id</span>, <span class="string">', name 为'</span> ,<span class="keyword">name</span> , <span class="string">', age为 '</span> ,age , <span class="string">', 薪水为: '</span>, salary);</span><br><span class="line">    until has_data = 0</span><br><span class="line">  <span class="keyword">end</span> <span class="keyword">repeat</span>;</span><br><span class="line">  </span><br><span class="line">  close emp_result;</span><br><span class="line"><span class="keyword">end</span>$</span><br></pre></td></tr></table></figure><h4 id="7-存储函数"><a href="#7-存储函数" class="headerlink" title="7. 存储函数"></a>7. 存储函数</h4><blockquote><p>语法结构:</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">create function function_name([param type ...])</span><br><span class="line">returns type</span><br><span class="line">begin</span><br><span class="line">...</span><br><span class="line">end$</span><br></pre></td></tr></table></figure><blockquote><p><code>案例 : 定义一个存储过程, 请求满足条件的总记录数 ;</code></p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">function</span> count_city(countryId <span class="built_in">int</span>)</span><br><span class="line"><span class="keyword">returns</span> <span class="built_in">int</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">declare</span> cnum <span class="built_in">int</span> ;</span><br><span class="line">  <span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">into</span> cnum <span class="keyword">from</span> city <span class="keyword">where</span> country_id = countryId;</span><br><span class="line">  return cnum;</span><br><span class="line"><span class="keyword">end</span>$</span><br></pre></td></tr></table></figure><blockquote><p>调用: </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select count_city(1)$</span><br><span class="line"></span><br><span class="line">select count_city(2)$</span><br></pre></td></tr></table></figure><h2 id="☆"><a href="#☆" class="headerlink" title="☆"></a>☆</h2>]]></content>
    
    
    <summary type="html">&lt;p&gt;吴山青，越山青。两岸青山相送迎。谁知离别情？&lt;/p&gt;
&lt;p align=&quot;right&quot;&gt;——林逋《长相思》&lt;/p&gt;</summary>
    
    
    
    <category term="MySql高级" scheme="http://www.itbuild.cn/categories/MySql%E9%AB%98%E7%BA%A7/"/>
    
    
  </entry>
  
  <entry>
    <title>MySql高级/2.MySql高级之视图</title>
    <link href="http://www.itbuild.cn/2020/12/19/MySql%E9%AB%98%E7%BA%A7/2.MySql%E9%AB%98%E7%BA%A7%E4%B9%8B%E8%A7%86%E5%9B%BE/"/>
    <id>http://www.itbuild.cn/2020/12/19/MySql%E9%AB%98%E7%BA%A7/2.MySql%E9%AB%98%E7%BA%A7%E4%B9%8B%E8%A7%86%E5%9B%BE/</id>
    <published>2020-12-19T13:45:41.685Z</published>
    <updated>2020-12-19T14:02:52.492Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>花似伊，柳似伊。花柳青春人别离。</p><p align="right">——欧阳修《长相思》</p><a id="more"></a>## MySql高级之视图<h4 id="1-视图概述"><a href="#1-视图概述" class="headerlink" title="1. 视图概述"></a>1. 视图概述</h4><blockquote><p><code>视图（View）是一种虚拟存在的表。</code>视图并不在数据库中实际存在，行和列数据来自定义视图的查询中使用表，并且是在使用视图时动态生成的。通俗的讲，<code>视图就是一条SELECT语句执行后返回的结果集</code>。所以我们在创建视图的时候，主要的工作就落在创建这条SQL查询语句上。</p><p>视图相对于普通的表的优势主要包括以下几项。</p><ul><li><code>简单：使用视图的用户完全不需要关心后面对应的表的结构、关联条件和筛选条件，对用户来说已经是过滤好的复合条件的结果集。</code></li><li><code>安全：使用视图的用户只能访问他们被允许查询的结果集，对表的权限管理并不能限制到某个行某个列，但是通过视图就可以简单的实现。</code></li><li><code>数据独立：一旦视图的结构确定了，可以屏蔽表结构变化对用户的影响，源表增加列对视图没有影响；源表修改列名，则可以通过修改视图来解决，不会造成对访问者的影响。</code></li></ul></blockquote><h4 id="2-创建或者修改视图"><a href="#2-创建或者修改视图" class="headerlink" title="2. 创建或者修改视图"></a>2. 创建或者修改视图</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建视图的语法为：</span></span><br><span class="line"><span class="keyword">create</span> [<span class="keyword">or</span> <span class="keyword">replace</span>] [algorithm] = &#123;undefined | <span class="keyword">merge</span> | temptable&#125;]</span><br><span class="line"><span class="keyword">view</span> view_name [(column_list)]</span><br><span class="line"><span class="keyword">as</span> select_statement</span><br><span class="line">[<span class="keyword">with</span> [<span class="keyword">cascaded</span> | <span class="keyword">local</span>] <span class="keyword">check</span> <span class="keyword">option</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#修改视图的语法为：</span></span><br><span class="line"><span class="keyword">alter</span> [algorithm] = &#123;undefined | <span class="keyword">merge</span> | temptable&#125;]</span><br><span class="line"><span class="keyword">view</span> view_name [(column_list)]</span><br><span class="line"><span class="keyword">as</span> select_statement</span><br><span class="line">[<span class="keyword">with</span> [<span class="keyword">cascaded</span> | <span class="keyword">local</span>] <span class="keyword">check</span> <span class="keyword">option</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#选项 : </span></span><br><span class="line">[<span class="keyword">with</span> [<span class="keyword">cascaded</span> | <span class="keyword">local</span>] <span class="keyword">check</span> <span class="keyword">option</span>] 决定了是否允许更新数据使记录不再满足视图的条件。</span><br><span class="line"><span class="keyword">local</span> ： 只要满足本视图的条件就可以更新。</span><br><span class="line"><span class="keyword">cascaded</span> ： 必须满足所有针对该视图的所有视图的条件才可以更新。 默认值.</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建city_country_view视图 , 执行如下SQL : </span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> <span class="keyword">replace</span> <span class="keyword">view</span> city_country_view </span><br><span class="line"><span class="keyword">as</span> </span><br><span class="line"><span class="keyword">select</span> t.*,c.country_name </span><br><span class="line"><span class="keyword">from</span> country c , city t </span><br><span class="line"><span class="keyword">where</span> c.country_id = t.country_id;</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看视图</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> city_country_view;</span><br></pre></td></tr></table></figure><p><strong><img src="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/image-20200726174605375.png" alt="image-20200726174605375"></strong> </p><h4 id="3-查看视图"><a href="#3-查看视图" class="headerlink" title="3. 查看视图"></a>3. 查看视图</h4><p>从 MySQL 5.1 版本开始，使用 show tables 命令的时候不仅显示表的名字，同时也会显示视图的名字，而<code>不存在</code>单独显示视图的 show views 命令。</p><p><img src="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/image-20200726174804935.png" alt="image-20200726174804935">     </p><p>同样，在使用 show table status 命令的时候，不但可以显示表的信息，同时也可以显示视图的信息。    </p><p><img src="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/image-20200726175019563.png" alt="image-20200726175019563"> </p><p>如果需要查询某个视图的定义，可以使用 SHOW CREATE VIEW 命令进行查看 ： </p><p><img src="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/image-20200726175240691.png" alt="image-20200726175240691">  </p><h4 id="4-删除视图"><a href="#4-删除视图" class="headerlink" title="4. 删除视图"></a>4. 删除视图</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#语法 </span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">view</span> [<span class="keyword">if</span> <span class="keyword">exists</span>] view_name [, view_name] ...[restrict | <span class="keyword">cascade</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#删除视图city_country_view </span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">view</span> city_country_view ;</span><br></pre></td></tr></table></figure><h2 id="☆"><a href="#☆" class="headerlink" title="☆"></a>☆</h2>]]></content>
    
    
    <summary type="html">&lt;p&gt;花似伊，柳似伊。花柳青春人别离。&lt;/p&gt;
&lt;p align=&quot;right&quot;&gt;——欧阳修《长相思》&lt;/p&gt;</summary>
    
    
    
    <category term="MySql高级" scheme="http://www.itbuild.cn/categories/MySql%E9%AB%98%E7%BA%A7/"/>
    
    
  </entry>
  
  <entry>
    <title>MySql高级/1.MySql高级之索引</title>
    <link href="http://www.itbuild.cn/2020/12/19/MySql%E9%AB%98%E7%BA%A7/1.MySql%E9%AB%98%E7%BA%A7%E4%B9%8B%E7%B4%A2%E5%BC%95/"/>
    <id>http://www.itbuild.cn/2020/12/19/MySql%E9%AB%98%E7%BA%A7/1.MySql%E9%AB%98%E7%BA%A7%E4%B9%8B%E7%B4%A2%E5%BC%95/</id>
    <published>2020-12-19T13:45:41.683Z</published>
    <updated>2020-12-19T14:02:51.391Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>花城人去今萧索，春梦绕胡沙。</p><p align="right">——赵佶《眼儿媚》</p><a id="more"></a><h3 id="MySql高级之索引"><a href="#MySql高级之索引" class="headerlink" title="MySql高级之索引"></a>MySql高级之索引</h3><h4 id="1-索引概述"><a href="#1-索引概述" class="headerlink" title="1. 索引概述"></a>1. 索引概述</h4><blockquote><p>MySQL官方对索引的定义为：<code>索引（index）是帮助MySQL高效获取数据的数据结构（有序）。在数据之外，数据库系统还维护者满足特定查找算法的数据结构，这些数据结构以某种方式引用（指向）数据， 这样就可以在这些数据结构上实现高级查找算法，这种数据结构就是索引。</code></p></blockquote><p><img src="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/1555902055367.png" alt="1555902055367"> </p><blockquote><p>左边是数据表，一共有两列七条记录，最左边的是数据记录的物理地址（注意逻辑上相邻的记录在磁盘上也并不是一定物理相邻的）。<code>为了加快Col2的查找</code>，可以维护一个右边所示的二叉查找树，<code>每个节点分别包含索引键值和一个指向对应数据记录物理地址的指针</code>，这样就可以运用二叉查找快速获取到相应数据。</p><p><code>一般来说索引本身也很大，不可能全部存储在内存中，因此索引往往以索引文件的形式存储在磁盘上。</code>索引是数据库中用来提高性能的最常用的工具。</p></blockquote><h4 id="2-索引优势劣势"><a href="#2-索引优势劣势" class="headerlink" title="2. 索引优势劣势"></a>2. 索引优势劣势</h4><h5 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h5><blockquote><ol><li><code>类似于书籍的目录索引，提高数据检索的效率，降低数据库的IO成本。</code></li><li><code>通过索引列对数据进行排序，降低数据排序的成本，降低CPU的消耗。</code></li></ol></blockquote><h5 id="劣势"><a href="#劣势" class="headerlink" title="劣势"></a>劣势</h5><blockquote><ol><li>实际上索引也是一张表，该表中保存了主键与索引字段，并指向实体类的记录，所以<code>索引列也是要占用空间的</code>。</li><li>虽然索引大大提高了查询效率，同时却也降低更新表的速度，如对表进行INSERT、UPDATE、DELETE。因为更新表时，MySQL 不仅要保存数据，还要保存一下索引文件每次更新添加了索引列的字段，都会调整因为更新所带来的键值变化后的索引信息。</li></ol></blockquote><h4 id="3-索引结构☆"><a href="#3-索引结构☆" class="headerlink" title="3. 索引结构☆"></a>3. 索引结构☆</h4><blockquote><p>索引是在MySQL的存储引擎层中实现的，而不是在服务器层实现的。所以每种存储引擎的索引都不一定完全相同，也不是所有的存储引擎都支持所有的索引类型的。MySQL目前提供了以下4种索引：</p><ul><li><code>BTREE 索引 ： 最常见的索引类型，大部分索引都支持 B 树索引。</code></li><li>HASH 索引：只有Memory引擎支持 ， 使用场景简单 。</li><li>R-tree 索引（空间索引）：空间索引是MyISAM引擎的一个特殊索引类型，主要用于地理空间数据类型，通常使用较少，不做特别介绍。</li><li>Full-text （全文索引） ：全文索引也是MyISAM的一个特殊索引类型，主要用于全文索引，InnoDB从Mysql5.6版本开始支持全文索引。</li></ul></blockquote><center><b>MyISAM、InnoDB、Memory三种存储引擎对各种索引类型的支持</b></center><table><thead><tr><th>索引</th><th><code>InnoDB引擎</code></th><th>MyISAM引擎</th><th>Memory引擎</th></tr></thead><tbody><tr><td><code>BTREE索引</code></td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td><code>HASH 索引</code></td><td>不支持</td><td>不支持</td><td>支持</td></tr><tr><td><code>R-tree 索引</code></td><td>不支持</td><td>支持</td><td>不支持</td></tr><tr><td><code>Full-text</code></td><td>5.6版本之后支持</td><td>支持</td><td>不支持</td></tr></tbody></table><blockquote><p><code>我们平常所说的索引，如果没有特别指明，都是指B+树（多路搜索树，并不一定是二叉的）结构组织的索引。其中聚集索引、复合索引、前缀索引、唯一索引默认都是使用 B+tree 索引，统称为索引。</code></p></blockquote><h5 id="3-1-BTree-结构"><a href="#3-1-BTree-结构" class="headerlink" title="3.1 BTree 结构"></a>3.1 BTree 结构</h5><blockquote><p><code>BTree又叫多路平衡搜索树，一颗m叉的BTree特性如下：</code></p><ul><li>树中每个节点最多包含m个孩子。</li><li>除根节点与叶子节点外，每个节点至少有<code>[ceil(m/2)]</code>个孩子。</li><li>若根节点不是叶子节点，则至少有两个孩子。</li><li>所有的叶子节点都在同一层。</li><li><code>每个非叶子节点由n个key与n+1个指针组成，其中[ceil(m/2)-1] &lt;= n &lt;= m-1</code> </li></ul></blockquote><h6 id="以5叉BTree为例"><a href="#以5叉BTree为例" class="headerlink" title="以5叉BTree为例"></a>以5叉BTree为例</h6><blockquote><p>key的数量：<code>公式推导[ceil(m/2)-1] &lt;= n &lt;= m-1</code>。</p><p>所以 2 &lt;= n &lt;=4 。<code>当n&gt;4时，中间节点分裂到父节点，两边节点分裂。</code></p><p>插入 C N G A H E K Q M F W L T Z D P R X Y S 数据为例。演变过程如下：</p><ol><li>插入前4个字母 C N G A </li></ol><p><img src="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/1555944126588.png" alt="1555944126588"> </p><ol start="2"><li>插入H，n&gt;4，中间元素G字母向上分裂到新的节点</li></ol><p><img src="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/1555944549825.png" alt="1555944549825"> </p><ol start="3"><li>插入E，K，Q不需要分裂</li></ol><p><img src="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/1555944596893.png" alt="1555944596893"> </p><ol start="4"><li>插入M，中间元素M字母向上分裂到父节点G</li></ol><p><img src="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/1555944652560.png" alt="1555944652560"> </p><ol start="5"><li>插入F，W，L，T不需要分裂</li></ol><p><img src="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/1555944686928.png" alt="1555944686928"> </p><ol start="6"><li>插入Z，中间元素T向上分裂到父节点中 </li></ol><p><img src="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/1555944713486.png" alt="1555944713486"> </p><ol start="7"><li>插入D，中间元素D向上分裂到父节点中。然后插入P，R，X，Y不需要分裂</li></ol><p><img src="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/1555944749984.png" alt="1555944749984"> </p><ol start="8"><li>最后插入S，NPQR节点n&gt;5，中间节点Q向上分裂，但分裂后父节点DGMT的n&gt;5，中间节点M向上分裂</li></ol><p><img src="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/1555944848294.png" alt="1555944848294"> </p><p><code>到此，该BTREE树就已经构建完成了， BTREE树 和 二叉树 相比， 查询数据的效率更高， 因为对于相同的数据量来说，BTREE的层级结构比二叉树小，因此搜索速度快。</code></p></blockquote><h5 id="3-2-B-TREE-结构"><a href="#3-2-B-TREE-结构" class="headerlink" title="3.2 B+TREE 结构"></a>3.2 B+TREE 结构</h5><blockquote><p>B+Tree为BTree的变种，B+Tree与BTree的区别为：</p><ol><li><code>n叉B+Tree最多含有n个key，而BTree最多含有n-1个key。</code></li><li>B+Tree的叶子节点保存所有的key信息，依key大小顺序排列。</li><li>所有的非叶子节点都可以看作是key的索引部分。</li></ol></blockquote><p><img src="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/00001.jpg" alt="1555906287178"> </p><blockquote><p><code>由于B+Tree只有叶子节点保存key信息，查询任何key都要从root走到叶子。所以B+Tree的查询效率更加稳定。</code></p></blockquote><h5 id="3-3-MySQL中的B-Tree"><a href="#3-3-MySQL中的B-Tree" class="headerlink" title="3.3 MySQL中的B+Tree"></a>3.3 MySQL中的B+Tree</h5><p><code>MySql索引数据结构对经典的B+Tree进行了优化</code>。在原B+Tree的基础上，增加一个指向相邻叶子节点的链表指针，就形成了带有顺序指针的B+Tree，提高区间访问的性能。MySQL中的 B+Tree 索引结构示意图: </p><p><img src="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/1555906287178.png" alt="1555906287178">  </p><h4 id="4-索引分类"><a href="#4-索引分类" class="headerlink" title="4. 索引分类"></a>4. 索引分类</h4><blockquote><ol><li>单值索引 ：即一个索引只包含单个列，一个表可以有多个单列索引</li><li>唯一索引 ：索引列的值必须唯一，但允许有空值</li><li>复合索引 ：即一个索引包含多个列</li></ol></blockquote><h4 id="5-索引语法"><a href="#5-索引语法" class="headerlink" title="5. 索引语法"></a>5. 索引语法</h4><p>索引在创建表的时候，可以同时创建， 也可以随时增加新的索引。</p><p>准备环境:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建测试数据库</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> mysql_senior <span class="keyword">default</span> <span class="keyword">charset</span>=utf8mb4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> mysql_senior;</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建city表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`city`</span> (</span><br><span class="line">  <span class="string">`city_id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`city_name`</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`country_id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`city_id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建country表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`country`</span> (</span><br><span class="line">  <span class="string">`country_id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`country_name`</span> <span class="built_in">varchar</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`country_id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment">#插入测试数据</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`city`</span> (<span class="string">`city_id`</span>, <span class="string">`city_name`</span>, <span class="string">`country_id`</span>) <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">'西安'</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`city`</span> (<span class="string">`city_id`</span>, <span class="string">`city_name`</span>, <span class="string">`country_id`</span>) <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">'NewYork'</span>,<span class="number">2</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`city`</span> (<span class="string">`city_id`</span>, <span class="string">`city_name`</span>, <span class="string">`country_id`</span>) <span class="keyword">values</span>(<span class="number">3</span>,<span class="string">'北京'</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`city`</span> (<span class="string">`city_id`</span>, <span class="string">`city_name`</span>, <span class="string">`country_id`</span>) <span class="keyword">values</span>(<span class="number">4</span>,<span class="string">'上海'</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`country`</span> (<span class="string">`country_id`</span>, <span class="string">`country_name`</span>) <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">'China'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`country`</span> (<span class="string">`country_id`</span>, <span class="string">`country_name`</span>) <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">'America'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`country`</span> (<span class="string">`country_id`</span>, <span class="string">`country_name`</span>) <span class="keyword">values</span>(<span class="number">3</span>,<span class="string">'Japan'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`country`</span> (<span class="string">`country_id`</span>, <span class="string">`country_name`</span>) <span class="keyword">values</span>(<span class="number">4</span>,<span class="string">'UK'</span>);</span><br></pre></td></tr></table></figure><p><img src="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/image-20200726155630198.png" alt="image-20200726155630198"></p><h5 id="5-1-创建索引"><a href="#5-1-创建索引" class="headerlink" title="5.1 创建索引"></a>5.1 创建索引</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#语法 </span></span><br><span class="line"><span class="keyword">CREATE</span> [<span class="keyword">UNIQUE</span>|FULLTEXT|SPATIAL]  <span class="keyword">INDEX</span> index_name </span><br><span class="line">[<span class="keyword">USING</span>  index_type]</span><br><span class="line"><span class="keyword">ON</span> tbl_name(index_col_name,...)</span><br><span class="line"><span class="comment"># 为city表中的city_name字段创建索引</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> idx_city_name <span class="keyword">on</span> city(city_name);</span><br></pre></td></tr></table></figure><h5 id="5-2-查看索引"><a href="#5-2-查看索引" class="headerlink" title="5.2 查看索引"></a>5.2 查看索引</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#语法： </span><br><span class="line">show index  from  table_name;</span><br><span class="line"></span><br><span class="line">#查看city表的索引</span><br><span class="line">show index from city;</span><br><span class="line">show index from city\G;</span><br></pre></td></tr></table></figure><p><img src="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/image-20200726160336488.png" alt="image-20200726160336488"></p><p>查看city表中的索引信息；</p><p><img src="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/1551440511890.png" alt="1551440511890"> </p><p><img src="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/1551440544483.png" alt="1551440544483"> </p><h5 id="5-3-删除索引"><a href="#5-3-删除索引" class="headerlink" title="5.3 删除索引"></a>5.3 删除索引</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#语法 ：</span><br><span class="line">DROP INDEX index_name ON tbl_name;</span><br><span class="line"></span><br><span class="line"># 删除city表上的索引idx_city_name</span><br><span class="line">drop index idx_city_name on city;</span><br></pre></td></tr></table></figure><h5 id="5-4-alter命令"><a href="#5-4-alter命令" class="headerlink" title="5.4 alter命令"></a>5.4 alter命令</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#该语句添加一个主键，这意味着索引值必须是唯一的，且不能为NULL</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> tb_name <span class="keyword">add</span> primary <span class="keyword">key</span>(column_list); </span><br><span class="line"></span><br><span class="line"><span class="comment">#这条语句创建索引的值必须是唯一的（除了NULL外，NULL可能会出现多次）</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> tb_name <span class="keyword">add</span> <span class="keyword">unique</span> index_name(column_list);</span><br><span class="line"></span><br><span class="line"><span class="comment">#添加普通索引， 索引值可以出现多次。</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> tb_name <span class="keyword">add</span> <span class="keyword">index</span> index_name(column_list);</span><br><span class="line"></span><br><span class="line"><span class="comment">#该语句指定了索引为FULLTEXT， 用于全文索引</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> tb_name <span class="keyword">add</span> fulltext index_name(column_list);</span><br></pre></td></tr></table></figure><p><img src="https://oss-blogs.oss-cn-hangzhou.aliyuncs.com/blogs/itbuild/MySql%E9%AB%98%E7%BA%A7/image-20200726161308631.png" alt="image-20200726161308631"></p><h4 id="6-索引设计原则☆"><a href="#6-索引设计原则☆" class="headerlink" title="6. 索引设计原则☆"></a>6. 索引设计原则☆</h4><blockquote><p>索引的设计可以遵循一些已有的原则，创建索引的时候请尽量考虑符合这些原则，便于提升索引的使用效率，更高效的使用索引。</p><ul><li><p>对查询频次较高，且数据量比较大的表建立索引。</p></li><li><p><code>索引字段的选择，最佳候选列应当从where子句的条件中提取，如果where子句中的组合比较多，那么应当挑选最常用、过滤效果最好的列的组合。</code></p></li><li><p>使用唯一索引，区分度越高，使用索引的效率越高。</p></li><li><p>索引可以有效的提升查询数据的效率，但索引数量不是多多益善，索引越多，维护索引的代价自然也就水涨船高。对于插入、更新、删除等DML操作比较频繁的表来说，索引过多，会引入相当高的维护代价，降低DML操作的效率，增加相应操作的时间消耗。<code>另外索引过多的话，MySQL也会犯选择困难病，虽然最终仍然会找到一个可用的索引，但无疑提高了选择的代价。</code></p></li><li><p>使用短索引，索引创建之后也是使用硬盘来存储的，因此提升索引访问的I/O效率，也可以提升总体的访问效率。假如构成索引的字段总长度比较短，那么在给定大小的存储块内可以存储更多的索引值，相应的可以有效的提升MySQL访问索引的I/O效率。</p></li><li><p><code>利用最左前缀，N个列组合而成的组合索引，那么相当于是创建了N个索引，如果查询时where子句中使用了组成该索引的前几个字段，那么这条查询SQL可以利用组合索引来提升查询效率。</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">创建复合索引:</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> idx_name_email_status <span class="keyword">on</span> tb_seller(<span class="keyword">name</span>,email,<span class="keyword">status</span>);</span><br><span class="line">就相当于</span><br><span class="line">对name 创建索引 ;</span><br><span class="line">对name , email 创建了索引 ;</span><br><span class="line">对name , email, status 创建了索引 ;</span><br></pre></td></tr></table></figure></li></ul></blockquote><h2 id="☆"><a href="#☆" class="headerlink" title="☆"></a>☆</h2>]]></content>
    
    
    <summary type="html">&lt;p&gt;花城人去今萧索，春梦绕胡沙。&lt;/p&gt;
&lt;p align=&quot;right&quot;&gt;——赵佶《眼儿媚》&lt;/p&gt;</summary>
    
    
    
    <category term="MySql高级" scheme="http://www.itbuild.cn/categories/MySql%E9%AB%98%E7%BA%A7/"/>
    
    
  </entry>
  
  <entry>
    <title>MySql基础/09.数据库的备份与还原</title>
    <link href="http://www.itbuild.cn/2020/12/19/MySql%E5%9F%BA%E7%A1%80/09.%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E5%A4%87%E4%BB%BD%E4%B8%8E%E8%BF%98%E5%8E%9F/"/>
    <id>http://www.itbuild.cn/2020/12/19/MySql%E5%9F%BA%E7%A1%80/09.%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E5%A4%87%E4%BB%BD%E4%B8%8E%E8%BF%98%E5%8E%9F/</id>
    <published>2020-12-19T13:44:30.629Z</published>
    <updated>2020-12-19T14:04:59.130Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>休对故人思故国，且将新火试新茶。诗酒趁年华。</p><p align="right">——苏轼《望江南》</p><a id="more"></a><h1 id="数据库备份和还原"><a href="#数据库备份和还原" class="headerlink" title="数据库备份和还原"></a>数据库备份和还原</h1><h2 id="1-备份的应用场景"><a href="#1-备份的应用场景" class="headerlink" title="1. 备份的应用场景"></a>1. 备份的应用场景</h2><blockquote><p>在服务器进行数据传输、数据存储和数据交换，就有可能产生数据故障。比如发生意外停机或存储介质损坏。这时，如果没有采取数据备份和数据恢复手段与措施，就会导致数据的丢失，造成的损失是无法弥补与估量的。</p></blockquote><h3 id="1-1-使用DOS窗口备份与还原"><a href="#1-1-使用DOS窗口备份与还原" class="headerlink" title="1.1 使用DOS窗口备份与还原"></a>1.1 使用DOS窗口备份与还原</h3><blockquote><p>DOS窗口下执行，不需要登录MySQL数据库</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -u用户名 -p密码 数据库 &gt; 文件的路径;</span><br><span class="line">mysqldump -uroot -proot miaomiao &gt; E:/file/bbb/miaomiao.sql</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 导出结果：数据库中的所有表和数据都会导出成 SQL 语句</span></span><br></pre></td></tr></table></figure><blockquote><p>还原格式，MySQL中的命令，需要登录后才可以操作</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> 数据库;</span><br><span class="line">source 导入文件的路径;</span><br><span class="line"><span class="keyword">use</span> miaomiao;</span><br><span class="line">source E:/file/bbb/miaomiao.sql;</span><br></pre></td></tr></table></figure><h3 id="1-2-使用Navicat备份与还原"><a href="#1-2-使用Navicat备份与还原" class="headerlink" title="1.2 使用Navicat备份与还原"></a>1.2 使用Navicat备份与还原</h3><blockquote><p>备份–当前Navicat12版本</p></blockquote><ol><li>选中要备份的数据库，右键“  <strong>转储 SQL文件</strong>—- <strong>结构和数据</strong> ”</li><li>选择要转储的路径，点击保存就OK了。</li></ol><p><img src="C:%5CUsers%5CAdministrator%5CDesktop%5C%E7%AC%94%E8%AE%B0%5C%E6%95%B0%E6%8D%AE%E5%BA%93-justweb%5C%E7%AC%94%E8%AE%B0%5Cassets%5C001.png" alt=""></p><blockquote><p>还原</p><ul><li>注意：还原数据前提是当前数据库要存在。<ul><li>如果仅仅是误删了数据库里面的表等，选择当前数据库，直接右键“<strong>运行 SQL 文件 —- 选择备份文件就OK了</strong>”。</li><li>如果删除了整个数据库，需要先建一个数据库（或者在其他建好的数据库），选择数据库，右键“<strong>运行 SQL 文件 —- 选择备份文件就OK了</strong>”。</li></ul></li></ul></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;休对故人思故国，且将新火试新茶。诗酒趁年华。&lt;/p&gt;
&lt;p align=&quot;right&quot;&gt;——苏轼《望江南》&lt;/p&gt;</summary>
    
    
    
    <category term="MySql基础" scheme="http://www.itbuild.cn/categories/MySql%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>MySql基础/08.数据库设计三大范式</title>
    <link href="http://www.itbuild.cn/2020/12/19/MySql%E5%9F%BA%E7%A1%80/08.%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1%E4%B8%89%E5%A4%A7%E8%8C%83%E5%BC%8F/"/>
    <id>http://www.itbuild.cn/2020/12/19/MySql%E5%9F%BA%E7%A1%80/08.%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1%E4%B8%89%E5%A4%A7%E8%8C%83%E5%BC%8F/</id>
    <published>2020-12-19T13:44:30.627Z</published>
    <updated>2020-12-19T14:04:52.501Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>和羞走，倚门回首，却把青梅嗅。</p><p align="right">——李清照《点绛唇》</p><a id="more"></a><h1 id="数据库设计"><a href="#数据库设计" class="headerlink" title="数据库设计"></a>数据库设计</h1><blockquote><p>百度百科数据库设计定义：</p><ul><li><p>数据库设计(Database Design)是指对于一个给定的应用环境，构造最优的数据库模式，建立<a href="https://baike.baidu.com/item/数据库及其应用/2054396" target="_blank" rel="noopener">数据库及其应用</a>系统，使之能够有效地<a href="https://baike.baidu.com/item/存储数据/14717603" target="_blank" rel="noopener">存储数据</a>，满足各种用户的应用需求（信息要求和处理要求）。在数据库领域内，常常把使用数据库的各类系统统称为<a href="https://baike.baidu.com/item/数据库应用系统/10440620" target="_blank" rel="noopener">数据库应用系统</a>。</p></li><li><p>数据库设计的设计内容包括：需求分析、概念结构设计、逻辑结构设计、物理结构设计、数据库的实施和数据库的运行和维护。</p></li></ul></blockquote><h2 id="1-数据库规范化"><a href="#1-数据库规范化" class="headerlink" title="1. 数据库规范化"></a>1. 数据库规范化</h2><blockquote><ul><li>好的数据库设计对数据的存储性能和后期的程序开发，都会产生重要的影响。建立科学的，规范的数据库就需要满足一些规则来优化数据的设计和存储，这些规则就称为<strong>范式</strong>。</li></ul></blockquote><h3 id="1-1-范式"><a href="#1-1-范式" class="headerlink" title="1.1 范式"></a>1.1 范式</h3><blockquote><p>目前关系数据库有六种范式：</p><ul><li>第一范式（1NF）</li><li>第二范式（2NF）</li><li>第三范式（3NF）</li><li>巴斯-科德范式（BCNF）</li><li>第四范式(4NF）</li><li>第五范式（5NF，又称完美范式）。</li></ul></blockquote><p><img src="C:%5CUsers%5CAdministrator%5CDesktop%5C%E7%AC%94%E8%AE%B0%5C%E6%95%B0%E6%8D%AE%E5%BA%93-justweb%5C%E7%AC%94%E8%AE%B0%5Cassets%5C%E6%99%AE%E9%80%9A%E8%A1%A8.png" alt=""></p><h3 id="1-2-三大范式"><a href="#1-2-三大范式" class="headerlink" title="1.2 三大范式"></a>1.2 三大范式</h3><blockquote><ul><li>数据库设计满足最低要求的范式是第一范式（1NF）。在第一范式的基础上进一步满足更多规范要求的称为第二范式（2NF），其余范式以次类推。一般说来，数据库只需满足第三范式(3NF）就行了。</li></ul></blockquote><h4 id="1-2-1-第一范式：1NF"><a href="#1-2-1-第一范式：1NF" class="headerlink" title="1.2.1 第一范式：1NF"></a>1.2.1 第一范式：1NF</h4><blockquote><p>原子性：表中每列不可再拆分</p></blockquote><p><img src="C:%5CUsers%5CAdministrator%5CDesktop%5C%E7%AC%94%E8%AE%B0%5C%E6%95%B0%E6%8D%AE%E5%BA%93-justweb%5C%E7%AC%94%E8%AE%B0%5Cassets%5C1NF.png" alt=""></p><h4 id="1-2-2-第二范式：2NF"><a href="#1-2-2-第二范式：2NF" class="headerlink" title="1.2.2 第二范式：2NF"></a>1.2.2 第二范式：2NF</h4><blockquote><ul><li>在1NF的基础上，消除部分依赖，一张表只描述一件事情。</li><li>非码属性必须完全依赖于码属性。</li></ul></blockquote><p><img src="C:%5CUsers%5CAdministrator%5CDesktop%5C%E7%AC%94%E8%AE%B0%5C%E6%95%B0%E6%8D%AE%E5%BA%93-justweb%5C%E7%AC%94%E8%AE%B0%5Cassets%5C2NF.png" alt=""></p><h6 id="一、函数依赖"><a href="#一、函数依赖" class="headerlink" title="一、函数依赖"></a>一、函数依赖</h6><blockquote><ul><li>A—&gt;B,如果通过A属性（属性组），可以唯一确定B属性，那么称B依赖于A</li><li>学号—&gt;姓名</li></ul></blockquote><h6 id="二、完全函数依赖"><a href="#二、完全函数依赖" class="headerlink" title="二、完全函数依赖"></a>二、完全函数依赖</h6><blockquote><ul><li>A—&gt;B，如果A属性是一个属性组，则B属性值的确定依赖于A属性组中所有的属性值。</li><li>（学号,课程名称）—&gt; 分数。 B完全依赖于A</li></ul></blockquote><h6 id="三、部分函数依赖"><a href="#三、部分函数依赖" class="headerlink" title="三、部分函数依赖"></a>三、部分函数依赖</h6><blockquote><ul><li>A—&gt;B，如果A属性是一个属性组，则B属性值的确定依赖于A属性组中的某一些属性值</li><li>（学号,课程名称）—&gt; 姓名 B部分依赖于A</li></ul></blockquote><h6 id="四、传递函数依赖"><a href="#四、传递函数依赖" class="headerlink" title="四、传递函数依赖"></a>四、传递函数依赖</h6><blockquote><ul><li>A—&gt;B , B—&gt;C,如果通过A属性组可以唯一确定B属性组的值，通过B属性组的值可以唯一确定C属性组的值，这时候，我们C传递依赖于A.</li><li>学号—&gt;系名 系名—&gt;系主任  ，系主任传递依赖于学号</li></ul></blockquote><h6 id="五、码"><a href="#五、码" class="headerlink" title="五、码"></a>五、码</h6><blockquote><ul><li>如果一张表中，一个属性或者属性组，完全被其他所有的属性依赖，则称这个属性或者属性组为码。</li><li>（学号，课程名称）就是当前表中的码。</li></ul></blockquote><h6 id="六、主属性"><a href="#六、主属性" class="headerlink" title="六、主属性"></a>六、主属性</h6><blockquote><ul><li>码中所有属性就是主属性。   </li><li>( 学号，课程名称 )</li></ul></blockquote><h6 id="七、非主属性"><a href="#七、非主属性" class="headerlink" title="七、非主属性"></a>七、非主属性</h6><blockquote><ul><li>码中不包含的属性就非主属性。</li></ul></blockquote><h4 id="1-2-3-第三范式：3NF"><a href="#1-2-3-第三范式：3NF" class="headerlink" title="1.2.3 第三范式：3NF"></a>1.2.3 第三范式：3NF</h4><blockquote><p>在2NF的基础上，不产生传递依赖，表中每一列都直接依赖于主键。而不是通过其它列间接依赖于主键。</p></blockquote><p><img src="C:%5CUsers%5CAdministrator%5CDesktop%5C%E7%AC%94%E8%AE%B0%5C%E6%95%B0%E6%8D%AE%E5%BA%93-justweb%5C%E7%AC%94%E8%AE%B0%5Cassets%5C3NF.png" alt=""></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;和羞走，倚门回首，却把青梅嗅。&lt;/p&gt;
&lt;p align=&quot;right&quot;&gt;——李清照《点绛唇》&lt;/p&gt;</summary>
    
    
    
    <category term="MySql基础" scheme="http://www.itbuild.cn/categories/MySql%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
</feed>
